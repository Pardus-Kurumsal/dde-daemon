// Generated by nm-generator

package network

import (
	"fmt"
	"pkg.deepin.io/dde/daemon/network/nm"
	. "pkg.deepin.io/lib/gettext"
)

// Virtual section data
var virtualSections = make(map[string]VsectionInfo)

func initVirtualSections() {
	virtualSections["vs-general"] = VsectionInfo{
		VirtualSection:  "vs-general",
		relatedSections: []string{"connection"},
		Name:            Tr("General"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "connection", Key: "id", Name: Tr("Name"), WidgetType: "EditLineTextInput", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "connection", Key: "vk-autoconnect", Name: Tr("Automatically connect"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "connection", Key: "vk-no-permission", Name: Tr("For All Users"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-ethernet"] = VsectionInfo{
		VirtualSection:  "vs-ethernet",
		relatedSections: []string{"802-3-ethernet"},
		Name:            Tr("Ethernet"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "802-3-ethernet", Key: "mac-address", Name: Tr("Device MAC Addr"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-3-ethernet", Key: "cloned-mac-address", Name: Tr("Cloned MAC Addr"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-3-ethernet", Key: "vk-enable-mtu", Name: Tr("Customize MTU"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-3-ethernet", Key: "mtu", Name: Tr("MTU"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 10000},
		},
	}
	virtualSections["vs-mobile"] = VsectionInfo{
		VirtualSection:  "vs-mobile",
		relatedSections: []string{"vs-mobile", "gsm", "cdma"},
		Name:            Tr("Mobile"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "vs-mobile", Key: "vk-mobile-country", Name: Tr("Country or region"), WidgetType: "EditLineComboBox", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "vs-mobile", Key: "vk-mobile-provider", Name: Tr("Provider"), WidgetType: "EditLineComboBox", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "vs-mobile", Key: "vk-mobile-plan", Name: Tr("Plan"), WidgetType: "EditLineComboBox", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "vs-mobile", Key: "vk-mobile-service-type", Name: Tr("Service Type"), WidgetType: "EditLineComboBox", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "vs-mobile", Key: "vk-gsm-apn-readonly", Name: Tr("APN"), WidgetType: "EditLineLabel", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "apn", Name: Tr("APN"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "number", Name: Tr("Number"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "network-id", Name: Tr("Network ID"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "home-only", Name: Tr("Home Network Only"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "pin", Name: Tr("PIN"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "cdma", Key: "number", Name: Tr("Number"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "cdma", Key: "username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "cdma", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-mobile-gsm"] = VsectionInfo{
		VirtualSection:  "vs-mobile-gsm",
		relatedSections: []string{"gsm"},
		Name:            Tr("Mobile"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "gsm", Key: "apn", Name: Tr("APN"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "number", Name: Tr("Number"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "network-id", Name: Tr("Network ID"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "home-only", Name: Tr("Home Network Only"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "gsm", Key: "pin", Name: Tr("PIN"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-mobile-cdma"] = VsectionInfo{
		VirtualSection:  "vs-mobile-cdma",
		relatedSections: []string{"cdma"},
		Name:            Tr("Mobile"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "cdma", Key: "number", Name: Tr("Number"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "cdma", Key: "username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "cdma", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-security"] = VsectionInfo{
		VirtualSection:  "vs-security",
		relatedSections: []string{"vs-security", "802-11-wireless-security", "802-1x"},
		Name:            Tr("Security"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "vs-security", Key: "vk-enable-8021x", Name: Tr("Security Required"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless-security", Key: "vk-key-mgmt", Name: Tr("Security"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless-security", Key: "wep-key0", Name: Tr("Key"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless-security", Key: "psk", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "vk-eap", Name: Tr("EAP Auth"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "identity", Name: Tr("Identity"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "anonymous-identity", Name: Tr("Anonymous ID"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "vk-ca-cert", Name: Tr("CA Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "vk-client-cert", Name: Tr("User Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "phase1-fast-provisioning", Name: Tr("Provisioning"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "vk-pac-file", Name: Tr("PAC file"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "phase1-peapver", Name: Tr("PEAP Version"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "phase2-auth", Name: Tr("Inner Auth"), WidgetType: "EditLineComboBox", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "vk-private-key", Name: Tr("Private Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "private-key-password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-1x", Key: "private-key-password", Name: Tr("Private Pwd"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-wifi"] = VsectionInfo{
		VirtualSection:  "vs-wifi",
		relatedSections: []string{"802-11-wireless"},
		Name:            Tr("Wi-Fi"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "802-11-wireless", Key: "ssid", Name: Tr("SSID"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless", Key: "mode", Name: Tr("Mode"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless", Key: "band", Name: Tr("Band"), WidgetType: "EditLineComboBox", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless", Key: "channel", Name: Tr("Channel"), WidgetType: "EditLineComboBox", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless", Key: "mac-address", Name: Tr("Device MAC Addr"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless", Key: "cloned-mac-address", Name: Tr("Cloned MAC Addr"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless", Key: "vk-enable-mtu", Name: Tr("Customize MTU"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "802-11-wireless", Key: "mtu", Name: Tr("MTU"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 10000},
		},
	}
	virtualSections["vs-pppoe"] = VsectionInfo{
		VirtualSection:  "vs-pppoe",
		relatedSections: []string{"pppoe"},
		Name:            Tr("PPPoE"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "pppoe", Key: "username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "pppoe", Key: "service", Name: Tr("Service"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "pppoe", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-ppp"] = VsectionInfo{
		VirtualSection:  "vs-ppp",
		relatedSections: []string{"ppp"},
		Name:            Tr("PPP"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "ppp", Key: "require-mppe", Name: Tr("Use MPPE"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "require-mppe-128", Name: Tr("128-bit MPPE"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "mppe-stateful", Name: Tr("Stateful MPPE"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "refuse-eap", Name: Tr("Refuse EAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "refuse-pap", Name: Tr("Refuse PAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "refuse-chap", Name: Tr("Refuse CHAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "refuse-mschap", Name: Tr("Refuse MSCHAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "refuse-mschapv2", Name: Tr("Refuse MSCHAPv2 Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "nobsdcomp", Name: Tr("No BSD Data Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "nodeflate", Name: Tr("No Deflate Data Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "no-vj-comp", Name: Tr("No TCP Header Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ppp", Key: "vk-enable-lcp-echo", Name: Tr("Send PPP Echo Packets"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn"] = VsectionInfo{
		VirtualSection:  "vs-vpn",
		relatedSections: []string{"vs-vpn", "alias-vpn-l2tp", "alias-vpn-openconnect", "alias-vpn-openvpn", "alias-vpn-pptp", "alias-vpn-strongswan", "alias-vpn-vpnc"},
		Name:            Tr("VPN"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "vs-vpn", Key: "vk-vpn-type", WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "vs-vpn", Key: "vk-vpn-missing-plugin", Name: Tr("Need VPN Plugin"), WidgetType: "EditLineMissingPackage", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "user", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "domain", Name: Tr("NT Domain"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "cacert", Name: Tr("CA Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "proxy", Name: Tr("Proxy"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "enable_csd_trojan", Name: Tr("Allow Cisco Secure Desktop Trojan"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "csd_wrapper", Name: Tr("CSD Script"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "usercert", Name: Tr("User Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "userkey", Name: Tr("Private Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "pem_passphrase_fsid", Name: Tr("Use FSID for Key Passphrase"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "remote", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "connection-type", Name: Tr("Auth Type"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "ca", Name: Tr("CA Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "cert", Name: Tr("User Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "key", Name: Tr("Private Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "cert-pass-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "cert-pass", Name: Tr("Private Pwd"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "static-key", Name: Tr("Static Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "vk-static-key-direction", Name: Tr("Customize Key Direction"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "static-key-direction", Name: Tr("Key Direction"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "remote-ip", Name: Tr("Remote IP"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "local-ip", Name: Tr("Local IP"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "user", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "domain", Name: Tr("NT Domain"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "address", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "certificate", Name: Tr("CA Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "method", Name: Tr("Auth Type"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "user", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "usercert", Name: Tr("User Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "userkey", Name: Tr("Private Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "virtual", Name: Tr("Request an Inner IP Address"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "encap", Name: Tr("Enforce UDP Encapsulation"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "ipcomp", Name: Tr("Use IP Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "IPSec gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "Xauth username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "Xauth password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "Xauth password", Name: Tr("User Pwd"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "IPSec ID", Name: Tr("Group Name"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "IPSec secret-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "IPSec secret", Name: Tr("Group Pwd"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "vk-hybrid-authmode", Name: Tr("Use Hybrid Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "CA-File", Name: Tr("CA File"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-l2tp"] = VsectionInfo{
		VirtualSection:  "vs-vpn-l2tp",
		relatedSections: []string{"alias-vpn-l2tp"},
		Name:            Tr("VPN"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "user", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp", Key: "domain", Name: Tr("NT Domain"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-l2tp-ipsec"] = VsectionInfo{
		VirtualSection:  "vs-vpn-l2tp-ipsec",
		relatedSections: []string{"alias-vpn-l2tp-ipsec"},
		Name:            Tr("VPN IPsec"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ipsec", Key: "ipsec-enabled", Name: Tr("Enable IPsec"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ipsec", Key: "ipsec-group-name", Name: Tr("Group Name"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ipsec", Key: "ipsec-gateway-id", Name: Tr("Group ID"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ipsec", Key: "ipsec-psk", Name: Tr("Pre-Shared Key"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-l2tp-ppp"] = VsectionInfo{
		VirtualSection:  "vs-vpn-l2tp-ppp",
		relatedSections: []string{"alias-vpn-l2tp-ppp"},
		Name:            Tr("VPN PPP"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "vk-require-mppe", Name: Tr("Use MPPE"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "vk-mppe-security", Name: Tr("Security"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "mppe-stateful", Name: Tr("Stateful MPPE"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "refuse-eap", Name: Tr("Refuse EAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "refuse-pap", Name: Tr("Refuse PAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "refuse-chap", Name: Tr("Refuse CHAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "refuse-mschap", Name: Tr("Refuse MSCHAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "refuse-mschapv2", Name: Tr("Refuse MSCHAPv2 Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "nobsdcomp", Name: Tr("No BSD Data Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "nodeflate", Name: Tr("No Deflate Data Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "no-vj-comp", Name: Tr("No TCP Header Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "nopcomp", Name: Tr("No Protocol Field Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "noaccomp", Name: Tr("No Address/Control Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-l2tp-ppp", Key: "vk-enable-lcp-echo", Name: Tr("Send PPP Echo Packets"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-openconnect"] = VsectionInfo{
		VirtualSection:  "vs-vpn-openconnect",
		relatedSections: []string{"alias-vpn-openconnect"},
		Name:            Tr("VPN"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "cacert", Name: Tr("CA Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "proxy", Name: Tr("Proxy"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "enable_csd_trojan", Name: Tr("Allow Cisco Secure Desktop Trojan"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "csd_wrapper", Name: Tr("CSD Script"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "usercert", Name: Tr("User Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "userkey", Name: Tr("Private Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openconnect", Key: "pem_passphrase_fsid", Name: Tr("Use FSID for Key Passphrase"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-openvpn"] = VsectionInfo{
		VirtualSection:  "vs-vpn-openvpn",
		relatedSections: []string{"alias-vpn-openvpn"},
		Name:            Tr("VPN"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "remote", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "connection-type", Name: Tr("Auth Type"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "ca", Name: Tr("CA Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "cert", Name: Tr("User Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "key", Name: Tr("Private Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "cert-pass-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "cert-pass", Name: Tr("Private Pwd"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "static-key", Name: Tr("Static Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "vk-static-key-direction", Name: Tr("Customize Key Direction"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "static-key-direction", Name: Tr("Key Direction"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "remote-ip", Name: Tr("Remote IP"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn", Key: "local-ip", Name: Tr("Local IP"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-openvpn-security"] = VsectionInfo{
		VirtualSection:  "vs-vpn-openvpn-security",
		relatedSections: []string{"alias-vpn-openvpn-security"},
		Name:            Tr("VPN Security"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-security", Key: "cipher", Name: Tr("Cipher"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-security", Key: "auth", Name: Tr("HMAC Auth"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-openvpn-tlsauth"] = VsectionInfo{
		VirtualSection:  "vs-vpn-openvpn-tlsauth",
		relatedSections: []string{"alias-vpn-openvpn-tlsauth"},
		Name:            Tr("VPN TLS Authentication"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-tlsauth", Key: "tls-remote", Name: Tr("Subject Match"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-tlsauth", Key: "remote-cert-tls", Name: Tr("Remote Cert Type"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-tlsauth", Key: "ta", Name: Tr("Key File"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-tlsauth", Key: "vk-ta-dir", Name: Tr("Customize Key Direction"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-tlsauth", Key: "ta-dir", Name: Tr("Key Direction"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-openvpn-proxies"] = VsectionInfo{
		VirtualSection:  "vs-vpn-openvpn-proxies",
		relatedSections: []string{"alias-vpn-openvpn-proxies"},
		Name:            Tr("VPN Proxies"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-proxies", Key: "proxy-type", Name: Tr("Proxy Type"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-proxies", Key: "proxy-server", Name: Tr("Server IP"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-proxies", Key: "proxy-port", Name: Tr("Port"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 65535},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-proxies", Key: "proxy-retry", Name: Tr("Retry Indefinitely When Failed"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-proxies", Key: "http-proxy-username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-proxies", Key: "http-proxy-password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-openvpn-advanced"] = VsectionInfo{
		VirtualSection:  "vs-vpn-openvpn-advanced",
		relatedSections: []string{"alias-vpn-openvpn-advanced"},
		Name:            Tr("VPN Advanced"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "vk-enable-port", Name: Tr("Customize Gateway Port"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "port", Name: Tr("Gateway Port"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 65535},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "vk-enable-reneg-seconds", Name: Tr("Customize Renegotiation Interval"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "reneg-seconds", Name: Tr("Renegotiation Interval"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 604800},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "comp-lzo", Name: Tr("Use LZO data compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "proto-tcp", Name: Tr("Use TCP connection"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "tap-dev", Name: Tr("Use TAP device"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "vk-enable-tunnel-mtu", Name: Tr("Customize Tunnel MTU"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "tunnel-mtu", Name: Tr("MTU"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 65535},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "vk-enable-fragment-size", Name: Tr("Customize UDP Fragment Size"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "fragment-size", Name: Tr("UDP Fragment Size"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 65535},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "mssfix", Name: Tr("Restrict Tunnel TCP MSS"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-openvpn-advanced", Key: "remote-random", Name: Tr("Randomize Remote Hosts"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-pptp"] = VsectionInfo{
		VirtualSection:  "vs-vpn-pptp",
		relatedSections: []string{"alias-vpn-pptp"},
		Name:            Tr("VPN"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "user", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp", Key: "domain", Name: Tr("NT Domain"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-pptp-ppp"] = VsectionInfo{
		VirtualSection:  "vs-vpn-pptp-ppp",
		relatedSections: []string{"alias-vpn-pptp-ppp"},
		Name:            Tr("VPN PPP"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "vk-require-mppe", Name: Tr("Use MPPE"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "vk-mppe-security", Name: Tr("Security"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "mppe-stateful", Name: Tr("Stateful MPPE"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "refuse-eap", Name: Tr("Refuse EAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "refuse-pap", Name: Tr("Refuse PAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "refuse-chap", Name: Tr("Refuse CHAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "refuse-mschap", Name: Tr("Refuse MSCHAP Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "refuse-mschapv2", Name: Tr("Refuse MSCHAPv2 Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "nobsdcomp", Name: Tr("No BSD Data Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "nodeflate", Name: Tr("No Deflate Data Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "no-vj-comp", Name: Tr("No TCP Header Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-pptp-ppp", Key: "vk-enable-lcp-echo", Name: Tr("Send PPP Echo Packets"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-strongswan"] = VsectionInfo{
		VirtualSection:  "vs-vpn-strongswan",
		relatedSections: []string{"alias-vpn-strongswan"},
		Name:            Tr("VPN"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "address", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "certificate", Name: Tr("CA Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "method", Name: Tr("Auth Type"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "user", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "usercert", Name: Tr("User Cert"), WidgetType: "EditLineFileChooser", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "userkey", Name: Tr("Private Key"), WidgetType: "EditLineFileChooser", AlwaysUpdate: true, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "password", Name: Tr("Password"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "virtual", Name: Tr("Request an Inner IP Address"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "encap", Name: Tr("Enforce UDP Encapsulation"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-strongswan", Key: "ipcomp", Name: Tr("Use IP Compression"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-vpnc"] = VsectionInfo{
		VirtualSection:  "vs-vpn-vpnc",
		relatedSections: []string{"alias-vpn-vpnc"},
		Name:            Tr("VPN"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "IPSec gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "Xauth username", Name: Tr("Username"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "Xauth password-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "Xauth password", Name: Tr("User Pwd"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "IPSec ID", Name: Tr("Group Name"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "IPSec secret-flags", Name: Tr("Ask for Pwd"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "IPSec secret", Name: Tr("Group Pwd"), WidgetType: "EditLinePasswordInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "vk-hybrid-authmode", Name: Tr("Use Hybrid Authentication"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc", Key: "CA-File", Name: Tr("CA File"), WidgetType: "EditLineFileChooser", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-vpn-vpnc-advanced"] = VsectionInfo{
		VirtualSection:  "vs-vpn-vpnc-advanced",
		relatedSections: []string{"alias-vpn-vpnc-advanced"},
		Name:            Tr("VPN Advanced"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "Domain", Name: Tr("Domain"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "Vendor", Name: Tr("Vendor"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "Application Version", Name: Tr("Version"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "vk-encryption-method", Name: Tr("Encryption"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "NAT Traversal Mode", Name: Tr("NAT Traversal"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "IKE DH Group", Name: Tr("IKE DH Group"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "Perfect Forward Secrecy", Name: Tr("Forward Secrecy"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "Local Port", Name: Tr("Local Port"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 65535},
			&GeneralKeyInfo{Section: "alias-vpn-vpnc-advanced", Key: "vk-disable-dpd", Name: Tr("Disable Dead Peer Detection"), WidgetType: "EditLineSwitchButton", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-ipv4"] = VsectionInfo{
		VirtualSection:  "vs-ipv4",
		relatedSections: []string{"ipv4"},
		Name:            Tr("IPv4"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "ipv4", Key: "method", Name: Tr("Method"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv4", Key: "vk-addresses-address", Name: Tr("IP Address"), WidgetType: "EditLineIpv4Input", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv4", Key: "vk-addresses-mask", Name: Tr("Netmask"), WidgetType: "EditLineIpv4Input", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv4", Key: "vk-addresses-gateway", Name: Tr("Gateway"), WidgetType: "EditLineIpv4Input", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv4", Key: "vk-dns", Name: Tr("Primary DNS"), WidgetType: "EditLineIpv4Input", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv4", Key: "vk-dns2", Name: Tr("Secondary DNS"), WidgetType: "EditLineIpv4Input", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
	virtualSections["vs-ipv6"] = VsectionInfo{
		VirtualSection:  "vs-ipv6",
		relatedSections: []string{"ipv6"},
		Name:            Tr("IPv6"),
		Keys: []*GeneralKeyInfo{
			&GeneralKeyInfo{Section: "ipv6", Key: "method", Name: Tr("Method"), WidgetType: "EditLineComboBox", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv6", Key: "vk-addresses-address", Name: Tr("IP Address"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv6", Key: "vk-addresses-prefix", Name: Tr("Prefix"), WidgetType: "EditLineSpinner", AlwaysUpdate: false, UseValueRange: true, MinValue: 0, MaxValue: 128},
			&GeneralKeyInfo{Section: "ipv6", Key: "vk-addresses-gateway", Name: Tr("Gateway"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv6", Key: "vk-dns", Name: Tr("Primary DNS"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
			&GeneralKeyInfo{Section: "ipv6", Key: "vk-dns2", Name: Tr("Secondary DNS"), WidgetType: "EditLineTextInput", AlwaysUpdate: false, UseValueRange: false, MinValue: 0, MaxValue: 0},
		},
	}
}

// Virtual key data
var virtualKeys = []vkeyInfo{
	{value: "vk-autoconnect", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "connection", relatedKeys: []string{nm.NM_SETTING_CONNECTION_AUTOCONNECT}, childKey: false, optional: false},
	{value: "vk-no-permission", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "connection", relatedKeys: []string{nm.NM_SETTING_CONNECTION_PERMISSIONS}, childKey: false, optional: false},
	{value: "vk-enable-mtu", ktype: ktypeBoolean, vkType: vkTypeEnableWrapper, relatedSection: "802-3-ethernet", relatedKeys: []string{nm.NM_SETTING_WIRED_MTU}, childKey: false, optional: false},
	{value: "vk-mobile-country", ktype: ktypeString, vkType: vkTypeController, relatedSection: "vs-mobile", relatedKeys: []string{}, childKey: false, optional: false},
	{value: "vk-mobile-provider", ktype: ktypeString, vkType: vkTypeController, relatedSection: "vs-mobile", relatedKeys: []string{}, childKey: false, optional: false},
	{value: "vk-mobile-plan", ktype: ktypeString, vkType: vkTypeController, relatedSection: "vs-mobile", relatedKeys: []string{}, childKey: false, optional: false},
	{value: "vk-mobile-service-type", ktype: ktypeString, vkType: vkTypeController, relatedSection: "vs-mobile", relatedKeys: []string{}, childKey: false, optional: false},
	{value: "vk-gsm-apn-readonly", ktype: ktypeString, vkType: vkTypeController, relatedSection: "vs-mobile", relatedKeys: []string{}, childKey: false, optional: false},
	{value: "vk-enable-8021x", ktype: ktypeBoolean, vkType: vkTypeController, relatedSection: "vs-security", relatedKeys: []string{}, childKey: false, optional: false},
	{value: "vk-key-mgmt", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "802-11-wireless-security", relatedKeys: []string{nm.NM_SETTING_WIRELESS_SECURITY_KEY_MGMT}, childKey: false, optional: false},
	{value: "vk-eap", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "802-1x", relatedKeys: []string{nm.NM_SETTING_802_1X_EAP}, childKey: false, optional: false},
	{value: "vk-ca-cert", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "802-1x", relatedKeys: []string{nm.NM_SETTING_802_1X_CA_CERT}, childKey: false, optional: false},
	{value: "vk-client-cert", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "802-1x", relatedKeys: []string{nm.NM_SETTING_802_1X_CLIENT_CERT}, childKey: false, optional: false},
	{value: "vk-pac-file", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "802-1x", relatedKeys: []string{nm.NM_SETTING_802_1X_PAC_FILE}, childKey: false, optional: false},
	{value: "vk-private-key", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "802-1x", relatedKeys: []string{nm.NM_SETTING_802_1X_PRIVATE_KEY}, childKey: false, optional: false},
	{value: "vk-enable-mtu", ktype: ktypeBoolean, vkType: vkTypeEnableWrapper, relatedSection: "802-11-wireless", relatedKeys: []string{nm.NM_SETTING_WIRELESS_MTU}, childKey: false, optional: false},
	{value: "vk-enable-lcp-echo", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "ppp", relatedKeys: []string{nm.NM_SETTING_PPP_LCP_ECHO_FAILURE, nm.NM_SETTING_PPP_LCP_ECHO_INTERVAL}, childKey: false, optional: false},
	{value: "vk-vpn-type", ktype: ktypeString, vkType: vkTypeController, relatedSection: "vs-vpn", relatedKeys: []string{}, childKey: false, optional: false},
	{value: "vk-vpn-missing-plugin", ktype: ktypeString, vkType: vkTypeController, relatedSection: "vs-vpn", relatedKeys: []string{}, childKey: false, optional: false},
	{value: "vk-static-key-direction", ktype: ktypeBoolean, vkType: vkTypeEnableWrapper, relatedSection: "alias-vpn-openvpn", relatedKeys: []string{nm.NM_SETTING_VPN_OPENVPN_KEY_STATIC_KEY_DIRECTION}, childKey: false, optional: false},
	{value: "vk-hybrid-authmode", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "alias-vpn-vpnc", relatedKeys: []string{nm.NM_SETTING_VPN_VPNC_KEY_AUTHMODE}, childKey: false, optional: false},
	{value: "vk-require-mppe", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "alias-vpn-l2tp-ppp", relatedKeys: []string{nm.NM_SETTING_VPN_L2TP_KEY_REQUIRE_MPPE}, childKey: false, optional: false},
	{value: "vk-mppe-security", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "alias-vpn-l2tp-ppp", relatedKeys: []string{nm.NM_SETTING_VPN_L2TP_KEY_REQUIRE_MPPE_40, nm.NM_SETTING_VPN_L2TP_KEY_REQUIRE_MPPE_128}, childKey: false, optional: false},
	{value: "vk-enable-lcp-echo", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "alias-vpn-l2tp-ppp", relatedKeys: []string{nm.NM_SETTING_VPN_L2TP_KEY_LCP_ECHO_FAILURE, nm.NM_SETTING_VPN_L2TP_KEY_LCP_ECHO_INTERVAL}, childKey: false, optional: false},
	{value: "vk-ta-dir", ktype: ktypeBoolean, vkType: vkTypeEnableWrapper, relatedSection: "alias-vpn-openvpn-tlsauth", relatedKeys: []string{nm.NM_SETTING_VPN_OPENVPN_KEY_TA_DIR}, childKey: false, optional: false},
	{value: "vk-enable-port", ktype: ktypeBoolean, vkType: vkTypeEnableWrapper, relatedSection: "alias-vpn-openvpn-advanced", relatedKeys: []string{nm.NM_SETTING_VPN_OPENVPN_KEY_PORT}, childKey: false, optional: false},
	{value: "vk-enable-reneg-seconds", ktype: ktypeBoolean, vkType: vkTypeEnableWrapper, relatedSection: "alias-vpn-openvpn-advanced", relatedKeys: []string{nm.NM_SETTING_VPN_OPENVPN_KEY_RENEG_SECONDS}, childKey: false, optional: false},
	{value: "vk-enable-tunnel-mtu", ktype: ktypeBoolean, vkType: vkTypeEnableWrapper, relatedSection: "alias-vpn-openvpn-advanced", relatedKeys: []string{nm.NM_SETTING_VPN_OPENVPN_KEY_TUNNEL_MTU}, childKey: false, optional: false},
	{value: "vk-enable-fragment-size", ktype: ktypeBoolean, vkType: vkTypeEnableWrapper, relatedSection: "alias-vpn-openvpn-advanced", relatedKeys: []string{nm.NM_SETTING_VPN_OPENVPN_KEY_FRAGMENT_SIZE}, childKey: false, optional: false},
	{value: "vk-require-mppe", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "alias-vpn-pptp-ppp", relatedKeys: []string{nm.NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE}, childKey: false, optional: false},
	{value: "vk-mppe-security", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "alias-vpn-pptp-ppp", relatedKeys: []string{nm.NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_40, nm.NM_SETTING_VPN_PPTP_KEY_REQUIRE_MPPE_128}, childKey: false, optional: false},
	{value: "vk-enable-lcp-echo", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "alias-vpn-pptp-ppp", relatedKeys: []string{nm.NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_FAILURE, nm.NM_SETTING_VPN_PPTP_KEY_LCP_ECHO_INTERVAL}, childKey: false, optional: false},
	{value: "vk-encryption-method", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "alias-vpn-vpnc-advanced", relatedKeys: []string{nm.NM_SETTING_VPN_VPNC_KEY_SINGLE_DES, nm.NM_SETTING_VPN_VPNC_KEY_NO_ENCRYPTION}, childKey: false, optional: false},
	{value: "vk-disable-dpd", ktype: ktypeBoolean, vkType: vkTypeWrapper, relatedSection: "alias-vpn-vpnc-advanced", relatedKeys: []string{nm.NM_SETTING_VPN_VPNC_KEY_DPD_IDLE_TIMEOUT}, childKey: false, optional: false},
	{value: "vk-addresses-address", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv4", relatedKeys: []string{nm.NM_SETTING_IP4_CONFIG_ADDRESSES}, childKey: true, optional: false},
	{value: "vk-addresses-mask", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv4", relatedKeys: []string{nm.NM_SETTING_IP4_CONFIG_ADDRESSES}, childKey: true, optional: false},
	{value: "vk-addresses-gateway", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv4", relatedKeys: []string{nm.NM_SETTING_IP4_CONFIG_ADDRESSES}, childKey: true, optional: true},
	{value: "vk-dns", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv4", relatedKeys: []string{nm.NM_SETTING_IP4_CONFIG_DNS}, childKey: true, optional: false},
	{value: "vk-dns2", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv4", relatedKeys: []string{nm.NM_SETTING_IP4_CONFIG_DNS}, childKey: true, optional: false},
	{value: "vk-addresses-address", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv6", relatedKeys: []string{nm.NM_SETTING_IP6_CONFIG_ADDRESSES}, childKey: true, optional: false},
	{value: "vk-addresses-prefix", ktype: ktypeUint32, vkType: vkTypeWrapper, relatedSection: "ipv6", relatedKeys: []string{nm.NM_SETTING_IP6_CONFIG_ADDRESSES}, childKey: true, optional: false},
	{value: "vk-addresses-gateway", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv6", relatedKeys: []string{nm.NM_SETTING_IP6_CONFIG_ADDRESSES}, childKey: true, optional: true},
	{value: "vk-dns", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv6", relatedKeys: []string{nm.NM_SETTING_IP6_CONFIG_DNS}, childKey: true, optional: false},
	{value: "vk-dns2", ktype: ktypeString, vkType: vkTypeWrapper, relatedSection: "ipv6", relatedKeys: []string{nm.NM_SETTING_IP6_CONFIG_DNS}, childKey: true, optional: false},
}

// Virtual key general JSON getter
func generalGetVkeyJSON(data connectionData, section, key string) (valueJSON string) {
	if section == "connection" && key == "vk-autoconnect" {
		return getSettingVkConnectionAutoconnectJSON(data)
	}
	if section == "connection" && key == "vk-no-permission" {
		return getSettingVkConnectionNoPermissionJSON(data)
	}
	if section == "802-3-ethernet" && key == "vk-enable-mtu" {
		return getSettingVkWiredEnableMtuJSON(data)
	}
	if section == "vs-mobile" && key == "vk-mobile-country" {
		return getSettingVkMobileCountryJSON(data)
	}
	if section == "vs-mobile" && key == "vk-mobile-provider" {
		return getSettingVkMobileProviderJSON(data)
	}
	if section == "vs-mobile" && key == "vk-mobile-plan" {
		return getSettingVkMobilePlanJSON(data)
	}
	if section == "vs-mobile" && key == "vk-mobile-service-type" {
		return getSettingVkMobileServiceTypeJSON(data)
	}
	if section == "vs-mobile" && key == "vk-gsm-apn-readonly" {
		return getSettingVkMobileApnReadonlyJSON(data)
	}
	if section == "vs-security" && key == "vk-enable-8021x" {
		return getSettingVk8021xEnableJSON(data)
	}
	if section == "802-11-wireless-security" && key == "vk-key-mgmt" {
		return getSettingVkWirelessSecurityKeyMgmtJSON(data)
	}
	if section == "802-1x" && key == "vk-eap" {
		return getSettingVk8021xEapJSON(data)
	}
	if section == "802-1x" && key == "vk-ca-cert" {
		return getSettingVk8021xCaCertJSON(data)
	}
	if section == "802-1x" && key == "vk-client-cert" {
		return getSettingVk8021xClientCertJSON(data)
	}
	if section == "802-1x" && key == "vk-pac-file" {
		return getSettingVk8021xPacFileJSON(data)
	}
	if section == "802-1x" && key == "vk-private-key" {
		return getSettingVk8021xPrivateKeyJSON(data)
	}
	if section == "802-11-wireless" && key == "vk-enable-mtu" {
		return getSettingVkWirelessEnableMtuJSON(data)
	}
	if section == "ppp" && key == "vk-enable-lcp-echo" {
		return getSettingVkPppEnableLcpEchoJSON(data)
	}
	if section == "vs-vpn" && key == "vk-vpn-type" {
		return getSettingVkVpnTypeJSON(data)
	}
	if section == "vs-vpn" && key == "vk-vpn-missing-plugin" {
		return getSettingVkVpnMissingPluginJSON(data)
	}
	if section == "alias-vpn-openvpn" && key == "vk-static-key-direction" {
		return getSettingVkVpnOpenvpnKeyEnableStaticKeyDirectionJSON(data)
	}
	if section == "alias-vpn-vpnc" && key == "vk-hybrid-authmode" {
		return getSettingVkVpnVpncKeyHybridAuthmodeJSON(data)
	}
	if section == "alias-vpn-l2tp-ppp" && key == "vk-require-mppe" {
		return getSettingVkVpnL2tpRequireMppeJSON(data)
	}
	if section == "alias-vpn-l2tp-ppp" && key == "vk-mppe-security" {
		return getSettingVkVpnL2tpMppeSecurityJSON(data)
	}
	if section == "alias-vpn-l2tp-ppp" && key == "vk-enable-lcp-echo" {
		return getSettingVkVpnL2tpEnableLcpEchoJSON(data)
	}
	if section == "alias-vpn-openvpn-tlsauth" && key == "vk-ta-dir" {
		return getSettingVkVpnOpenvpnKeyEnableTaDirJSON(data)
	}
	if section == "alias-vpn-openvpn-advanced" && key == "vk-enable-port" {
		return getSettingVkVpnOpenvpnKeyEnablePortJSON(data)
	}
	if section == "alias-vpn-openvpn-advanced" && key == "vk-enable-reneg-seconds" {
		return getSettingVkVpnOpenvpnKeyEnableRenegSecondsJSON(data)
	}
	if section == "alias-vpn-openvpn-advanced" && key == "vk-enable-tunnel-mtu" {
		return getSettingVkVpnOpenvpnKeyEnableTunnelMtuJSON(data)
	}
	if section == "alias-vpn-openvpn-advanced" && key == "vk-enable-fragment-size" {
		return getSettingVkVpnOpenvpnKeyEnableFragmentSizeJSON(data)
	}
	if section == "alias-vpn-pptp-ppp" && key == "vk-require-mppe" {
		return getSettingVkVpnPptpRequireMppeJSON(data)
	}
	if section == "alias-vpn-pptp-ppp" && key == "vk-mppe-security" {
		return getSettingVkVpnPptpMppeSecurityJSON(data)
	}
	if section == "alias-vpn-pptp-ppp" && key == "vk-enable-lcp-echo" {
		return getSettingVkVpnPptpEnableLcpEchoJSON(data)
	}
	if section == "alias-vpn-vpnc-advanced" && key == "vk-encryption-method" {
		return getSettingVkVpnVpncKeyEncryptionMethodJSON(data)
	}
	if section == "alias-vpn-vpnc-advanced" && key == "vk-disable-dpd" {
		return getSettingVkVpnVpncKeyDisableDpdJSON(data)
	}
	if section == "ipv4" && key == "vk-addresses-address" {
		return getSettingVkIp4ConfigAddressesAddressJSON(data)
	}
	if section == "ipv4" && key == "vk-addresses-mask" {
		return getSettingVkIp4ConfigAddressesMaskJSON(data)
	}
	if section == "ipv4" && key == "vk-addresses-gateway" {
		return getSettingVkIp4ConfigAddressesGatewayJSON(data)
	}
	if section == "ipv4" && key == "vk-dns" {
		return getSettingVkIp4ConfigDnsJSON(data)
	}
	if section == "ipv4" && key == "vk-dns2" {
		return getSettingVkIp4ConfigDns2JSON(data)
	}
	if section == "ipv6" && key == "vk-addresses-address" {
		return getSettingVkIp6ConfigAddressesAddressJSON(data)
	}
	if section == "ipv6" && key == "vk-addresses-prefix" {
		return getSettingVkIp6ConfigAddressesPrefixJSON(data)
	}
	if section == "ipv6" && key == "vk-addresses-gateway" {
		return getSettingVkIp6ConfigAddressesGatewayJSON(data)
	}
	if section == "ipv6" && key == "vk-dns" {
		return getSettingVkIp6ConfigDnsJSON(data)
	}
	if section == "ipv6" && key == "vk-dns2" {
		return getSettingVkIp6ConfigDns2JSON(data)
	}
	logger.Error("invalid virtual key:", section, key)
	return
}

// Virtual key general JSON setter
func generalSetVkeyJSON(data connectionData, section, key string, valueJSON string) (err error) {
	if isJSONValueMeansToDeleteKey(valueJSON, getSettingVkeyType(section, key)) && !isChildVkey(section, key) {
		logger.Debugf("json value means to remove key, data[%s][%s]=%#v", section, key, valueJSON)
		removeVirtualKey(data, section, key)
		return
	}
	// each virtual key owns a logic setter
	if section == "connection" && key == "vk-autoconnect" {
		err = logicSetSettingVkConnectionAutoconnectJSON(data, valueJSON)
		return
	}
	if section == "connection" && key == "vk-no-permission" {
		err = logicSetSettingVkConnectionNoPermissionJSON(data, valueJSON)
		return
	}
	if section == "802-3-ethernet" && key == "vk-enable-mtu" {
		err = logicSetSettingVkWiredEnableMtuJSON(data, valueJSON)
		return
	}
	if section == "vs-mobile" && key == "vk-mobile-country" {
		err = logicSetSettingVkMobileCountryJSON(data, valueJSON)
		return
	}
	if section == "vs-mobile" && key == "vk-mobile-provider" {
		err = logicSetSettingVkMobileProviderJSON(data, valueJSON)
		return
	}
	if section == "vs-mobile" && key == "vk-mobile-plan" {
		err = logicSetSettingVkMobilePlanJSON(data, valueJSON)
		return
	}
	if section == "vs-mobile" && key == "vk-mobile-service-type" {
		err = logicSetSettingVkMobileServiceTypeJSON(data, valueJSON)
		return
	}
	if section == "vs-mobile" && key == "vk-gsm-apn-readonly" {
		err = logicSetSettingVkMobileApnReadonlyJSON(data, valueJSON)
		return
	}
	if section == "vs-security" && key == "vk-enable-8021x" {
		err = logicSetSettingVk8021xEnableJSON(data, valueJSON)
		return
	}
	if section == "802-11-wireless-security" && key == "vk-key-mgmt" {
		err = logicSetSettingVkWirelessSecurityKeyMgmtJSON(data, valueJSON)
		return
	}
	if section == "802-1x" && key == "vk-eap" {
		err = logicSetSettingVk8021xEapJSON(data, valueJSON)
		return
	}
	if section == "802-1x" && key == "vk-ca-cert" {
		err = logicSetSettingVk8021xCaCertJSON(data, valueJSON)
		return
	}
	if section == "802-1x" && key == "vk-client-cert" {
		err = logicSetSettingVk8021xClientCertJSON(data, valueJSON)
		return
	}
	if section == "802-1x" && key == "vk-pac-file" {
		err = logicSetSettingVk8021xPacFileJSON(data, valueJSON)
		return
	}
	if section == "802-1x" && key == "vk-private-key" {
		err = logicSetSettingVk8021xPrivateKeyJSON(data, valueJSON)
		return
	}
	if section == "802-11-wireless" && key == "vk-enable-mtu" {
		err = logicSetSettingVkWirelessEnableMtuJSON(data, valueJSON)
		return
	}
	if section == "ppp" && key == "vk-enable-lcp-echo" {
		err = logicSetSettingVkPppEnableLcpEchoJSON(data, valueJSON)
		return
	}
	if section == "vs-vpn" && key == "vk-vpn-type" {
		err = logicSetSettingVkVpnTypeJSON(data, valueJSON)
		return
	}
	if section == "vs-vpn" && key == "vk-vpn-missing-plugin" {
		err = logicSetSettingVkVpnMissingPluginJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-openvpn" && key == "vk-static-key-direction" {
		err = logicSetSettingVkVpnOpenvpnKeyEnableStaticKeyDirectionJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-vpnc" && key == "vk-hybrid-authmode" {
		err = logicSetSettingVkVpnVpncKeyHybridAuthmodeJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-l2tp-ppp" && key == "vk-require-mppe" {
		err = logicSetSettingVkVpnL2tpRequireMppeJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-l2tp-ppp" && key == "vk-mppe-security" {
		err = logicSetSettingVkVpnL2tpMppeSecurityJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-l2tp-ppp" && key == "vk-enable-lcp-echo" {
		err = logicSetSettingVkVpnL2tpEnableLcpEchoJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-openvpn-tlsauth" && key == "vk-ta-dir" {
		err = logicSetSettingVkVpnOpenvpnKeyEnableTaDirJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-openvpn-advanced" && key == "vk-enable-port" {
		err = logicSetSettingVkVpnOpenvpnKeyEnablePortJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-openvpn-advanced" && key == "vk-enable-reneg-seconds" {
		err = logicSetSettingVkVpnOpenvpnKeyEnableRenegSecondsJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-openvpn-advanced" && key == "vk-enable-tunnel-mtu" {
		err = logicSetSettingVkVpnOpenvpnKeyEnableTunnelMtuJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-openvpn-advanced" && key == "vk-enable-fragment-size" {
		err = logicSetSettingVkVpnOpenvpnKeyEnableFragmentSizeJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-pptp-ppp" && key == "vk-require-mppe" {
		err = logicSetSettingVkVpnPptpRequireMppeJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-pptp-ppp" && key == "vk-mppe-security" {
		err = logicSetSettingVkVpnPptpMppeSecurityJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-pptp-ppp" && key == "vk-enable-lcp-echo" {
		err = logicSetSettingVkVpnPptpEnableLcpEchoJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-vpnc-advanced" && key == "vk-encryption-method" {
		err = logicSetSettingVkVpnVpncKeyEncryptionMethodJSON(data, valueJSON)
		return
	}
	if section == "alias-vpn-vpnc-advanced" && key == "vk-disable-dpd" {
		err = logicSetSettingVkVpnVpncKeyDisableDpdJSON(data, valueJSON)
		return
	}
	if section == "ipv4" && key == "vk-addresses-address" {
		err = logicSetSettingVkIp4ConfigAddressesAddressJSON(data, valueJSON)
		return
	}
	if section == "ipv4" && key == "vk-addresses-mask" {
		err = logicSetSettingVkIp4ConfigAddressesMaskJSON(data, valueJSON)
		return
	}
	if section == "ipv4" && key == "vk-addresses-gateway" {
		err = logicSetSettingVkIp4ConfigAddressesGatewayJSON(data, valueJSON)
		return
	}
	if section == "ipv4" && key == "vk-dns" {
		err = logicSetSettingVkIp4ConfigDnsJSON(data, valueJSON)
		return
	}
	if section == "ipv4" && key == "vk-dns2" {
		err = logicSetSettingVkIp4ConfigDns2JSON(data, valueJSON)
		return
	}
	if section == "ipv6" && key == "vk-addresses-address" {
		err = logicSetSettingVkIp6ConfigAddressesAddressJSON(data, valueJSON)
		return
	}
	if section == "ipv6" && key == "vk-addresses-prefix" {
		err = logicSetSettingVkIp6ConfigAddressesPrefixJSON(data, valueJSON)
		return
	}
	if section == "ipv6" && key == "vk-addresses-gateway" {
		err = logicSetSettingVkIp6ConfigAddressesGatewayJSON(data, valueJSON)
		return
	}
	if section == "ipv6" && key == "vk-dns" {
		err = logicSetSettingVkIp6ConfigDnsJSON(data, valueJSON)
		return
	}
	if section == "ipv6" && key == "vk-dns2" {
		err = logicSetSettingVkIp6ConfigDns2JSON(data, valueJSON)
		return
	}
	logger.Error("invalid virtual key:", section, key)
	return
}

// Virtual key JSON getter
func getSettingVkConnectionAutoconnectJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkConnectionAutoconnect(data))
	return
}
func getSettingVkConnectionNoPermissionJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkConnectionNoPermission(data))
	return
}
func getSettingVkWiredEnableMtuJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkWiredEnableMtu(data))
	return
}
func getSettingVkMobileCountryJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobileCountry(data))
	return
}
func getSettingVkMobileProviderJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobileProvider(data))
	return
}
func getSettingVkMobilePlanJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobilePlan(data))
	return
}
func getSettingVkMobileServiceTypeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobileServiceType(data))
	return
}
func getSettingVkMobileApnReadonlyJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkMobileApnReadonly(data))
	return
}
func getSettingVk8021xEnableJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xEnable(data))
	return
}
func getSettingVkWirelessSecurityKeyMgmtJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkWirelessSecurityKeyMgmt(data))
	return
}
func getSettingVk8021xEapJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xEap(data))
	return
}
func getSettingVk8021xCaCertJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xCaCert(data))
	return
}
func getSettingVk8021xClientCertJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xClientCert(data))
	return
}
func getSettingVk8021xPacFileJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xPacFile(data))
	return
}
func getSettingVk8021xPrivateKeyJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVk8021xPrivateKey(data))
	return
}
func getSettingVkWirelessEnableMtuJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkWirelessEnableMtu(data))
	return
}
func getSettingVkPppEnableLcpEchoJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkPppEnableLcpEcho(data))
	return
}
func getSettingVkVpnTypeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnType(data))
	return
}
func getSettingVkVpnMissingPluginJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnMissingPlugin(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableStaticKeyDirectionJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableStaticKeyDirection(data))
	return
}
func getSettingVkVpnVpncKeyHybridAuthmodeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnVpncKeyHybridAuthmode(data))
	return
}
func getSettingVkVpnL2tpRequireMppeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnL2tpRequireMppe(data))
	return
}
func getSettingVkVpnL2tpMppeSecurityJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnL2tpMppeSecurity(data))
	return
}
func getSettingVkVpnL2tpEnableLcpEchoJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnL2tpEnableLcpEcho(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableTaDirJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableTaDir(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnablePortJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnablePort(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableRenegSecondsJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableRenegSeconds(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableTunnelMtuJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableTunnelMtu(data))
	return
}
func getSettingVkVpnOpenvpnKeyEnableFragmentSizeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnOpenvpnKeyEnableFragmentSize(data))
	return
}
func getSettingVkVpnPptpRequireMppeJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnPptpRequireMppe(data))
	return
}
func getSettingVkVpnPptpMppeSecurityJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnPptpMppeSecurity(data))
	return
}
func getSettingVkVpnPptpEnableLcpEchoJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnPptpEnableLcpEcho(data))
	return
}
func getSettingVkVpnVpncKeyEncryptionMethodJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnVpncKeyEncryptionMethod(data))
	return
}
func getSettingVkVpnVpncKeyDisableDpdJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkVpnVpncKeyDisableDpd(data))
	return
}
func getSettingVkIp4ConfigAddressesAddressJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigAddressesAddress(data))
	return
}
func getSettingVkIp4ConfigAddressesMaskJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigAddressesMask(data))
	return
}
func getSettingVkIp4ConfigAddressesGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigAddressesGateway(data))
	return
}
func getSettingVkIp4ConfigDnsJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigDns(data))
	return
}
func getSettingVkIp4ConfigDns2JSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp4ConfigDns2(data))
	return
}
func getSettingVkIp6ConfigAddressesAddressJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigAddressesAddress(data))
	return
}
func getSettingVkIp6ConfigAddressesPrefixJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigAddressesPrefix(data))
	return
}
func getSettingVkIp6ConfigAddressesGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigAddressesGateway(data))
	return
}
func getSettingVkIp6ConfigDnsJSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigDns(data))
	return
}
func getSettingVkIp6ConfigDns2JSON(data connectionData) (valueJSON string) {
	valueJSON, _ = marshalJSON(getSettingVkIp6ConfigDns2(data))
	return
}

// Virtual key JSON logic setter
func logicSetSettingVkConnectionAutoconnectJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkConnectionAutoconnect(data, value)
}
func logicSetSettingVkConnectionNoPermissionJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkConnectionNoPermission(data, value)
}
func logicSetSettingVkWiredEnableMtuJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkWiredEnableMtu(data, value)
}
func logicSetSettingVkMobileCountryJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobileCountry(data, value)
}
func logicSetSettingVkMobileProviderJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobileProvider(data, value)
}
func logicSetSettingVkMobilePlanJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobilePlan(data, value)
}
func logicSetSettingVkMobileServiceTypeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobileServiceType(data, value)
}
func logicSetSettingVkMobileApnReadonlyJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkMobileApnReadonly(data, value)
}
func logicSetSettingVk8021xEnableJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVk8021xEnable(data, value)
}
func logicSetSettingVkWirelessSecurityKeyMgmtJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkWirelessSecurityKeyMgmt(data, value)
}
func logicSetSettingVk8021xEapJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xEap(data, value)
}
func logicSetSettingVk8021xCaCertJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xCaCert(data, value)
}
func logicSetSettingVk8021xClientCertJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xClientCert(data, value)
}
func logicSetSettingVk8021xPacFileJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xPacFile(data, value)
}
func logicSetSettingVk8021xPrivateKeyJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVk8021xPrivateKey(data, value)
}
func logicSetSettingVkWirelessEnableMtuJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkWirelessEnableMtu(data, value)
}
func logicSetSettingVkPppEnableLcpEchoJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkPppEnableLcpEcho(data, value)
}
func logicSetSettingVkVpnTypeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnType(data, value)
}
func logicSetSettingVkVpnMissingPluginJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnMissingPlugin(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableStaticKeyDirectionJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableStaticKeyDirection(data, value)
}
func logicSetSettingVkVpnVpncKeyHybridAuthmodeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnVpncKeyHybridAuthmode(data, value)
}
func logicSetSettingVkVpnL2tpRequireMppeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnL2tpRequireMppe(data, value)
}
func logicSetSettingVkVpnL2tpMppeSecurityJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnL2tpMppeSecurity(data, value)
}
func logicSetSettingVkVpnL2tpEnableLcpEchoJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnL2tpEnableLcpEcho(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableTaDirJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableTaDir(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnablePortJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnablePort(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableRenegSecondsJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableRenegSeconds(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableTunnelMtuJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableTunnelMtu(data, value)
}
func logicSetSettingVkVpnOpenvpnKeyEnableFragmentSizeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnOpenvpnKeyEnableFragmentSize(data, value)
}
func logicSetSettingVkVpnPptpRequireMppeJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnPptpRequireMppe(data, value)
}
func logicSetSettingVkVpnPptpMppeSecurityJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnPptpMppeSecurity(data, value)
}
func logicSetSettingVkVpnPptpEnableLcpEchoJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnPptpEnableLcpEcho(data, value)
}
func logicSetSettingVkVpnVpncKeyEncryptionMethodJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkVpnVpncKeyEncryptionMethod(data, value)
}
func logicSetSettingVkVpnVpncKeyDisableDpdJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueBoolean(valueJSON)
	return logicSetSettingVkVpnVpncKeyDisableDpd(data, value)
}
func logicSetSettingVkIp4ConfigAddressesAddressJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigAddressesAddress(data, value)
}
func logicSetSettingVkIp4ConfigAddressesMaskJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigAddressesMask(data, value)
}
func logicSetSettingVkIp4ConfigAddressesGatewayJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigAddressesGateway(data, value)
}
func logicSetSettingVkIp4ConfigDnsJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigDns(data, value)
}
func logicSetSettingVkIp4ConfigDns2JSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp4ConfigDns2(data, value)
}
func logicSetSettingVkIp6ConfigAddressesAddressJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigAddressesAddress(data, value)
}
func logicSetSettingVkIp6ConfigAddressesPrefixJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueUint32(valueJSON)
	return logicSetSettingVkIp6ConfigAddressesPrefix(data, value)
}
func logicSetSettingVkIp6ConfigAddressesGatewayJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigAddressesGateway(data, value)
}
func logicSetSettingVkIp6ConfigDnsJSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigDns(data, value)
}
func logicSetSettingVkIp6ConfigDns2JSON(data connectionData, valueJSON string) (err error) {
	value, _ := jsonToKeyValueString(valueJSON)
	return logicSetSettingVkIp6ConfigDns2(data, value)
}

// Getter for enable wrapper virtual key
func getSettingVkWiredEnableMtu(data connectionData) (value bool) {
	if !isSettingWiredMtuExists(data) {
		return false
	}
	return true
}
func getSettingVkWirelessEnableMtu(data connectionData) (value bool) {
	if !isSettingWirelessMtuExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableStaticKeyDirection(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyStaticKeyDirectionExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableTaDir(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyTaDirExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnablePort(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyPortExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableRenegSeconds(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyRenegSecondsExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableTunnelMtu(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyTunnelMtuExists(data) {
		return false
	}
	return true
}
func getSettingVkVpnOpenvpnKeyEnableFragmentSize(data connectionData) (value bool) {
	if !isSettingVpnOpenvpnKeyFragmentSizeExists(data) {
		return false
	}
	return true
}

// Setter for key's enable wrapper
func logicSetSettingVkWiredEnableMtu(data connectionData, value bool) (err error) {
	if value {
		setSettingWiredMtu(data, uint32(0x0))
	} else {
		removeSettingWiredMtu(data)
	}
	return
}
func logicSetSettingVkWirelessEnableMtu(data connectionData, value bool) (err error) {
	if value {
		setSettingWirelessMtu(data, uint32(0x0))
	} else {
		removeSettingWirelessMtu(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableStaticKeyDirection(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyStaticKeyDirection(data, uint32(0x0))
	} else {
		removeSettingVpnOpenvpnKeyStaticKeyDirection(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableTaDir(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyTaDir(data, uint32(0x0))
	} else {
		removeSettingVpnOpenvpnKeyTaDir(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnablePort(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyPort(data, uint32(0x4aa))
	} else {
		removeSettingVpnOpenvpnKeyPort(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableRenegSeconds(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyRenegSeconds(data, uint32(0x0))
	} else {
		removeSettingVpnOpenvpnKeyRenegSeconds(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableTunnelMtu(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyTunnelMtu(data, uint32(0x5dc))
	} else {
		removeSettingVpnOpenvpnKeyTunnelMtu(data)
	}
	return
}
func logicSetSettingVkVpnOpenvpnKeyEnableFragmentSize(data connectionData, value bool) (err error) {
	if value {
		setSettingVpnOpenvpnKeyFragmentSize(data, uint32(0x514))
	} else {
		removeSettingVpnOpenvpnKeyFragmentSize(data)
	}
	return
}

func getAliasSettingRealName(aliasSetting string) (realSetting string) {
	realSetting = aliasSetting
	switch aliasSetting {
	case nm.NM_SETTING_ALIAS_VPN_L2TP_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_L2TP_PPP_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_L2TP_IPSEC_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_OPENCONNECT_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_OPENVPN_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_OPENVPN_ADVANCED_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_OPENVPN_SECURITY_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_OPENVPN_TLSAUTH_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_OPENVPN_PROXIES_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_PPTP_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_PPTP_PPP_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_STRONGSWAN_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_VPNC_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	case nm.NM_SETTING_ALIAS_VPN_VPNC_ADVANCED_SETTING_NAME:
		realSetting = nm.NM_SETTING_VPN_SETTING_NAME
	}
	return
}

// General check is key should be available for target setting
func generalIsKeyShouldInSettingSection(section, key string) bool {
	if isVirtualKey(section, key) {
		return true
	}
	switch section {
	case "802-1x":
		switch key {
		case "altsubject-matches":
			return true
		case "anonymous-identity":
			return true
		case "ca-cert":
			return true
		case "ca-path":
			return true
		case "client-cert":
			return true
		case "domain-suffix-match":
			return true
		case "eap":
			return true
		case "identity":
			return true
		case "pac-file":
			return true
		case "password":
			return true
		case "password-flags":
			return true
		case "password-raw":
			return true
		case "password-raw-flags":
			return true
		case "phase1-fast-provisioning":
			return true
		case "phase1-peaplabel":
			return true
		case "phase1-peapver":
			return true
		case "phase2-altsubject-matches":
			return true
		case "phase2-auth":
			return true
		case "phase2-autheap":
			return true
		case "phase2-ca-cert":
			return true
		case "phase2-ca-path":
			return true
		case "phase2-client-cert":
			return true
		case "phase2-domain-suffix-match":
			return true
		case "phase2-private-key":
			return true
		case "phase2-private-key-password":
			return true
		case "phase2-private-key-password-flags":
			return true
		case "phase2-subject-match":
			return true
		case "pin":
			return true
		case "pin-flags":
			return true
		case "private-key":
			return true
		case "private-key-password":
			return true
		case "private-key-password-flags":
			return true
		case "subject-match":
			return true
		case "system-ca-certs":
			return true
		}
	case "adsl":
		switch key {
		case "encapsulation":
			return true
		case "password":
			return true
		case "password-flags":
			return true
		case "protocol":
			return true
		case "username":
			return true
		case "vci":
			return true
		case "vpi":
			return true
		}
	case "bluetooth":
		switch key {
		case "bdaddr":
			return true
		case "type":
			return true
		}
	case "bond":
		switch key {
		case "options":
			return true
		}
	case "bridge":
		switch key {
		case "ageing-time":
			return true
		case "forward-delay":
			return true
		case "hello-time":
			return true
		case "mac-address":
			return true
		case "max-age":
			return true
		case "multicast-snooping":
			return true
		case "priority":
			return true
		case "stp":
			return true
		}
	case "bridge-port":
		switch key {
		case "hairpin-mode":
			return true
		case "path-cost":
			return true
		case "priority":
			return true
		}
	case "cdma":
		switch key {
		case "number":
			return true
		case "password":
			return true
		case "password-flags":
			return true
		case "username":
			return true
		}
	case "connection":
		switch key {
		case "autoconnect":
			return true
		case "autoconnect-priority":
			return true
		case "autoconnect-slaves":
			return true
		case "gateway-ping-timeout":
			return true
		case "id":
			return true
		case "interface-name":
			return true
		case "lldp":
			return true
		case "master":
			return true
		case "metered":
			return true
		case "permissions":
			return true
		case "read-only":
			return true
		case "secondaries":
			return true
		case "slave-type":
			return true
		case "stable-id":
			return true
		case "timestamp":
			return true
		case "type":
			return true
		case "uuid":
			return true
		case "zone":
			return true
		}
	case "dcb":
		switch key {
		case "app-fcoe-flags":
			return true
		case "app-fcoe-mode":
			return true
		case "app-fcoe-priority":
			return true
		case "app-fip-flags":
			return true
		case "app-fip-priority":
			return true
		case "app-iscsi-flags":
			return true
		case "app-iscsi-priority":
			return true
		case "priority-bandwidth":
			return true
		case "priority-flow-control":
			return true
		case "priority-flow-control-flags":
			return true
		case "priority-group-bandwidth":
			return true
		case "priority-group-flags":
			return true
		case "priority-group-id":
			return true
		case "priority-strict-bandwidth":
			return true
		case "priority-traffic-class":
			return true
		}
	case "generic":
		switch key {
		}
	case "gsm":
		switch key {
		case "apn":
			return true
		case "device-id":
			return true
		case "home-only":
			return true
		case "network-id":
			return true
		case "number":
			return true
		case "password":
			return true
		case "password-flags":
			return true
		case "pin":
			return true
		case "pin-flags":
			return true
		case "sim-id":
			return true
		case "sim-operator-id":
			return true
		case "username":
			return true
		}
	case "infiniband":
		switch key {
		case "mac-address":
			return true
		case "mtu":
			return true
		case "p-key":
			return true
		case "parent":
			return true
		case "transport-mode":
			return true
		}
	case "ipv4":
		switch key {
		case "addresses":
			return true
		case "dad-timeout":
			return true
		case "dhcp-client-id":
			return true
		case "dhcp-fqdn":
			return true
		case "dhcp-hostname":
			return true
		case "dhcp-send-hostname":
			return true
		case "dhcp-timeout":
			return true
		case "dns":
			return true
		case "dns-options":
			return true
		case "dns-priority":
			return true
		case "dns-search":
			return true
		case "gateway":
			return true
		case "ignore-auto-dns":
			return true
		case "ignore-auto-routes":
			return true
		case "may-fail":
			return true
		case "method":
			return true
		case "never-default":
			return true
		case "route-metric":
			return true
		case "routes":
			return true
		}
	case "ipv6":
		switch key {
		case "addr-gen-mode":
			return true
		case "addresses":
			return true
		case "dad-timeout":
			return true
		case "dhcp-hostname":
			return true
		case "dhcp-send-hostname":
			return true
		case "dhcp-timeout":
			return true
		case "dns":
			return true
		case "dns-options":
			return true
		case "dns-priority":
			return true
		case "dns-search":
			return true
		case "gateway":
			return true
		case "ignore-auto-dns":
			return true
		case "ignore-auto-routes":
			return true
		case "ip6-privacy":
			return true
		case "may-fail":
			return true
		case "method":
			return true
		case "never-default":
			return true
		case "route-metric":
			return true
		case "routes":
			return true
		case "token":
			return true
		}
	case "ip-tunnel":
		switch key {
		case "encapsulation-limit":
			return true
		case "flow-label":
			return true
		case "input-key":
			return true
		case "local":
			return true
		case "mode":
			return true
		case "mtu":
			return true
		case "output-key":
			return true
		case "parent":
			return true
		case "path-mtu-discovery":
			return true
		case "remote":
			return true
		case "tos":
			return true
		case "ttl":
			return true
		}
	case "macvlan":
		switch key {
		case "mode":
			return true
		case "parent":
			return true
		case "promiscuous":
			return true
		case "tap":
			return true
		}
	case "802-11-olpc-mesh":
		switch key {
		case "channel":
			return true
		case "dhcp-anycast-address":
			return true
		case "ssid":
			return true
		}
	case "ppp":
		switch key {
		case "baud":
			return true
		case "crtscts":
			return true
		case "lcp-echo-failure":
			return true
		case "lcp-echo-interval":
			return true
		case "mppe-stateful":
			return true
		case "mru":
			return true
		case "mtu":
			return true
		case "no-vj-comp":
			return true
		case "noauth":
			return true
		case "nobsdcomp":
			return true
		case "nodeflate":
			return true
		case "refuse-chap":
			return true
		case "refuse-eap":
			return true
		case "refuse-mschap":
			return true
		case "refuse-mschapv2":
			return true
		case "refuse-pap":
			return true
		case "require-mppe":
			return true
		case "require-mppe-128":
			return true
		}
	case "pppoe":
		switch key {
		case "password":
			return true
		case "password-flags":
			return true
		case "service":
			return true
		case "username":
			return true
		}
	case "serial":
		switch key {
		case "baud":
			return true
		case "bits":
			return true
		case "parity":
			return true
		case "send-delay":
			return true
		case "stopbits":
			return true
		}
	case "team":
		switch key {
		case "config":
			return true
		}
	case "team-port":
		switch key {
		case "config":
			return true
		}
	case "tun":
		switch key {
		case "group":
			return true
		case "mode":
			return true
		case "multi-queue":
			return true
		case "owner":
			return true
		case "pi":
			return true
		case "vnet-hdr":
			return true
		}
	case "vlan":
		switch key {
		case "egress-priority-map":
			return true
		case "flags":
			return true
		case "id":
			return true
		case "ingress-priority-map":
			return true
		case "parent":
			return true
		}
	case "vpn":
		switch key {
		case "data":
			return true
		case "persistent":
			return true
		case "secrets":
			return true
		case "service-type":
			return true
		case "timeout":
			return true
		case "user-name":
			return true
		}
	case "vxlan":
		switch key {
		case "ageing":
			return true
		case "destination-port":
			return true
		case "id":
			return true
		case "l2-miss":
			return true
		case "l3-miss":
			return true
		case "learning":
			return true
		case "limit":
			return true
		case "local":
			return true
		case "parent":
			return true
		case "proxy":
			return true
		case "remote":
			return true
		case "rsc":
			return true
		case "source-port-max":
			return true
		case "source-port-min":
			return true
		case "tos":
			return true
		case "ttl":
			return true
		}
	case "wimax":
		switch key {
		case "mac-address":
			return true
		case "network-name":
			return true
		}
	case "802-3-ethernet":
		switch key {
		case "auto-negotiate":
			return true
		case "cloned-mac-address":
			return true
		case "duplex":
			return true
		case "generate-mac-address-mask":
			return true
		case "mac-address":
			return true
		case "mac-address-blacklist":
			return true
		case "mtu":
			return true
		case "port":
			return true
		case "s390-nettype":
			return true
		case "s390-options":
			return true
		case "s390-subchannels":
			return true
		case "speed":
			return true
		case "wake-on-lan":
			return true
		case "wake-on-lan-password":
			return true
		}
	case "802-11-wireless":
		switch key {
		case "band":
			return true
		case "bssid":
			return true
		case "channel":
			return true
		case "cloned-mac-address":
			return true
		case "generate-mac-address-mask":
			return true
		case "hidden":
			return true
		case "mac-address":
			return true
		case "mac-address-blacklist":
			return true
		case "mac-address-randomization":
			return true
		case "mode":
			return true
		case "mtu":
			return true
		case "powersave":
			return true
		case "rate":
			return true
		case "seen-bssids":
			return true
		case "ssid":
			return true
		case "tx-power":
			return true
		}
	case "802-11-wireless-security":
		switch key {
		case "auth-alg":
			return true
		case "group":
			return true
		case "key-mgmt":
			return true
		case "leap-password":
			return true
		case "leap-password-flags":
			return true
		case "leap-username":
			return true
		case "pairwise":
			return true
		case "proto":
			return true
		case "psk":
			return true
		case "psk-flags":
			return true
		case "wep-key-flags":
			return true
		case "wep-key-type":
			return true
		case "wep-key0":
			return true
		case "wep-key1":
			return true
		case "wep-key2":
			return true
		case "wep-key3":
			return true
		case "wep-tx-keyidx":
			return true
		}
	case "alias-vpn-l2tp":
		switch key {
		case "gateway":
			return true
		case "user":
			return true
		case "password-flags":
			return true
		case "password":
			return true
		case "domain":
			return true
		}
	case "alias-vpn-l2tp-ppp":
		switch key {
		case "require-mppe":
			return true
		case "require-mppe-40":
			return true
		case "require-mppe-128":
			return true
		case "mppe-stateful":
			return true
		case "refuse-eap":
			return true
		case "refuse-pap":
			return true
		case "refuse-chap":
			return true
		case "refuse-mschap":
			return true
		case "refuse-mschapv2":
			return true
		case "nobsdcomp":
			return true
		case "nodeflate":
			return true
		case "no-vj-comp":
			return true
		case "nopcomp":
			return true
		case "noaccomp":
			return true
		case "lcp-echo-failure":
			return true
		case "lcp-echo-interval":
			return true
		}
	case "alias-vpn-l2tp-ipsec":
		switch key {
		case "ipsec-enabled":
			return true
		case "ipsec-group-name":
			return true
		case "ipsec-gateway-id":
			return true
		case "ipsec-psk":
			return true
		}
	case "alias-vpn-openconnect":
		switch key {
		case "gateway":
			return true
		case "cacert":
			return true
		case "proxy":
			return true
		case "enable_csd_trojan":
			return true
		case "csd_wrapper":
			return true
		case "usercert":
			return true
		case "userkey":
			return true
		case "pem_passphrase_fsid":
			return true
		case "cookie":
			return true
		case "gwcert":
			return true
		case "authtype":
			return true
		case "mtu":
			return true
		case "stoken_source":
			return true
		case "stoken_string":
			return true
		}
	case "alias-vpn-openvpn":
		switch key {
		case "remote":
			return true
		case "connection-type":
			return true
		case "username":
			return true
		case "password-flags":
			return true
		case "password":
			return true
		case "ca":
			return true
		case "cert":
			return true
		case "key":
			return true
		case "cert-pass-flags":
			return true
		case "cert-pass":
			return true
		case "static-key":
			return true
		case "static-key-direction":
			return true
		case "remote-ip":
			return true
		case "local-ip":
			return true
		}
	case "alias-vpn-openvpn-advanced":
		switch key {
		case "port":
			return true
		case "reneg-seconds":
			return true
		case "comp-lzo":
			return true
		case "proto-tcp":
			return true
		case "tap-dev":
			return true
		case "tunnel-mtu":
			return true
		case "fragment-size":
			return true
		case "mssfix":
			return true
		case "remote-random":
			return true
		}
	case "alias-vpn-openvpn-security":
		switch key {
		case "cipher":
			return true
		case "auth":
			return true
		}
	case "alias-vpn-openvpn-tlsauth":
		switch key {
		case "tls-remote":
			return true
		case "remote-cert-tls":
			return true
		case "ta":
			return true
		case "ta-dir":
			return true
		}
	case "alias-vpn-openvpn-proxies":
		switch key {
		case "proxy-type":
			return true
		case "proxy-server":
			return true
		case "proxy-port":
			return true
		case "proxy-retry":
			return true
		case "http-proxy-username":
			return true
		case "http-proxy-password":
			return true
		case "http-proxy-password-flags":
			return true
		}
	case "alias-vpn-pptp":
		switch key {
		case "gateway":
			return true
		case "user":
			return true
		case "password-flags":
			return true
		case "password":
			return true
		case "domain":
			return true
		}
	case "alias-vpn-pptp-ppp":
		switch key {
		case "require-mppe":
			return true
		case "require-mppe-40":
			return true
		case "require-mppe-128":
			return true
		case "mppe-stateful":
			return true
		case "refuse-eap":
			return true
		case "refuse-pap":
			return true
		case "refuse-chap":
			return true
		case "refuse-mschap":
			return true
		case "refuse-mschapv2":
			return true
		case "nobsdcomp":
			return true
		case "nodeflate":
			return true
		case "no-vj-comp":
			return true
		case "lcp-echo-failure":
			return true
		case "lcp-echo-interval":
			return true
		}
	case "alias-vpn-strongswan":
		switch key {
		case "address":
			return true
		case "certificate":
			return true
		case "method":
			return true
		case "user":
			return true
		case "usercert":
			return true
		case "userkey":
			return true
		case "password":
			return true
		case "password-flags":
			return true
		case "virtual":
			return true
		case "encap":
			return true
		case "ipcomp":
			return true
		}
	case "alias-vpn-vpnc":
		switch key {
		case "IPSec gateway":
			return true
		case "Xauth username":
			return true
		case "xauth-password-type":
			return true
		case "Xauth password-flags":
			return true
		case "Xauth password":
			return true
		case "IPSec ID":
			return true
		case "ipsec-secret-type":
			return true
		case "IPSec secret-flags":
			return true
		case "IPSec secret":
			return true
		case "IKE Authmode":
			return true
		case "CA-File":
			return true
		}
	case "alias-vpn-vpnc-advanced":
		switch key {
		case "Domain":
			return true
		case "Vendor":
			return true
		case "Application Version":
			return true
		case "Enable Single DES":
			return true
		case "Enable no encryption":
			return true
		case "NAT Traversal Mode":
			return true
		case "IKE DH Group":
			return true
		case "Perfect Forward Secrecy":
			return true
		case "Local Port":
			return true
		case "DPD idle timeout (our side)":
			return true
		case "Cisco UDP Encapsulation Port":
			return true
		}
	}
	return false
}

// General get virtual section setting key type
func generalGetSettingKeyType(section, key string) (t ktype) {
	if isVirtualKey(section, key) {
		t = getSettingVkeyType(section, key)
		return
	}
	switch section {
	default:
		t = ktypeUnknown
	case "802-1x":
		switch key {
		default:
			t = ktypeUnknown
		case "altsubject-matches":
			t = ktypeArrayString
		case "anonymous-identity":
			t = ktypeString
		case "ca-cert":
			t = ktypeWrapperString
		case "ca-path":
			t = ktypeString
		case "client-cert":
			t = ktypeWrapperString
		case "domain-suffix-match":
			t = ktypeString
		case "eap":
			t = ktypeArrayString
		case "identity":
			t = ktypeString
		case "pac-file":
			t = ktypeString
		case "password":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "password-raw":
			t = ktypeArrayByte
		case "password-raw-flags":
			t = ktypeUint32
		case "phase1-fast-provisioning":
			t = ktypeString
		case "phase1-peaplabel":
			t = ktypeString
		case "phase1-peapver":
			t = ktypeString
		case "phase2-altsubject-matches":
			t = ktypeArrayString
		case "phase2-auth":
			t = ktypeString
		case "phase2-autheap":
			t = ktypeString
		case "phase2-ca-cert":
			t = ktypeWrapperString
		case "phase2-ca-path":
			t = ktypeString
		case "phase2-client-cert":
			t = ktypeWrapperString
		case "phase2-domain-suffix-match":
			t = ktypeString
		case "phase2-private-key":
			t = ktypeWrapperString
		case "phase2-private-key-password":
			t = ktypeString
		case "phase2-private-key-password-flags":
			t = ktypeUint32
		case "phase2-subject-match":
			t = ktypeString
		case "pin":
			t = ktypeString
		case "pin-flags":
			t = ktypeUint32
		case "private-key":
			t = ktypeWrapperString
		case "private-key-password":
			t = ktypeString
		case "private-key-password-flags":
			t = ktypeUint32
		case "subject-match":
			t = ktypeString
		case "system-ca-certs":
			t = ktypeBoolean
		}
	case "adsl":
		switch key {
		default:
			t = ktypeUnknown
		case "encapsulation":
			t = ktypeString
		case "password":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "protocol":
			t = ktypeString
		case "username":
			t = ktypeString
		case "vci":
			t = ktypeUint32
		case "vpi":
			t = ktypeUint32
		}
	case "bluetooth":
		switch key {
		default:
			t = ktypeUnknown
		case "bdaddr":
			t = ktypeArrayByte
		case "type":
			t = ktypeString
		}
	case "bond":
		switch key {
		default:
			t = ktypeUnknown
		case "options":
			t = ktypeDictStringString
		}
	case "bridge":
		switch key {
		default:
			t = ktypeUnknown
		case "ageing-time":
			t = ktypeUint32
		case "forward-delay":
			t = ktypeUint32
		case "hello-time":
			t = ktypeUint32
		case "mac-address":
			t = ktypeArrayByte
		case "max-age":
			t = ktypeUint32
		case "multicast-snooping":
			t = ktypeBoolean
		case "priority":
			t = ktypeUint32
		case "stp":
			t = ktypeBoolean
		}
	case "bridge-port":
		switch key {
		default:
			t = ktypeUnknown
		case "hairpin-mode":
			t = ktypeBoolean
		case "path-cost":
			t = ktypeUint32
		case "priority":
			t = ktypeUint32
		}
	case "cdma":
		switch key {
		default:
			t = ktypeUnknown
		case "number":
			t = ktypeString
		case "password":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "username":
			t = ktypeString
		}
	case "connection":
		switch key {
		default:
			t = ktypeUnknown
		case "autoconnect":
			t = ktypeBoolean
		case "autoconnect-priority":
			t = ktypeInt32
		case "autoconnect-slaves":
			t = ktypeInt32
		case "gateway-ping-timeout":
			t = ktypeUint32
		case "id":
			t = ktypeString
		case "interface-name":
			t = ktypeString
		case "lldp":
			t = ktypeInt32
		case "master":
			t = ktypeString
		case "metered":
			t = ktypeInt32
		case "permissions":
			t = ktypeArrayString
		case "read-only":
			t = ktypeBoolean
		case "secondaries":
			t = ktypeArrayString
		case "slave-type":
			t = ktypeString
		case "stable-id":
			t = ktypeString
		case "timestamp":
			t = ktypeUint64
		case "type":
			t = ktypeString
		case "uuid":
			t = ktypeString
		case "zone":
			t = ktypeString
		}
	case "dcb":
		switch key {
		default:
			t = ktypeUnknown
		case "app-fcoe-flags":
			t = ktypeUint32
		case "app-fcoe-mode":
			t = ktypeString
		case "app-fcoe-priority":
			t = ktypeInt32
		case "app-fip-flags":
			t = ktypeUint32
		case "app-fip-priority":
			t = ktypeInt32
		case "app-iscsi-flags":
			t = ktypeUint32
		case "app-iscsi-priority":
			t = ktypeInt32
		case "priority-bandwidth":
			t = ktypeArrayUint32
		case "priority-flow-control":
			t = ktypeArrayUint32
		case "priority-flow-control-flags":
			t = ktypeUint32
		case "priority-group-bandwidth":
			t = ktypeArrayUint32
		case "priority-group-flags":
			t = ktypeUint32
		case "priority-group-id":
			t = ktypeArrayUint32
		case "priority-strict-bandwidth":
			t = ktypeArrayUint32
		case "priority-traffic-class":
			t = ktypeArrayUint32
		}
	case "generic":
		switch key {
		default:
			t = ktypeUnknown
		}
	case "gsm":
		switch key {
		default:
			t = ktypeUnknown
		case "apn":
			t = ktypeString
		case "device-id":
			t = ktypeString
		case "home-only":
			t = ktypeBoolean
		case "network-id":
			t = ktypeString
		case "number":
			t = ktypeString
		case "password":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "pin":
			t = ktypeString
		case "pin-flags":
			t = ktypeUint32
		case "sim-id":
			t = ktypeString
		case "sim-operator-id":
			t = ktypeString
		case "username":
			t = ktypeString
		}
	case "infiniband":
		switch key {
		default:
			t = ktypeUnknown
		case "mac-address":
			t = ktypeArrayByte
		case "mtu":
			t = ktypeUint32
		case "p-key":
			t = ktypeInt32
		case "parent":
			t = ktypeString
		case "transport-mode":
			t = ktypeString
		}
	case "ipv4":
		switch key {
		default:
			t = ktypeUnknown
		case "addresses":
			t = ktypeWrapperIpv4Addresses
		case "dad-timeout":
			t = ktypeInt32
		case "dhcp-client-id":
			t = ktypeString
		case "dhcp-fqdn":
			t = ktypeString
		case "dhcp-hostname":
			t = ktypeString
		case "dhcp-send-hostname":
			t = ktypeBoolean
		case "dhcp-timeout":
			t = ktypeInt32
		case "dns":
			t = ktypeWrapperIpv4Dns
		case "dns-options":
			t = ktypeArrayString
		case "dns-priority":
			t = ktypeInt32
		case "dns-search":
			t = ktypeArrayString
		case "gateway":
			t = ktypeString
		case "ignore-auto-dns":
			t = ktypeBoolean
		case "ignore-auto-routes":
			t = ktypeBoolean
		case "may-fail":
			t = ktypeBoolean
		case "method":
			t = ktypeString
		case "never-default":
			t = ktypeBoolean
		case "route-metric":
			t = ktypeInt64
		case "routes":
			t = ktypeWrapperIpv4Routes
		}
	case "ipv6":
		switch key {
		default:
			t = ktypeUnknown
		case "addr-gen-mode":
			t = ktypeInt32
		case "addresses":
			t = ktypeWrapperIpv6Addresses
		case "dad-timeout":
			t = ktypeInt32
		case "dhcp-hostname":
			t = ktypeString
		case "dhcp-send-hostname":
			t = ktypeBoolean
		case "dhcp-timeout":
			t = ktypeInt32
		case "dns":
			t = ktypeWrapperIpv6Dns
		case "dns-options":
			t = ktypeArrayString
		case "dns-priority":
			t = ktypeInt32
		case "dns-search":
			t = ktypeArrayString
		case "gateway":
			t = ktypeString
		case "ignore-auto-dns":
			t = ktypeBoolean
		case "ignore-auto-routes":
			t = ktypeBoolean
		case "ip6-privacy":
			t = ktypeInt32
		case "may-fail":
			t = ktypeBoolean
		case "method":
			t = ktypeString
		case "never-default":
			t = ktypeBoolean
		case "route-metric":
			t = ktypeInt64
		case "routes":
			t = ktypeWrapperIpv6Routes
		case "token":
			t = ktypeString
		}
	case "ip-tunnel":
		switch key {
		default:
			t = ktypeUnknown
		case "encapsulation-limit":
			t = ktypeUint32
		case "flow-label":
			t = ktypeUint32
		case "input-key":
			t = ktypeString
		case "local":
			t = ktypeString
		case "mode":
			t = ktypeUint32
		case "mtu":
			t = ktypeUint32
		case "output-key":
			t = ktypeString
		case "parent":
			t = ktypeString
		case "path-mtu-discovery":
			t = ktypeBoolean
		case "remote":
			t = ktypeString
		case "tos":
			t = ktypeUint32
		case "ttl":
			t = ktypeUint32
		}
	case "macvlan":
		switch key {
		default:
			t = ktypeUnknown
		case "mode":
			t = ktypeUint32
		case "parent":
			t = ktypeString
		case "promiscuous":
			t = ktypeBoolean
		case "tap":
			t = ktypeBoolean
		}
	case "802-11-olpc-mesh":
		switch key {
		default:
			t = ktypeUnknown
		case "channel":
			t = ktypeUint32
		case "dhcp-anycast-address":
			t = ktypeArrayByte
		case "ssid":
			t = ktypeArrayByte
		}
	case "ppp":
		switch key {
		default:
			t = ktypeUnknown
		case "baud":
			t = ktypeUint32
		case "crtscts":
			t = ktypeBoolean
		case "lcp-echo-failure":
			t = ktypeUint32
		case "lcp-echo-interval":
			t = ktypeUint32
		case "mppe-stateful":
			t = ktypeBoolean
		case "mru":
			t = ktypeUint32
		case "mtu":
			t = ktypeUint32
		case "no-vj-comp":
			t = ktypeBoolean
		case "noauth":
			t = ktypeBoolean
		case "nobsdcomp":
			t = ktypeBoolean
		case "nodeflate":
			t = ktypeBoolean
		case "refuse-chap":
			t = ktypeBoolean
		case "refuse-eap":
			t = ktypeBoolean
		case "refuse-mschap":
			t = ktypeBoolean
		case "refuse-mschapv2":
			t = ktypeBoolean
		case "refuse-pap":
			t = ktypeBoolean
		case "require-mppe":
			t = ktypeBoolean
		case "require-mppe-128":
			t = ktypeBoolean
		}
	case "pppoe":
		switch key {
		default:
			t = ktypeUnknown
		case "password":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "service":
			t = ktypeString
		case "username":
			t = ktypeString
		}
	case "serial":
		switch key {
		default:
			t = ktypeUnknown
		case "baud":
			t = ktypeUint32
		case "bits":
			t = ktypeUint32
		case "parity":
			t = ktypeByte
		case "send-delay":
			t = ktypeUint64
		case "stopbits":
			t = ktypeUint32
		}
	case "team":
		switch key {
		default:
			t = ktypeUnknown
		case "config":
			t = ktypeString
		}
	case "team-port":
		switch key {
		default:
			t = ktypeUnknown
		case "config":
			t = ktypeString
		}
	case "tun":
		switch key {
		default:
			t = ktypeUnknown
		case "group":
			t = ktypeString
		case "mode":
			t = ktypeUint32
		case "multi-queue":
			t = ktypeBoolean
		case "owner":
			t = ktypeString
		case "pi":
			t = ktypeBoolean
		case "vnet-hdr":
			t = ktypeBoolean
		}
	case "vlan":
		switch key {
		default:
			t = ktypeUnknown
		case "egress-priority-map":
			t = ktypeArrayString
		case "flags":
			t = ktypeUint32
		case "id":
			t = ktypeUint32
		case "ingress-priority-map":
			t = ktypeArrayString
		case "parent":
			t = ktypeString
		}
	case "vpn":
		switch key {
		default:
			t = ktypeUnknown
		case "data":
			t = ktypeDictStringString
		case "persistent":
			t = ktypeBoolean
		case "secrets":
			t = ktypeDictStringString
		case "service-type":
			t = ktypeString
		case "timeout":
			t = ktypeUint32
		case "user-name":
			t = ktypeString
		}
	case "vxlan":
		switch key {
		default:
			t = ktypeUnknown
		case "ageing":
			t = ktypeUint32
		case "destination-port":
			t = ktypeUint32
		case "id":
			t = ktypeUint32
		case "l2-miss":
			t = ktypeBoolean
		case "l3-miss":
			t = ktypeBoolean
		case "learning":
			t = ktypeBoolean
		case "limit":
			t = ktypeUint32
		case "local":
			t = ktypeString
		case "parent":
			t = ktypeString
		case "proxy":
			t = ktypeBoolean
		case "remote":
			t = ktypeString
		case "rsc":
			t = ktypeBoolean
		case "source-port-max":
			t = ktypeUint32
		case "source-port-min":
			t = ktypeUint32
		case "tos":
			t = ktypeUint32
		case "ttl":
			t = ktypeUint32
		}
	case "wimax":
		switch key {
		default:
			t = ktypeUnknown
		case "mac-address":
			t = ktypeArrayByte
		case "network-name":
			t = ktypeString
		}
	case "802-3-ethernet":
		switch key {
		default:
			t = ktypeUnknown
		case "auto-negotiate":
			t = ktypeBoolean
		case "cloned-mac-address":
			t = ktypeWrapperMacAddress
		case "duplex":
			t = ktypeString
		case "generate-mac-address-mask":
			t = ktypeString
		case "mac-address":
			t = ktypeWrapperMacAddress
		case "mac-address-blacklist":
			t = ktypeArrayString
		case "mtu":
			t = ktypeUint32
		case "port":
			t = ktypeString
		case "s390-nettype":
			t = ktypeString
		case "s390-options":
			t = ktypeDictStringString
		case "s390-subchannels":
			t = ktypeArrayString
		case "speed":
			t = ktypeUint32
		case "wake-on-lan":
			t = ktypeUint32
		case "wake-on-lan-password":
			t = ktypeString
		}
	case "802-11-wireless":
		switch key {
		default:
			t = ktypeUnknown
		case "band":
			t = ktypeString
		case "bssid":
			t = ktypeWrapperString
		case "channel":
			t = ktypeUint32
		case "cloned-mac-address":
			t = ktypeWrapperMacAddress
		case "generate-mac-address-mask":
			t = ktypeString
		case "hidden":
			t = ktypeBoolean
		case "mac-address":
			t = ktypeWrapperMacAddress
		case "mac-address-blacklist":
			t = ktypeArrayString
		case "mac-address-randomization":
			t = ktypeUint32
		case "mode":
			t = ktypeString
		case "mtu":
			t = ktypeUint32
		case "powersave":
			t = ktypeUint32
		case "rate":
			t = ktypeUint32
		case "seen-bssids":
			t = ktypeArrayString
		case "ssid":
			t = ktypeWrapperString
		case "tx-power":
			t = ktypeUint32
		}
	case "802-11-wireless-security":
		switch key {
		default:
			t = ktypeUnknown
		case "auth-alg":
			t = ktypeString
		case "group":
			t = ktypeArrayString
		case "key-mgmt":
			t = ktypeString
		case "leap-password":
			t = ktypeString
		case "leap-password-flags":
			t = ktypeUint32
		case "leap-username":
			t = ktypeString
		case "pairwise":
			t = ktypeArrayString
		case "proto":
			t = ktypeArrayString
		case "psk":
			t = ktypeString
		case "psk-flags":
			t = ktypeUint32
		case "wep-key-flags":
			t = ktypeUint32
		case "wep-key-type":
			t = ktypeUint32
		case "wep-key0":
			t = ktypeString
		case "wep-key1":
			t = ktypeString
		case "wep-key2":
			t = ktypeString
		case "wep-key3":
			t = ktypeString
		case "wep-tx-keyidx":
			t = ktypeUint32
		}
	case "alias-vpn-l2tp":
		switch key {
		default:
			t = ktypeUnknown
		case "gateway":
			t = ktypeString
		case "user":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "password":
			t = ktypeString
		case "domain":
			t = ktypeString
		}
	case "alias-vpn-l2tp-ppp":
		switch key {
		default:
			t = ktypeUnknown
		case "require-mppe":
			t = ktypeBoolean
		case "require-mppe-40":
			t = ktypeBoolean
		case "require-mppe-128":
			t = ktypeBoolean
		case "mppe-stateful":
			t = ktypeBoolean
		case "refuse-eap":
			t = ktypeBoolean
		case "refuse-pap":
			t = ktypeBoolean
		case "refuse-chap":
			t = ktypeBoolean
		case "refuse-mschap":
			t = ktypeBoolean
		case "refuse-mschapv2":
			t = ktypeBoolean
		case "nobsdcomp":
			t = ktypeBoolean
		case "nodeflate":
			t = ktypeBoolean
		case "no-vj-comp":
			t = ktypeBoolean
		case "nopcomp":
			t = ktypeBoolean
		case "noaccomp":
			t = ktypeBoolean
		case "lcp-echo-failure":
			t = ktypeUint32
		case "lcp-echo-interval":
			t = ktypeUint32
		}
	case "alias-vpn-l2tp-ipsec":
		switch key {
		default:
			t = ktypeUnknown
		case "ipsec-enabled":
			t = ktypeBoolean
		case "ipsec-group-name":
			t = ktypeString
		case "ipsec-gateway-id":
			t = ktypeString
		case "ipsec-psk":
			t = ktypeString
		}
	case "alias-vpn-openconnect":
		switch key {
		default:
			t = ktypeUnknown
		case "gateway":
			t = ktypeString
		case "cacert":
			t = ktypeString
		case "proxy":
			t = ktypeString
		case "enable_csd_trojan":
			t = ktypeBoolean
		case "csd_wrapper":
			t = ktypeString
		case "usercert":
			t = ktypeString
		case "userkey":
			t = ktypeString
		case "pem_passphrase_fsid":
			t = ktypeBoolean
		case "cookie":
			t = ktypeString
		case "gwcert":
			t = ktypeString
		case "authtype":
			t = ktypeString
		case "mtu":
			t = ktypeString
		case "stoken_source":
			t = ktypeString
		case "stoken_string":
			t = ktypeString
		}
	case "alias-vpn-openvpn":
		switch key {
		default:
			t = ktypeUnknown
		case "remote":
			t = ktypeString
		case "connection-type":
			t = ktypeString
		case "username":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "password":
			t = ktypeString
		case "ca":
			t = ktypeString
		case "cert":
			t = ktypeString
		case "key":
			t = ktypeString
		case "cert-pass-flags":
			t = ktypeUint32
		case "cert-pass":
			t = ktypeString
		case "static-key":
			t = ktypeString
		case "static-key-direction":
			t = ktypeUint32
		case "remote-ip":
			t = ktypeString
		case "local-ip":
			t = ktypeString
		}
	case "alias-vpn-openvpn-advanced":
		switch key {
		default:
			t = ktypeUnknown
		case "port":
			t = ktypeUint32
		case "reneg-seconds":
			t = ktypeUint32
		case "comp-lzo":
			t = ktypeBoolean
		case "proto-tcp":
			t = ktypeBoolean
		case "tap-dev":
			t = ktypeBoolean
		case "tunnel-mtu":
			t = ktypeUint32
		case "fragment-size":
			t = ktypeUint32
		case "mssfix":
			t = ktypeBoolean
		case "remote-random":
			t = ktypeBoolean
		}
	case "alias-vpn-openvpn-security":
		switch key {
		default:
			t = ktypeUnknown
		case "cipher":
			t = ktypeString
		case "auth":
			t = ktypeString
		}
	case "alias-vpn-openvpn-tlsauth":
		switch key {
		default:
			t = ktypeUnknown
		case "tls-remote":
			t = ktypeString
		case "remote-cert-tls":
			t = ktypeString
		case "ta":
			t = ktypeString
		case "ta-dir":
			t = ktypeUint32
		}
	case "alias-vpn-openvpn-proxies":
		switch key {
		default:
			t = ktypeUnknown
		case "proxy-type":
			t = ktypeString
		case "proxy-server":
			t = ktypeString
		case "proxy-port":
			t = ktypeUint32
		case "proxy-retry":
			t = ktypeBoolean
		case "http-proxy-username":
			t = ktypeString
		case "http-proxy-password":
			t = ktypeString
		case "http-proxy-password-flags":
			t = ktypeUint32
		}
	case "alias-vpn-pptp":
		switch key {
		default:
			t = ktypeUnknown
		case "gateway":
			t = ktypeString
		case "user":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "password":
			t = ktypeString
		case "domain":
			t = ktypeString
		}
	case "alias-vpn-pptp-ppp":
		switch key {
		default:
			t = ktypeUnknown
		case "require-mppe":
			t = ktypeBoolean
		case "require-mppe-40":
			t = ktypeBoolean
		case "require-mppe-128":
			t = ktypeBoolean
		case "mppe-stateful":
			t = ktypeBoolean
		case "refuse-eap":
			t = ktypeBoolean
		case "refuse-pap":
			t = ktypeBoolean
		case "refuse-chap":
			t = ktypeBoolean
		case "refuse-mschap":
			t = ktypeBoolean
		case "refuse-mschapv2":
			t = ktypeBoolean
		case "nobsdcomp":
			t = ktypeBoolean
		case "nodeflate":
			t = ktypeBoolean
		case "no-vj-comp":
			t = ktypeBoolean
		case "lcp-echo-failure":
			t = ktypeUint32
		case "lcp-echo-interval":
			t = ktypeUint32
		}
	case "alias-vpn-strongswan":
		switch key {
		default:
			t = ktypeUnknown
		case "address":
			t = ktypeString
		case "certificate":
			t = ktypeString
		case "method":
			t = ktypeString
		case "user":
			t = ktypeString
		case "usercert":
			t = ktypeString
		case "userkey":
			t = ktypeString
		case "password":
			t = ktypeString
		case "password-flags":
			t = ktypeUint32
		case "virtual":
			t = ktypeBoolean
		case "encap":
			t = ktypeBoolean
		case "ipcomp":
			t = ktypeBoolean
		}
	case "alias-vpn-vpnc":
		switch key {
		default:
			t = ktypeUnknown
		case "IPSec gateway":
			t = ktypeString
		case "Xauth username":
			t = ktypeString
		case "xauth-password-type":
			t = ktypeString
		case "Xauth password-flags":
			t = ktypeUint32
		case "Xauth password":
			t = ktypeString
		case "IPSec ID":
			t = ktypeString
		case "ipsec-secret-type":
			t = ktypeString
		case "IPSec secret-flags":
			t = ktypeUint32
		case "IPSec secret":
			t = ktypeString
		case "IKE Authmode":
			t = ktypeString
		case "CA-File":
			t = ktypeString
		}
	case "alias-vpn-vpnc-advanced":
		switch key {
		default:
			t = ktypeUnknown
		case "Domain":
			t = ktypeString
		case "Vendor":
			t = ktypeString
		case "Application Version":
			t = ktypeString
		case "Enable Single DES":
			t = ktypeBoolean
		case "Enable no encryption":
			t = ktypeBoolean
		case "NAT Traversal Mode":
			t = ktypeString
		case "IKE DH Group":
			t = ktypeString
		case "Perfect Forward Secrecy":
			t = ktypeString
		case "Local Port":
			t = ktypeUint32
		case "DPD idle timeout (our side)":
			t = ktypeUint32
		case "Cisco UDP Encapsulation Port":
			t = ktypeUint32
		}
	}
	return
}

// General get virtual section setting available keys
func generalGetSettingAvailableKeys(data connectionData, section string) (keys []string) {
	if isVirtualSection(section) {
		keys = generalGetSettingVsectionAvailableKeys(data, section)
		return
	}
	switch section {
	case "802-1x":
		keys = getSetting8021xAvailableKeys(data)
	case "adsl":
		keys = getSettingAdslAvailableKeys(data)
	case "bluetooth":
		keys = getSettingBluetoothAvailableKeys(data)
	case "bond":
		keys = getSettingBondAvailableKeys(data)
	case "bridge":
		keys = getSettingBridgeAvailableKeys(data)
	case "bridge-port":
		keys = getSettingBridgePortAvailableKeys(data)
	case "cdma":
		keys = getSettingCdmaAvailableKeys(data)
	case "connection":
		keys = getSettingConnectionAvailableKeys(data)
	case "dcb":
		keys = getSettingDcbAvailableKeys(data)
	case "generic":
		keys = getSettingGenericAvailableKeys(data)
	case "gsm":
		keys = getSettingGsmAvailableKeys(data)
	case "infiniband":
		keys = getSettingInfinibandAvailableKeys(data)
	case "ipv4":
		keys = getSettingIP4ConfigAvailableKeys(data)
	case "ipv6":
		keys = getSettingIP6ConfigAvailableKeys(data)
	case "ip-tunnel":
		keys = getSettingIPTunnelAvailableKeys(data)
	case "macvlan":
		keys = getSettingMacvlanAvailableKeys(data)
	case "802-11-olpc-mesh":
		keys = getSettingOlpcMeshAvailableKeys(data)
	case "ppp":
		keys = getSettingPppAvailableKeys(data)
	case "pppoe":
		keys = getSettingPppoeAvailableKeys(data)
	case "serial":
		keys = getSettingSerialAvailableKeys(data)
	case "team":
		keys = getSettingTeamAvailableKeys(data)
	case "team-port":
		keys = getSettingTeamPortAvailableKeys(data)
	case "tun":
		keys = getSettingTunAvailableKeys(data)
	case "vlan":
		keys = getSettingVlanAvailableKeys(data)
	case "vpn":
		keys = getSettingVpnAvailableKeys(data)
	case "vxlan":
		keys = getSettingVxlanAvailableKeys(data)
	case "wimax":
		keys = getSettingWimaxAvailableKeys(data)
	case "802-3-ethernet":
		keys = getSettingWiredAvailableKeys(data)
	case "802-11-wireless":
		keys = getSettingWirelessAvailableKeys(data)
	case "802-11-wireless-security":
		keys = getSettingWirelessSecurityAvailableKeys(data)
	case "alias-vpn-l2tp":
		keys = getSettingVpnL2tpAvailableKeys(data)
	case "alias-vpn-l2tp-ppp":
		keys = getSettingVpnL2tpPppAvailableKeys(data)
	case "alias-vpn-l2tp-ipsec":
		keys = getSettingVpnL2tpIpsecAvailableKeys(data)
	case "alias-vpn-openconnect":
		keys = getSettingVpnOpenconnectAvailableKeys(data)
	case "alias-vpn-openvpn":
		keys = getSettingVpnOpenvpnAvailableKeys(data)
	case "alias-vpn-openvpn-advanced":
		keys = getSettingVpnOpenvpnAdvancedAvailableKeys(data)
	case "alias-vpn-openvpn-security":
		keys = getSettingVpnOpenvpnSecurityAvailableKeys(data)
	case "alias-vpn-openvpn-tlsauth":
		keys = getSettingVpnOpenvpnTlsauthAvailableKeys(data)
	case "alias-vpn-openvpn-proxies":
		keys = getSettingVpnOpenvpnProxiesAvailableKeys(data)
	case "alias-vpn-pptp":
		keys = getSettingVpnPptpAvailableKeys(data)
	case "alias-vpn-pptp-ppp":
		keys = getSettingVpnPptpPppAvailableKeys(data)
	case "alias-vpn-strongswan":
		keys = getSettingVpnStrongswanAvailableKeys(data)
	case "alias-vpn-vpnc":
		keys = getSettingVpnVpncAvailableKeys(data)
	case "alias-vpn-vpnc-advanced":
		keys = getSettingVpnVpncAdvancedAvailableKeys(data)
	}
	return
}

// General get virtual section setting key's available values
func generalGetSettingAvailableValues(data connectionData, section, key string) (values []kvalue) {
	if isVirtualKey(section, key) {
		values = generalGetSettingVkeyAvailableValues(data, section, key)
		return
	}
	switch section {
	case "802-1x":
		values = getSetting8021xAvailableValues(data, key)
	case "adsl":
		values = getSettingAdslAvailableValues(data, key)
	case "bluetooth":
		values = getSettingBluetoothAvailableValues(data, key)
	case "bond":
		values = getSettingBondAvailableValues(data, key)
	case "bridge":
		values = getSettingBridgeAvailableValues(data, key)
	case "bridge-port":
		values = getSettingBridgePortAvailableValues(data, key)
	case "cdma":
		values = getSettingCdmaAvailableValues(data, key)
	case "connection":
		values = getSettingConnectionAvailableValues(data, key)
	case "dcb":
		values = getSettingDcbAvailableValues(data, key)
	case "generic":
		values = getSettingGenericAvailableValues(data, key)
	case "gsm":
		values = getSettingGsmAvailableValues(data, key)
	case "infiniband":
		values = getSettingInfinibandAvailableValues(data, key)
	case "ipv4":
		values = getSettingIP4ConfigAvailableValues(data, key)
	case "ipv6":
		values = getSettingIP6ConfigAvailableValues(data, key)
	case "ip-tunnel":
		values = getSettingIPTunnelAvailableValues(data, key)
	case "macvlan":
		values = getSettingMacvlanAvailableValues(data, key)
	case "802-11-olpc-mesh":
		values = getSettingOlpcMeshAvailableValues(data, key)
	case "ppp":
		values = getSettingPppAvailableValues(data, key)
	case "pppoe":
		values = getSettingPppoeAvailableValues(data, key)
	case "serial":
		values = getSettingSerialAvailableValues(data, key)
	case "team":
		values = getSettingTeamAvailableValues(data, key)
	case "team-port":
		values = getSettingTeamPortAvailableValues(data, key)
	case "tun":
		values = getSettingTunAvailableValues(data, key)
	case "vlan":
		values = getSettingVlanAvailableValues(data, key)
	case "vpn":
		values = getSettingVpnAvailableValues(data, key)
	case "vxlan":
		values = getSettingVxlanAvailableValues(data, key)
	case "wimax":
		values = getSettingWimaxAvailableValues(data, key)
	case "802-3-ethernet":
		values = getSettingWiredAvailableValues(data, key)
	case "802-11-wireless":
		values = getSettingWirelessAvailableValues(data, key)
	case "802-11-wireless-security":
		values = getSettingWirelessSecurityAvailableValues(data, key)
	case "alias-vpn-l2tp":
		values = getSettingVpnL2tpAvailableValues(data, key)
	case "alias-vpn-l2tp-ppp":
		values = getSettingVpnL2tpPppAvailableValues(data, key)
	case "alias-vpn-l2tp-ipsec":
		values = getSettingVpnL2tpIpsecAvailableValues(data, key)
	case "alias-vpn-openconnect":
		values = getSettingVpnOpenconnectAvailableValues(data, key)
	case "alias-vpn-openvpn":
		values = getSettingVpnOpenvpnAvailableValues(data, key)
	case "alias-vpn-openvpn-advanced":
		values = getSettingVpnOpenvpnAdvancedAvailableValues(data, key)
	case "alias-vpn-openvpn-security":
		values = getSettingVpnOpenvpnSecurityAvailableValues(data, key)
	case "alias-vpn-openvpn-tlsauth":
		values = getSettingVpnOpenvpnTlsauthAvailableValues(data, key)
	case "alias-vpn-openvpn-proxies":
		values = getSettingVpnOpenvpnProxiesAvailableValues(data, key)
	case "alias-vpn-pptp":
		values = getSettingVpnPptpAvailableValues(data, key)
	case "alias-vpn-pptp-ppp":
		values = getSettingVpnPptpPppAvailableValues(data, key)
	case "alias-vpn-strongswan":
		values = getSettingVpnStrongswanAvailableValues(data, key)
	case "alias-vpn-vpnc":
		values = getSettingVpnVpncAvailableValues(data, key)
	case "alias-vpn-vpnc-advanced":
		values = getSettingVpnVpncAdvancedAvailableValues(data, key)
	}
	return
}

// General check setting key values if is valid
func generalCheckSettingValues(data connectionData, section string) (errs sectionErrors) {
	if isVirtualSection(section) {
		return
	}
	switch section {
	case "802-1x":
		errs = checkSetting8021xValues(data)
	case "adsl":
		errs = checkSettingAdslValues(data)
	case "bluetooth":
		errs = checkSettingBluetoothValues(data)
	case "bond":
		errs = checkSettingBondValues(data)
	case "bridge":
		errs = checkSettingBridgeValues(data)
	case "bridge-port":
		errs = checkSettingBridgePortValues(data)
	case "cdma":
		errs = checkSettingCdmaValues(data)
	case "connection":
		errs = checkSettingConnectionValues(data)
	case "dcb":
		errs = checkSettingDcbValues(data)
	case "generic":
		errs = checkSettingGenericValues(data)
	case "gsm":
		errs = checkSettingGsmValues(data)
	case "infiniband":
		errs = checkSettingInfinibandValues(data)
	case "ipv4":
		errs = checkSettingIP4ConfigValues(data)
	case "ipv6":
		errs = checkSettingIP6ConfigValues(data)
	case "ip-tunnel":
		errs = checkSettingIPTunnelValues(data)
	case "macvlan":
		errs = checkSettingMacvlanValues(data)
	case "802-11-olpc-mesh":
		errs = checkSettingOlpcMeshValues(data)
	case "ppp":
		errs = checkSettingPppValues(data)
	case "pppoe":
		errs = checkSettingPppoeValues(data)
	case "serial":
		errs = checkSettingSerialValues(data)
	case "team":
		errs = checkSettingTeamValues(data)
	case "team-port":
		errs = checkSettingTeamPortValues(data)
	case "tun":
		errs = checkSettingTunValues(data)
	case "vlan":
		errs = checkSettingVlanValues(data)
	case "vpn":
		errs = checkSettingVpnValues(data)
	case "vxlan":
		errs = checkSettingVxlanValues(data)
	case "wimax":
		errs = checkSettingWimaxValues(data)
	case "802-3-ethernet":
		errs = checkSettingWiredValues(data)
	case "802-11-wireless":
		errs = checkSettingWirelessValues(data)
	case "802-11-wireless-security":
		errs = checkSettingWirelessSecurityValues(data)
	case "alias-vpn-l2tp":
		errs = checkSettingVpnL2tpValues(data)
	case "alias-vpn-l2tp-ppp":
		errs = checkSettingVpnL2tpPppValues(data)
	case "alias-vpn-l2tp-ipsec":
		errs = checkSettingVpnL2tpIpsecValues(data)
	case "alias-vpn-openconnect":
		errs = checkSettingVpnOpenconnectValues(data)
	case "alias-vpn-openvpn":
		errs = checkSettingVpnOpenvpnValues(data)
	case "alias-vpn-openvpn-advanced":
		errs = checkSettingVpnOpenvpnAdvancedValues(data)
	case "alias-vpn-openvpn-security":
		errs = checkSettingVpnOpenvpnSecurityValues(data)
	case "alias-vpn-openvpn-tlsauth":
		errs = checkSettingVpnOpenvpnTlsauthValues(data)
	case "alias-vpn-openvpn-proxies":
		errs = checkSettingVpnOpenvpnProxiesValues(data)
	case "alias-vpn-pptp":
		errs = checkSettingVpnPptpValues(data)
	case "alias-vpn-pptp-ppp":
		errs = checkSettingVpnPptpPppValues(data)
	case "alias-vpn-strongswan":
		errs = checkSettingVpnStrongswanValues(data)
	case "alias-vpn-vpnc":
		errs = checkSettingVpnVpncValues(data)
	case "alias-vpn-vpnc-advanced":
		errs = checkSettingVpnVpncAdvancedValues(data)
	}
	return
}

// General get setting key default value
func generalGetSettingDefaultValue(setting, key string) (defvalue interface{}) {
	switch setting {
	default:
		logger.Error("invalid key:", setting, key)
	case "802-1x":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "altsubject-matches":
			defvalue = []string{}
		case "anonymous-identity":
			defvalue = ""
		case "ca-cert":
			defvalue = []byte{}
		case "ca-path":
			defvalue = ""
		case "client-cert":
			defvalue = []byte{}
		case "domain-suffix-match":
			defvalue = ""
		case "eap":
			defvalue = []string{}
		case "identity":
			defvalue = ""
		case "pac-file":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "password-raw":
			defvalue = []byte{}
		case "password-raw-flags":
			defvalue = uint32(0x0)
		case "phase1-fast-provisioning":
			defvalue = ""
		case "phase1-peaplabel":
			defvalue = ""
		case "phase1-peapver":
			defvalue = ""
		case "phase2-altsubject-matches":
			defvalue = []string{}
		case "phase2-auth":
			defvalue = ""
		case "phase2-autheap":
			defvalue = ""
		case "phase2-ca-cert":
			defvalue = []byte{}
		case "phase2-ca-path":
			defvalue = ""
		case "phase2-client-cert":
			defvalue = []byte{}
		case "phase2-domain-suffix-match":
			defvalue = ""
		case "phase2-private-key":
			defvalue = []byte{}
		case "phase2-private-key-password":
			defvalue = ""
		case "phase2-private-key-password-flags":
			defvalue = uint32(0x0)
		case "phase2-subject-match":
			defvalue = ""
		case "pin":
			defvalue = ""
		case "pin-flags":
			defvalue = uint32(0x0)
		case "private-key":
			defvalue = []byte{}
		case "private-key-password":
			defvalue = ""
		case "private-key-password-flags":
			defvalue = uint32(0x0)
		case "subject-match":
			defvalue = ""
		case "system-ca-certs":
			defvalue = false
		}
	case "adsl":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "encapsulation":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "protocol":
			defvalue = ""
		case "username":
			defvalue = ""
		case "vci":
			defvalue = uint32(0x0)
		case "vpi":
			defvalue = uint32(0x0)
		}
	case "bluetooth":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "bdaddr":
			defvalue = []byte{}
		case "type":
			defvalue = ""
		}
	case "bond":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "options":
			defvalue = map[string]string{"mode": "balance-rr"}
		}
	case "bridge":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "ageing-time":
			defvalue = uint32(0x12c)
		case "forward-delay":
			defvalue = uint32(0xf)
		case "hello-time":
			defvalue = uint32(0x2)
		case "mac-address":
			defvalue = []byte{}
		case "max-age":
			defvalue = uint32(0x14)
		case "multicast-snooping":
			defvalue = true
		case "priority":
			defvalue = uint32(0x8000)
		case "stp":
			defvalue = true
		}
	case "bridge-port":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "hairpin-mode":
			defvalue = false
		case "path-cost":
			defvalue = uint32(0x64)
		case "priority":
			defvalue = uint32(0x20)
		}
	case "cdma":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "number":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "username":
			defvalue = ""
		}
	case "connection":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "autoconnect":
			defvalue = true
		case "autoconnect-priority":
			defvalue = int32(0)
		case "autoconnect-slaves":
			defvalue = int32(0)
		case "gateway-ping-timeout":
			defvalue = uint32(0x0)
		case "id":
			defvalue = ""
		case "interface-name":
			defvalue = ""
		case "lldp":
			defvalue = int32(-1)
		case "master":
			defvalue = ""
		case "metered":
			defvalue = int32(0)
		case "permissions":
			defvalue = []string{}
		case "read-only":
			defvalue = false
		case "secondaries":
			defvalue = []string{}
		case "slave-type":
			defvalue = ""
		case "stable-id":
			defvalue = ""
		case "timestamp":
			defvalue = uint64(0x0)
		case "type":
			defvalue = ""
		case "uuid":
			defvalue = ""
		case "zone":
			defvalue = ""
		}
	case "dcb":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "app-fcoe-flags":
			defvalue = uint32(0x0)
		case "app-fcoe-mode":
			defvalue = "fabric"
		case "app-fcoe-priority":
			defvalue = int32(-1)
		case "app-fip-flags":
			defvalue = uint32(0x0)
		case "app-fip-priority":
			defvalue = int32(-1)
		case "app-iscsi-flags":
			defvalue = uint32(0x0)
		case "app-iscsi-priority":
			defvalue = int32(-1)
		case "priority-bandwidth":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-flow-control":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-flow-control-flags":
			defvalue = uint32(0x0)
		case "priority-group-bandwidth":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-group-flags":
			defvalue = uint32(0x0)
		case "priority-group-id":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-strict-bandwidth":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		case "priority-traffic-class":
			defvalue = []uint32{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
		}
	case "generic":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		}
	case "gsm":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "apn":
			defvalue = ""
		case "device-id":
			defvalue = ""
		case "home-only":
			defvalue = false
		case "network-id":
			defvalue = ""
		case "number":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "pin":
			defvalue = ""
		case "pin-flags":
			defvalue = uint32(0x0)
		case "sim-id":
			defvalue = ""
		case "sim-operator-id":
			defvalue = ""
		case "username":
			defvalue = ""
		}
	case "infiniband":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "mac-address":
			defvalue = []byte{}
		case "mtu":
			defvalue = uint32(0x0)
		case "p-key":
			defvalue = int32(-1)
		case "parent":
			defvalue = ""
		case "transport-mode":
			defvalue = ""
		}
	case "ipv4":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "addresses":
			defvalue = [][]uint32{[]uint32{0x0, 0x18, 0x0}}
		case "dad-timeout":
			defvalue = int32(-1)
		case "dhcp-client-id":
			defvalue = ""
		case "dhcp-fqdn":
			defvalue = ""
		case "dhcp-hostname":
			defvalue = ""
		case "dhcp-send-hostname":
			defvalue = true
		case "dhcp-timeout":
			defvalue = int32(0)
		case "dns":
			defvalue = []uint32{}
		case "dns-options":
			defvalue = []string{}
		case "dns-priority":
			defvalue = int32(0)
		case "dns-search":
			defvalue = []string{}
		case "gateway":
			defvalue = ""
		case "ignore-auto-dns":
			defvalue = false
		case "ignore-auto-routes":
			defvalue = false
		case "may-fail":
			defvalue = true
		case "method":
			defvalue = ""
		case "never-default":
			defvalue = false
		case "route-metric":
			defvalue = int64(-1)
		case "routes":
			defvalue = [][]uint32{}
		}
	case "ipv6":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "addr-gen-mode":
			defvalue = int32(1)
		case "addresses":
			defvalue = make(ipv6Addresses, 0)
		case "dad-timeout":
			defvalue = int32(-1)
		case "dhcp-hostname":
			defvalue = ""
		case "dhcp-send-hostname":
			defvalue = true
		case "dhcp-timeout":
			defvalue = int32(0)
		case "dns":
			defvalue = [][]uint8{}
		case "dns-options":
			defvalue = []string{}
		case "dns-priority":
			defvalue = int32(0)
		case "dns-search":
			defvalue = []string{}
		case "gateway":
			defvalue = ""
		case "ignore-auto-dns":
			defvalue = false
		case "ignore-auto-routes":
			defvalue = false
		case "ip6-privacy":
			defvalue = int32(0)
		case "may-fail":
			defvalue = true
		case "method":
			defvalue = ""
		case "never-default":
			defvalue = false
		case "route-metric":
			defvalue = int64(-1)
		case "routes":
			defvalue = make(ipv6Routes, 0)
		case "token":
			defvalue = ""
		}
	case "ip-tunnel":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "encapsulation-limit":
			defvalue = uint32(0x0)
		case "flow-label":
			defvalue = uint32(0x0)
		case "input-key":
			defvalue = ""
		case "local":
			defvalue = ""
		case "mode":
			defvalue = uint32(0x0)
		case "mtu":
			defvalue = uint32(0x0)
		case "output-key":
			defvalue = ""
		case "parent":
			defvalue = ""
		case "path-mtu-discovery":
			defvalue = true
		case "remote":
			defvalue = ""
		case "tos":
			defvalue = uint32(0x0)
		case "ttl":
			defvalue = uint32(0x0)
		}
	case "macvlan":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "mode":
			defvalue = uint32(0x0)
		case "parent":
			defvalue = ""
		case "promiscuous":
			defvalue = true
		case "tap":
			defvalue = false
		}
	case "802-11-olpc-mesh":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "channel":
			defvalue = uint32(0x0)
		case "dhcp-anycast-address":
			defvalue = []byte{}
		case "ssid":
			defvalue = []byte{}
		}
	case "ppp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "baud":
			defvalue = uint32(0x0)
		case "crtscts":
			defvalue = false
		case "lcp-echo-failure":
			defvalue = uint32(0x0)
		case "lcp-echo-interval":
			defvalue = uint32(0x0)
		case "mppe-stateful":
			defvalue = false
		case "mru":
			defvalue = uint32(0x0)
		case "mtu":
			defvalue = uint32(0x0)
		case "no-vj-comp":
			defvalue = false
		case "noauth":
			defvalue = true
		case "nobsdcomp":
			defvalue = false
		case "nodeflate":
			defvalue = false
		case "refuse-chap":
			defvalue = false
		case "refuse-eap":
			defvalue = false
		case "refuse-mschap":
			defvalue = false
		case "refuse-mschapv2":
			defvalue = false
		case "refuse-pap":
			defvalue = false
		case "require-mppe":
			defvalue = false
		case "require-mppe-128":
			defvalue = false
		}
	case "pppoe":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "service":
			defvalue = ""
		case "username":
			defvalue = ""
		}
	case "serial":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "baud":
			defvalue = uint32(0xe100)
		case "bits":
			defvalue = uint32(0x8)
		case "parity":
			defvalue = byte(0x0)
		case "send-delay":
			defvalue = uint64(0x0)
		case "stopbits":
			defvalue = uint32(0x1)
		}
	case "team":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "config":
			defvalue = ""
		}
	case "team-port":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "config":
			defvalue = ""
		}
	case "tun":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "group":
			defvalue = ""
		case "mode":
			defvalue = uint32(0x1)
		case "multi-queue":
			defvalue = false
		case "owner":
			defvalue = ""
		case "pi":
			defvalue = false
		case "vnet-hdr":
			defvalue = false
		}
	case "vlan":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "egress-priority-map":
			defvalue = []string{}
		case "flags":
			defvalue = uint32(0x0)
		case "id":
			defvalue = uint32(0x0)
		case "ingress-priority-map":
			defvalue = []string{}
		case "parent":
			defvalue = ""
		}
	case "vpn":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "data":
			defvalue = map[string]string{}
		case "persistent":
			defvalue = false
		case "secrets":
			defvalue = map[string]string{}
		case "service-type":
			defvalue = ""
		case "timeout":
			defvalue = uint32(0x0)
		case "user-name":
			defvalue = ""
		}
	case "vxlan":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "ageing":
			defvalue = uint32(0x12c)
		case "destination-port":
			defvalue = uint32(0x2118)
		case "id":
			defvalue = uint32(0x0)
		case "l2-miss":
			defvalue = false
		case "l3-miss":
			defvalue = false
		case "learning":
			defvalue = true
		case "limit":
			defvalue = uint32(0x0)
		case "local":
			defvalue = ""
		case "parent":
			defvalue = ""
		case "proxy":
			defvalue = false
		case "remote":
			defvalue = ""
		case "rsc":
			defvalue = false
		case "source-port-max":
			defvalue = uint32(0x0)
		case "source-port-min":
			defvalue = uint32(0x0)
		case "tos":
			defvalue = uint32(0x0)
		case "ttl":
			defvalue = uint32(0x0)
		}
	case "wimax":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "mac-address":
			defvalue = []byte{}
		case "network-name":
			defvalue = ""
		}
	case "802-3-ethernet":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "auto-negotiate":
			defvalue = true
		case "cloned-mac-address":
			defvalue = []byte{}
		case "duplex":
			defvalue = ""
		case "generate-mac-address-mask":
			defvalue = ""
		case "mac-address":
			defvalue = []byte{}
		case "mac-address-blacklist":
			defvalue = []string{}
		case "mtu":
			defvalue = uint32(0x0)
		case "port":
			defvalue = ""
		case "s390-nettype":
			defvalue = ""
		case "s390-options":
			defvalue = map[string]string{}
		case "s390-subchannels":
			defvalue = []string{}
		case "speed":
			defvalue = uint32(0x0)
		case "wake-on-lan":
			defvalue = uint32(0x1)
		case "wake-on-lan-password":
			defvalue = ""
		}
	case "802-11-wireless":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "band":
			defvalue = ""
		case "bssid":
			defvalue = []byte{}
		case "channel":
			defvalue = uint32(0x0)
		case "cloned-mac-address":
			defvalue = []byte{}
		case "generate-mac-address-mask":
			defvalue = ""
		case "hidden":
			defvalue = false
		case "mac-address":
			defvalue = []byte{}
		case "mac-address-blacklist":
			defvalue = []string{}
		case "mac-address-randomization":
			defvalue = uint32(0x0)
		case "mode":
			defvalue = ""
		case "mtu":
			defvalue = uint32(0x0)
		case "powersave":
			defvalue = uint32(0x0)
		case "rate":
			defvalue = uint32(0x0)
		case "seen-bssids":
			defvalue = []string{}
		case "ssid":
			defvalue = []byte{}
		case "tx-power":
			defvalue = uint32(0x0)
		}
	case "802-11-wireless-security":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "auth-alg":
			defvalue = ""
		case "group":
			defvalue = []string{}
		case "key-mgmt":
			defvalue = ""
		case "leap-password":
			defvalue = ""
		case "leap-password-flags":
			defvalue = uint32(0x0)
		case "leap-username":
			defvalue = ""
		case "pairwise":
			defvalue = []string{}
		case "proto":
			defvalue = []string{}
		case "psk":
			defvalue = ""
		case "psk-flags":
			defvalue = uint32(0x0)
		case "wep-key-flags":
			defvalue = uint32(0x0)
		case "wep-key-type":
			defvalue = uint32(0x0)
		case "wep-key0":
			defvalue = ""
		case "wep-key1":
			defvalue = ""
		case "wep-key2":
			defvalue = ""
		case "wep-key3":
			defvalue = ""
		case "wep-tx-keyidx":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-l2tp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "gateway":
			defvalue = ""
		case "user":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "password":
			defvalue = ""
		case "domain":
			defvalue = ""
		}
	case "alias-vpn-l2tp-ppp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "require-mppe":
			defvalue = false
		case "require-mppe-40":
			defvalue = false
		case "require-mppe-128":
			defvalue = false
		case "mppe-stateful":
			defvalue = false
		case "refuse-eap":
			defvalue = false
		case "refuse-pap":
			defvalue = false
		case "refuse-chap":
			defvalue = false
		case "refuse-mschap":
			defvalue = false
		case "refuse-mschapv2":
			defvalue = false
		case "nobsdcomp":
			defvalue = false
		case "nodeflate":
			defvalue = false
		case "no-vj-comp":
			defvalue = false
		case "nopcomp":
			defvalue = false
		case "noaccomp":
			defvalue = false
		case "lcp-echo-failure":
			defvalue = uint32(0x0)
		case "lcp-echo-interval":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-l2tp-ipsec":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "ipsec-enabled":
			defvalue = false
		case "ipsec-group-name":
			defvalue = ""
		case "ipsec-gateway-id":
			defvalue = ""
		case "ipsec-psk":
			defvalue = ""
		}
	case "alias-vpn-openconnect":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "gateway":
			defvalue = ""
		case "cacert":
			defvalue = ""
		case "proxy":
			defvalue = ""
		case "enable_csd_trojan":
			defvalue = false
		case "csd_wrapper":
			defvalue = ""
		case "usercert":
			defvalue = ""
		case "userkey":
			defvalue = ""
		case "pem_passphrase_fsid":
			defvalue = false
		case "cookie":
			defvalue = ""
		case "gwcert":
			defvalue = ""
		case "authtype":
			defvalue = ""
		case "mtu":
			defvalue = ""
		case "stoken_source":
			defvalue = ""
		case "stoken_string":
			defvalue = ""
		}
	case "alias-vpn-openvpn":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "remote":
			defvalue = ""
		case "connection-type":
			defvalue = ""
		case "username":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "password":
			defvalue = ""
		case "ca":
			defvalue = ""
		case "cert":
			defvalue = ""
		case "key":
			defvalue = ""
		case "cert-pass-flags":
			defvalue = uint32(0x0)
		case "cert-pass":
			defvalue = ""
		case "static-key":
			defvalue = ""
		case "static-key-direction":
			defvalue = uint32(0x0)
		case "remote-ip":
			defvalue = ""
		case "local-ip":
			defvalue = ""
		}
	case "alias-vpn-openvpn-advanced":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "port":
			defvalue = uint32(0x4aa)
		case "reneg-seconds":
			defvalue = uint32(0x0)
		case "comp-lzo":
			defvalue = false
		case "proto-tcp":
			defvalue = false
		case "tap-dev":
			defvalue = false
		case "tunnel-mtu":
			defvalue = uint32(0x5dc)
		case "fragment-size":
			defvalue = uint32(0x514)
		case "mssfix":
			defvalue = false
		case "remote-random":
			defvalue = false
		}
	case "alias-vpn-openvpn-security":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "cipher":
			defvalue = ""
		case "auth":
			defvalue = ""
		}
	case "alias-vpn-openvpn-tlsauth":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "tls-remote":
			defvalue = ""
		case "remote-cert-tls":
			defvalue = ""
		case "ta":
			defvalue = ""
		case "ta-dir":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-openvpn-proxies":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "proxy-type":
			defvalue = "none"
		case "proxy-server":
			defvalue = ""
		case "proxy-port":
			defvalue = uint32(0x0)
		case "proxy-retry":
			defvalue = false
		case "http-proxy-username":
			defvalue = ""
		case "http-proxy-password":
			defvalue = ""
		case "http-proxy-password-flags":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-pptp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "gateway":
			defvalue = ""
		case "user":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "password":
			defvalue = ""
		case "domain":
			defvalue = ""
		}
	case "alias-vpn-pptp-ppp":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "require-mppe":
			defvalue = false
		case "require-mppe-40":
			defvalue = false
		case "require-mppe-128":
			defvalue = false
		case "mppe-stateful":
			defvalue = false
		case "refuse-eap":
			defvalue = false
		case "refuse-pap":
			defvalue = false
		case "refuse-chap":
			defvalue = false
		case "refuse-mschap":
			defvalue = false
		case "refuse-mschapv2":
			defvalue = false
		case "nobsdcomp":
			defvalue = false
		case "nodeflate":
			defvalue = false
		case "no-vj-comp":
			defvalue = false
		case "lcp-echo-failure":
			defvalue = uint32(0x0)
		case "lcp-echo-interval":
			defvalue = uint32(0x0)
		}
	case "alias-vpn-strongswan":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "address":
			defvalue = ""
		case "certificate":
			defvalue = ""
		case "method":
			defvalue = ""
		case "user":
			defvalue = ""
		case "usercert":
			defvalue = ""
		case "userkey":
			defvalue = ""
		case "password":
			defvalue = ""
		case "password-flags":
			defvalue = uint32(0x0)
		case "virtual":
			defvalue = false
		case "encap":
			defvalue = false
		case "ipcomp":
			defvalue = false
		}
	case "alias-vpn-vpnc":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "IPSec gateway":
			defvalue = ""
		case "Xauth username":
			defvalue = ""
		case "xauth-password-type":
			defvalue = ""
		case "Xauth password-flags":
			defvalue = uint32(0x0)
		case "Xauth password":
			defvalue = ""
		case "IPSec ID":
			defvalue = ""
		case "ipsec-secret-type":
			defvalue = ""
		case "IPSec secret-flags":
			defvalue = uint32(0x0)
		case "IPSec secret":
			defvalue = ""
		case "IKE Authmode":
			defvalue = ""
		case "CA-File":
			defvalue = ""
		}
	case "alias-vpn-vpnc-advanced":
		switch key {
		default:
			logger.Error("invalid key:", setting, key)
		case "Domain":
			defvalue = ""
		case "Vendor":
			defvalue = ""
		case "Application Version":
			defvalue = ""
		case "Enable Single DES":
			defvalue = false
		case "Enable no encryption":
			defvalue = false
		case "NAT Traversal Mode":
			defvalue = ""
		case "IKE DH Group":
			defvalue = ""
		case "Perfect Forward Secrecy":
			defvalue = ""
		case "Local Port":
			defvalue = uint32(0x0)
		case "DPD idle timeout (our side)":
			defvalue = uint32(0x0)
		case "Cisco UDP Encapsulation Port":
			defvalue = uint32(0x0)
		}
	}
	return
}

// Generally JSON getter
func generalGetSettingKeyJSON(data connectionData, section, key string) (valueJSON string) {
	if isVirtualKey(section, key) {
		valueJSON = generalGetVkeyJSON(data, section, key)
		return
	}
	switch section {
	default:
		logger.Error("getSettingKeyJSON: invalide key", section, key)
	case "802-1x":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "altsubject-matches":
			valueJSON = getSetting8021xAltsubjectMatchesJSON(data)
		case "anonymous-identity":
			valueJSON = getSetting8021xAnonymousIdentityJSON(data)
		case "ca-cert":
			valueJSON = getSetting8021xCaCertJSON(data)
		case "ca-path":
			valueJSON = getSetting8021xCaPathJSON(data)
		case "client-cert":
			valueJSON = getSetting8021xClientCertJSON(data)
		case "domain-suffix-match":
			valueJSON = getSetting8021xDomainSuffixMatchJSON(data)
		case "eap":
			valueJSON = getSetting8021xEapJSON(data)
		case "identity":
			valueJSON = getSetting8021xIdentityJSON(data)
		case "pac-file":
			valueJSON = getSetting8021xPacFileJSON(data)
		case "password":
			valueJSON = getSetting8021xPasswordJSON(data)
		case "password-flags":
			valueJSON = getSetting8021xPasswordFlagsJSON(data)
		case "password-raw":
			valueJSON = getSetting8021xPasswordRawJSON(data)
		case "password-raw-flags":
			valueJSON = getSetting8021xPasswordRawFlagsJSON(data)
		case "phase1-fast-provisioning":
			valueJSON = getSetting8021xPhase1FastProvisioningJSON(data)
		case "phase1-peaplabel":
			valueJSON = getSetting8021xPhase1PeaplabelJSON(data)
		case "phase1-peapver":
			valueJSON = getSetting8021xPhase1PeapverJSON(data)
		case "phase2-altsubject-matches":
			valueJSON = getSetting8021xPhase2AltsubjectMatchesJSON(data)
		case "phase2-auth":
			valueJSON = getSetting8021xPhase2AuthJSON(data)
		case "phase2-autheap":
			valueJSON = getSetting8021xPhase2AutheapJSON(data)
		case "phase2-ca-cert":
			valueJSON = getSetting8021xPhase2CaCertJSON(data)
		case "phase2-ca-path":
			valueJSON = getSetting8021xPhase2CaPathJSON(data)
		case "phase2-client-cert":
			valueJSON = getSetting8021xPhase2ClientCertJSON(data)
		case "phase2-domain-suffix-match":
			valueJSON = getSetting8021xPhase2DomainSuffixMatchJSON(data)
		case "phase2-private-key":
			valueJSON = getSetting8021xPhase2PrivateKeyJSON(data)
		case "phase2-private-key-password":
			valueJSON = getSetting8021xPhase2PrivateKeyPasswordJSON(data)
		case "phase2-private-key-password-flags":
			valueJSON = getSetting8021xPhase2PrivateKeyPasswordFlagsJSON(data)
		case "phase2-subject-match":
			valueJSON = getSetting8021xPhase2SubjectMatchJSON(data)
		case "pin":
			valueJSON = getSetting8021xPinJSON(data)
		case "pin-flags":
			valueJSON = getSetting8021xPinFlagsJSON(data)
		case "private-key":
			valueJSON = getSetting8021xPrivateKeyJSON(data)
		case "private-key-password":
			valueJSON = getSetting8021xPrivateKeyPasswordJSON(data)
		case "private-key-password-flags":
			valueJSON = getSetting8021xPrivateKeyPasswordFlagsJSON(data)
		case "subject-match":
			valueJSON = getSetting8021xSubjectMatchJSON(data)
		case "system-ca-certs":
			valueJSON = getSetting8021xSystemCaCertsJSON(data)
		}
	case "adsl":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "encapsulation":
			valueJSON = getSettingAdslEncapsulationJSON(data)
		case "password":
			valueJSON = getSettingAdslPasswordJSON(data)
		case "password-flags":
			valueJSON = getSettingAdslPasswordFlagsJSON(data)
		case "protocol":
			valueJSON = getSettingAdslProtocolJSON(data)
		case "username":
			valueJSON = getSettingAdslUsernameJSON(data)
		case "vci":
			valueJSON = getSettingAdslVciJSON(data)
		case "vpi":
			valueJSON = getSettingAdslVpiJSON(data)
		}
	case "bluetooth":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "bdaddr":
			valueJSON = getSettingBluetoothBdaddrJSON(data)
		case "type":
			valueJSON = getSettingBluetoothTypeJSON(data)
		}
	case "bond":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "options":
			valueJSON = getSettingBondOptionsJSON(data)
		}
	case "bridge":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "ageing-time":
			valueJSON = getSettingBridgeAgeingTimeJSON(data)
		case "forward-delay":
			valueJSON = getSettingBridgeForwardDelayJSON(data)
		case "hello-time":
			valueJSON = getSettingBridgeHelloTimeJSON(data)
		case "mac-address":
			valueJSON = getSettingBridgeMacAddressJSON(data)
		case "max-age":
			valueJSON = getSettingBridgeMaxAgeJSON(data)
		case "multicast-snooping":
			valueJSON = getSettingBridgeMulticastSnoopingJSON(data)
		case "priority":
			valueJSON = getSettingBridgePriorityJSON(data)
		case "stp":
			valueJSON = getSettingBridgeStpJSON(data)
		}
	case "bridge-port":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "hairpin-mode":
			valueJSON = getSettingBridgePortHairpinModeJSON(data)
		case "path-cost":
			valueJSON = getSettingBridgePortPathCostJSON(data)
		case "priority":
			valueJSON = getSettingBridgePortPriorityJSON(data)
		}
	case "cdma":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "number":
			valueJSON = getSettingCdmaNumberJSON(data)
		case "password":
			valueJSON = getSettingCdmaPasswordJSON(data)
		case "password-flags":
			valueJSON = getSettingCdmaPasswordFlagsJSON(data)
		case "username":
			valueJSON = getSettingCdmaUsernameJSON(data)
		}
	case "connection":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "autoconnect":
			valueJSON = getSettingConnectionAutoconnectJSON(data)
		case "autoconnect-priority":
			valueJSON = getSettingConnectionAutoconnectPriorityJSON(data)
		case "autoconnect-slaves":
			valueJSON = getSettingConnectionAutoconnectSlavesJSON(data)
		case "gateway-ping-timeout":
			valueJSON = getSettingConnectionGatewayPingTimeoutJSON(data)
		case "id":
			valueJSON = getSettingConnectionIdJSON(data)
		case "interface-name":
			valueJSON = getSettingConnectionInterfaceNameJSON(data)
		case "lldp":
			valueJSON = getSettingConnectionLldpJSON(data)
		case "master":
			valueJSON = getSettingConnectionMasterJSON(data)
		case "metered":
			valueJSON = getSettingConnectionMeteredJSON(data)
		case "permissions":
			valueJSON = getSettingConnectionPermissionsJSON(data)
		case "read-only":
			valueJSON = getSettingConnectionReadOnlyJSON(data)
		case "secondaries":
			valueJSON = getSettingConnectionSecondariesJSON(data)
		case "slave-type":
			valueJSON = getSettingConnectionSlaveTypeJSON(data)
		case "stable-id":
			valueJSON = getSettingConnectionStableIdJSON(data)
		case "timestamp":
			valueJSON = getSettingConnectionTimestampJSON(data)
		case "type":
			valueJSON = getSettingConnectionTypeJSON(data)
		case "uuid":
			valueJSON = getSettingConnectionUuidJSON(data)
		case "zone":
			valueJSON = getSettingConnectionZoneJSON(data)
		}
	case "dcb":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "app-fcoe-flags":
			valueJSON = getSettingDcbAppFcoeFlagsJSON(data)
		case "app-fcoe-mode":
			valueJSON = getSettingDcbAppFcoeModeJSON(data)
		case "app-fcoe-priority":
			valueJSON = getSettingDcbAppFcoePriorityJSON(data)
		case "app-fip-flags":
			valueJSON = getSettingDcbAppFipFlagsJSON(data)
		case "app-fip-priority":
			valueJSON = getSettingDcbAppFipPriorityJSON(data)
		case "app-iscsi-flags":
			valueJSON = getSettingDcbAppIscsiFlagsJSON(data)
		case "app-iscsi-priority":
			valueJSON = getSettingDcbAppIscsiPriorityJSON(data)
		case "priority-bandwidth":
			valueJSON = getSettingDcbPriorityBandwidthJSON(data)
		case "priority-flow-control":
			valueJSON = getSettingDcbPriorityFlowControlJSON(data)
		case "priority-flow-control-flags":
			valueJSON = getSettingDcbPriorityFlowControlFlagsJSON(data)
		case "priority-group-bandwidth":
			valueJSON = getSettingDcbPriorityGroupBandwidthJSON(data)
		case "priority-group-flags":
			valueJSON = getSettingDcbPriorityGroupFlagsJSON(data)
		case "priority-group-id":
			valueJSON = getSettingDcbPriorityGroupIdJSON(data)
		case "priority-strict-bandwidth":
			valueJSON = getSettingDcbPriorityStrictBandwidthJSON(data)
		case "priority-traffic-class":
			valueJSON = getSettingDcbPriorityTrafficClassJSON(data)
		}
	case "generic":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		}
	case "gsm":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "apn":
			valueJSON = getSettingGsmApnJSON(data)
		case "device-id":
			valueJSON = getSettingGsmDeviceIdJSON(data)
		case "home-only":
			valueJSON = getSettingGsmHomeOnlyJSON(data)
		case "network-id":
			valueJSON = getSettingGsmNetworkIdJSON(data)
		case "number":
			valueJSON = getSettingGsmNumberJSON(data)
		case "password":
			valueJSON = getSettingGsmPasswordJSON(data)
		case "password-flags":
			valueJSON = getSettingGsmPasswordFlagsJSON(data)
		case "pin":
			valueJSON = getSettingGsmPinJSON(data)
		case "pin-flags":
			valueJSON = getSettingGsmPinFlagsJSON(data)
		case "sim-id":
			valueJSON = getSettingGsmSimIdJSON(data)
		case "sim-operator-id":
			valueJSON = getSettingGsmSimOperatorIdJSON(data)
		case "username":
			valueJSON = getSettingGsmUsernameJSON(data)
		}
	case "infiniband":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "mac-address":
			valueJSON = getSettingInfinibandMacAddressJSON(data)
		case "mtu":
			valueJSON = getSettingInfinibandMtuJSON(data)
		case "p-key":
			valueJSON = getSettingInfinibandPKeyJSON(data)
		case "parent":
			valueJSON = getSettingInfinibandParentJSON(data)
		case "transport-mode":
			valueJSON = getSettingInfinibandTransportModeJSON(data)
		}
	case "ipv4":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "addresses":
			valueJSON = getSettingIP4ConfigAddressesJSON(data)
		case "dad-timeout":
			valueJSON = getSettingIP4ConfigDadTimeoutJSON(data)
		case "dhcp-client-id":
			valueJSON = getSettingIP4ConfigDhcpClientIdJSON(data)
		case "dhcp-fqdn":
			valueJSON = getSettingIP4ConfigDhcpFqdnJSON(data)
		case "dhcp-hostname":
			valueJSON = getSettingIP4ConfigDhcpHostnameJSON(data)
		case "dhcp-send-hostname":
			valueJSON = getSettingIP4ConfigDhcpSendHostnameJSON(data)
		case "dhcp-timeout":
			valueJSON = getSettingIP4ConfigDhcpTimeoutJSON(data)
		case "dns":
			valueJSON = getSettingIP4ConfigDnsJSON(data)
		case "dns-options":
			valueJSON = getSettingIP4ConfigDnsOptionsJSON(data)
		case "dns-priority":
			valueJSON = getSettingIP4ConfigDnsPriorityJSON(data)
		case "dns-search":
			valueJSON = getSettingIP4ConfigDnsSearchJSON(data)
		case "gateway":
			valueJSON = getSettingIP4ConfigGatewayJSON(data)
		case "ignore-auto-dns":
			valueJSON = getSettingIP4ConfigIgnoreAutoDnsJSON(data)
		case "ignore-auto-routes":
			valueJSON = getSettingIP4ConfigIgnoreAutoRoutesJSON(data)
		case "may-fail":
			valueJSON = getSettingIP4ConfigMayFailJSON(data)
		case "method":
			valueJSON = getSettingIP4ConfigMethodJSON(data)
		case "never-default":
			valueJSON = getSettingIP4ConfigNeverDefaultJSON(data)
		case "route-metric":
			valueJSON = getSettingIP4ConfigRouteMetricJSON(data)
		case "routes":
			valueJSON = getSettingIP4ConfigRoutesJSON(data)
		}
	case "ipv6":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "addr-gen-mode":
			valueJSON = getSettingIP6ConfigAddrGenModeJSON(data)
		case "addresses":
			valueJSON = getSettingIP6ConfigAddressesJSON(data)
		case "dad-timeout":
			valueJSON = getSettingIP6ConfigDadTimeoutJSON(data)
		case "dhcp-hostname":
			valueJSON = getSettingIP6ConfigDhcpHostnameJSON(data)
		case "dhcp-send-hostname":
			valueJSON = getSettingIP6ConfigDhcpSendHostnameJSON(data)
		case "dhcp-timeout":
			valueJSON = getSettingIP6ConfigDhcpTimeoutJSON(data)
		case "dns":
			valueJSON = getSettingIP6ConfigDnsJSON(data)
		case "dns-options":
			valueJSON = getSettingIP6ConfigDnsOptionsJSON(data)
		case "dns-priority":
			valueJSON = getSettingIP6ConfigDnsPriorityJSON(data)
		case "dns-search":
			valueJSON = getSettingIP6ConfigDnsSearchJSON(data)
		case "gateway":
			valueJSON = getSettingIP6ConfigGatewayJSON(data)
		case "ignore-auto-dns":
			valueJSON = getSettingIP6ConfigIgnoreAutoDnsJSON(data)
		case "ignore-auto-routes":
			valueJSON = getSettingIP6ConfigIgnoreAutoRoutesJSON(data)
		case "ip6-privacy":
			valueJSON = getSettingIP6ConfigIp6PrivacyJSON(data)
		case "may-fail":
			valueJSON = getSettingIP6ConfigMayFailJSON(data)
		case "method":
			valueJSON = getSettingIP6ConfigMethodJSON(data)
		case "never-default":
			valueJSON = getSettingIP6ConfigNeverDefaultJSON(data)
		case "route-metric":
			valueJSON = getSettingIP6ConfigRouteMetricJSON(data)
		case "routes":
			valueJSON = getSettingIP6ConfigRoutesJSON(data)
		case "token":
			valueJSON = getSettingIP6ConfigTokenJSON(data)
		}
	case "ip-tunnel":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "encapsulation-limit":
			valueJSON = getSettingIPTunnelEncapsulationLimitJSON(data)
		case "flow-label":
			valueJSON = getSettingIPTunnelFlowLabelJSON(data)
		case "input-key":
			valueJSON = getSettingIPTunnelInputKeyJSON(data)
		case "local":
			valueJSON = getSettingIPTunnelLocalJSON(data)
		case "mode":
			valueJSON = getSettingIPTunnelModeJSON(data)
		case "mtu":
			valueJSON = getSettingIPTunnelMtuJSON(data)
		case "output-key":
			valueJSON = getSettingIPTunnelOutputKeyJSON(data)
		case "parent":
			valueJSON = getSettingIPTunnelParentJSON(data)
		case "path-mtu-discovery":
			valueJSON = getSettingIPTunnelPathMtuDiscoveryJSON(data)
		case "remote":
			valueJSON = getSettingIPTunnelRemoteJSON(data)
		case "tos":
			valueJSON = getSettingIPTunnelTosJSON(data)
		case "ttl":
			valueJSON = getSettingIPTunnelTtlJSON(data)
		}
	case "macvlan":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "mode":
			valueJSON = getSettingMacvlanModeJSON(data)
		case "parent":
			valueJSON = getSettingMacvlanParentJSON(data)
		case "promiscuous":
			valueJSON = getSettingMacvlanPromiscuousJSON(data)
		case "tap":
			valueJSON = getSettingMacvlanTapJSON(data)
		}
	case "802-11-olpc-mesh":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "channel":
			valueJSON = getSettingOlpcMeshChannelJSON(data)
		case "dhcp-anycast-address":
			valueJSON = getSettingOlpcMeshDhcpAnycastAddressJSON(data)
		case "ssid":
			valueJSON = getSettingOlpcMeshSsidJSON(data)
		}
	case "ppp":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "baud":
			valueJSON = getSettingPppBaudJSON(data)
		case "crtscts":
			valueJSON = getSettingPppCrtsctsJSON(data)
		case "lcp-echo-failure":
			valueJSON = getSettingPppLcpEchoFailureJSON(data)
		case "lcp-echo-interval":
			valueJSON = getSettingPppLcpEchoIntervalJSON(data)
		case "mppe-stateful":
			valueJSON = getSettingPppMppeStatefulJSON(data)
		case "mru":
			valueJSON = getSettingPppMruJSON(data)
		case "mtu":
			valueJSON = getSettingPppMtuJSON(data)
		case "no-vj-comp":
			valueJSON = getSettingPppNoVjCompJSON(data)
		case "noauth":
			valueJSON = getSettingPppNoauthJSON(data)
		case "nobsdcomp":
			valueJSON = getSettingPppNobsdcompJSON(data)
		case "nodeflate":
			valueJSON = getSettingPppNodeflateJSON(data)
		case "refuse-chap":
			valueJSON = getSettingPppRefuseChapJSON(data)
		case "refuse-eap":
			valueJSON = getSettingPppRefuseEapJSON(data)
		case "refuse-mschap":
			valueJSON = getSettingPppRefuseMschapJSON(data)
		case "refuse-mschapv2":
			valueJSON = getSettingPppRefuseMschapv2JSON(data)
		case "refuse-pap":
			valueJSON = getSettingPppRefusePapJSON(data)
		case "require-mppe":
			valueJSON = getSettingPppRequireMppeJSON(data)
		case "require-mppe-128":
			valueJSON = getSettingPppRequireMppe128JSON(data)
		}
	case "pppoe":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "password":
			valueJSON = getSettingPppoePasswordJSON(data)
		case "password-flags":
			valueJSON = getSettingPppoePasswordFlagsJSON(data)
		case "service":
			valueJSON = getSettingPppoeServiceJSON(data)
		case "username":
			valueJSON = getSettingPppoeUsernameJSON(data)
		}
	case "serial":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "baud":
			valueJSON = getSettingSerialBaudJSON(data)
		case "bits":
			valueJSON = getSettingSerialBitsJSON(data)
		case "parity":
			valueJSON = getSettingSerialParityJSON(data)
		case "send-delay":
			valueJSON = getSettingSerialSendDelayJSON(data)
		case "stopbits":
			valueJSON = getSettingSerialStopbitsJSON(data)
		}
	case "team":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "config":
			valueJSON = getSettingTeamConfigJSON(data)
		}
	case "team-port":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "config":
			valueJSON = getSettingTeamPortConfigJSON(data)
		}
	case "tun":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "group":
			valueJSON = getSettingTunGroupJSON(data)
		case "mode":
			valueJSON = getSettingTunModeJSON(data)
		case "multi-queue":
			valueJSON = getSettingTunMultiQueueJSON(data)
		case "owner":
			valueJSON = getSettingTunOwnerJSON(data)
		case "pi":
			valueJSON = getSettingTunPiJSON(data)
		case "vnet-hdr":
			valueJSON = getSettingTunVnetHdrJSON(data)
		}
	case "vlan":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "egress-priority-map":
			valueJSON = getSettingVlanEgressPriorityMapJSON(data)
		case "flags":
			valueJSON = getSettingVlanFlagsJSON(data)
		case "id":
			valueJSON = getSettingVlanIdJSON(data)
		case "ingress-priority-map":
			valueJSON = getSettingVlanIngressPriorityMapJSON(data)
		case "parent":
			valueJSON = getSettingVlanParentJSON(data)
		}
	case "vpn":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "data":
			valueJSON = getSettingVpnDataJSON(data)
		case "persistent":
			valueJSON = getSettingVpnPersistentJSON(data)
		case "secrets":
			valueJSON = getSettingVpnSecretsJSON(data)
		case "service-type":
			valueJSON = getSettingVpnServiceTypeJSON(data)
		case "timeout":
			valueJSON = getSettingVpnTimeoutJSON(data)
		case "user-name":
			valueJSON = getSettingVpnUserNameJSON(data)
		}
	case "vxlan":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "ageing":
			valueJSON = getSettingVxlanAgeingJSON(data)
		case "destination-port":
			valueJSON = getSettingVxlanDestinationPortJSON(data)
		case "id":
			valueJSON = getSettingVxlanIdJSON(data)
		case "l2-miss":
			valueJSON = getSettingVxlanL2MissJSON(data)
		case "l3-miss":
			valueJSON = getSettingVxlanL3MissJSON(data)
		case "learning":
			valueJSON = getSettingVxlanLearningJSON(data)
		case "limit":
			valueJSON = getSettingVxlanLimitJSON(data)
		case "local":
			valueJSON = getSettingVxlanLocalJSON(data)
		case "parent":
			valueJSON = getSettingVxlanParentJSON(data)
		case "proxy":
			valueJSON = getSettingVxlanProxyJSON(data)
		case "remote":
			valueJSON = getSettingVxlanRemoteJSON(data)
		case "rsc":
			valueJSON = getSettingVxlanRscJSON(data)
		case "source-port-max":
			valueJSON = getSettingVxlanSourcePortMaxJSON(data)
		case "source-port-min":
			valueJSON = getSettingVxlanSourcePortMinJSON(data)
		case "tos":
			valueJSON = getSettingVxlanTosJSON(data)
		case "ttl":
			valueJSON = getSettingVxlanTtlJSON(data)
		}
	case "wimax":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "mac-address":
			valueJSON = getSettingWimaxMacAddressJSON(data)
		case "network-name":
			valueJSON = getSettingWimaxNetworkNameJSON(data)
		}
	case "802-3-ethernet":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "auto-negotiate":
			valueJSON = getSettingWiredAutoNegotiateJSON(data)
		case "cloned-mac-address":
			valueJSON = getSettingWiredClonedMacAddressJSON(data)
		case "duplex":
			valueJSON = getSettingWiredDuplexJSON(data)
		case "generate-mac-address-mask":
			valueJSON = getSettingWiredGenerateMacAddressMaskJSON(data)
		case "mac-address":
			valueJSON = getSettingWiredMacAddressJSON(data)
		case "mac-address-blacklist":
			valueJSON = getSettingWiredMacAddressBlacklistJSON(data)
		case "mtu":
			valueJSON = getSettingWiredMtuJSON(data)
		case "port":
			valueJSON = getSettingWiredPortJSON(data)
		case "s390-nettype":
			valueJSON = getSettingWiredS390NettypeJSON(data)
		case "s390-options":
			valueJSON = getSettingWiredS390OptionsJSON(data)
		case "s390-subchannels":
			valueJSON = getSettingWiredS390SubchannelsJSON(data)
		case "speed":
			valueJSON = getSettingWiredSpeedJSON(data)
		case "wake-on-lan":
			valueJSON = getSettingWiredWakeOnLanJSON(data)
		case "wake-on-lan-password":
			valueJSON = getSettingWiredWakeOnLanPasswordJSON(data)
		}
	case "802-11-wireless":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "band":
			valueJSON = getSettingWirelessBandJSON(data)
		case "bssid":
			valueJSON = getSettingWirelessBssidJSON(data)
		case "channel":
			valueJSON = getSettingWirelessChannelJSON(data)
		case "cloned-mac-address":
			valueJSON = getSettingWirelessClonedMacAddressJSON(data)
		case "generate-mac-address-mask":
			valueJSON = getSettingWirelessGenerateMacAddressMaskJSON(data)
		case "hidden":
			valueJSON = getSettingWirelessHiddenJSON(data)
		case "mac-address":
			valueJSON = getSettingWirelessMacAddressJSON(data)
		case "mac-address-blacklist":
			valueJSON = getSettingWirelessMacAddressBlacklistJSON(data)
		case "mac-address-randomization":
			valueJSON = getSettingWirelessMacAddressRandomizationJSON(data)
		case "mode":
			valueJSON = getSettingWirelessModeJSON(data)
		case "mtu":
			valueJSON = getSettingWirelessMtuJSON(data)
		case "powersave":
			valueJSON = getSettingWirelessPowersaveJSON(data)
		case "rate":
			valueJSON = getSettingWirelessRateJSON(data)
		case "seen-bssids":
			valueJSON = getSettingWirelessSeenBssidsJSON(data)
		case "ssid":
			valueJSON = getSettingWirelessSsidJSON(data)
		case "tx-power":
			valueJSON = getSettingWirelessTxPowerJSON(data)
		}
	case "802-11-wireless-security":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "auth-alg":
			valueJSON = getSettingWirelessSecurityAuthAlgJSON(data)
		case "group":
			valueJSON = getSettingWirelessSecurityGroupJSON(data)
		case "key-mgmt":
			valueJSON = getSettingWirelessSecurityKeyMgmtJSON(data)
		case "leap-password":
			valueJSON = getSettingWirelessSecurityLeapPasswordJSON(data)
		case "leap-password-flags":
			valueJSON = getSettingWirelessSecurityLeapPasswordFlagsJSON(data)
		case "leap-username":
			valueJSON = getSettingWirelessSecurityLeapUsernameJSON(data)
		case "pairwise":
			valueJSON = getSettingWirelessSecurityPairwiseJSON(data)
		case "proto":
			valueJSON = getSettingWirelessSecurityProtoJSON(data)
		case "psk":
			valueJSON = getSettingWirelessSecurityPskJSON(data)
		case "psk-flags":
			valueJSON = getSettingWirelessSecurityPskFlagsJSON(data)
		case "wep-key-flags":
			valueJSON = getSettingWirelessSecurityWepKeyFlagsJSON(data)
		case "wep-key-type":
			valueJSON = getSettingWirelessSecurityWepKeyTypeJSON(data)
		case "wep-key0":
			valueJSON = getSettingWirelessSecurityWepKey0JSON(data)
		case "wep-key1":
			valueJSON = getSettingWirelessSecurityWepKey1JSON(data)
		case "wep-key2":
			valueJSON = getSettingWirelessSecurityWepKey2JSON(data)
		case "wep-key3":
			valueJSON = getSettingWirelessSecurityWepKey3JSON(data)
		case "wep-tx-keyidx":
			valueJSON = getSettingWirelessSecurityWepTxKeyidxJSON(data)
		}
	case "alias-vpn-l2tp":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "gateway":
			valueJSON = getSettingVpnL2tpKeyGatewayJSON(data)
		case "user":
			valueJSON = getSettingVpnL2tpKeyUserJSON(data)
		case "password-flags":
			valueJSON = getSettingVpnL2tpKeyPasswordFlagsJSON(data)
		case "password":
			valueJSON = getSettingVpnL2tpKeyPasswordJSON(data)
		case "domain":
			valueJSON = getSettingVpnL2tpKeyDomainJSON(data)
		}
	case "alias-vpn-l2tp-ppp":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "require-mppe":
			valueJSON = getSettingVpnL2tpKeyRequireMppeJSON(data)
		case "require-mppe-40":
			valueJSON = getSettingVpnL2tpKeyRequireMppe40JSON(data)
		case "require-mppe-128":
			valueJSON = getSettingVpnL2tpKeyRequireMppe128JSON(data)
		case "mppe-stateful":
			valueJSON = getSettingVpnL2tpKeyMppeStatefulJSON(data)
		case "refuse-eap":
			valueJSON = getSettingVpnL2tpKeyRefuseEapJSON(data)
		case "refuse-pap":
			valueJSON = getSettingVpnL2tpKeyRefusePapJSON(data)
		case "refuse-chap":
			valueJSON = getSettingVpnL2tpKeyRefuseChapJSON(data)
		case "refuse-mschap":
			valueJSON = getSettingVpnL2tpKeyRefuseMschapJSON(data)
		case "refuse-mschapv2":
			valueJSON = getSettingVpnL2tpKeyRefuseMschapv2JSON(data)
		case "nobsdcomp":
			valueJSON = getSettingVpnL2tpKeyNobsdcompJSON(data)
		case "nodeflate":
			valueJSON = getSettingVpnL2tpKeyNodeflateJSON(data)
		case "no-vj-comp":
			valueJSON = getSettingVpnL2tpKeyNoVjCompJSON(data)
		case "nopcomp":
			valueJSON = getSettingVpnL2tpKeyNoPcompJSON(data)
		case "noaccomp":
			valueJSON = getSettingVpnL2tpKeyNoAccompJSON(data)
		case "lcp-echo-failure":
			valueJSON = getSettingVpnL2tpKeyLcpEchoFailureJSON(data)
		case "lcp-echo-interval":
			valueJSON = getSettingVpnL2tpKeyLcpEchoIntervalJSON(data)
		}
	case "alias-vpn-l2tp-ipsec":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "ipsec-enabled":
			valueJSON = getSettingVpnL2tpKeyIpsecEnableJSON(data)
		case "ipsec-group-name":
			valueJSON = getSettingVpnL2tpKeyIpsecGroupNameJSON(data)
		case "ipsec-gateway-id":
			valueJSON = getSettingVpnL2tpKeyIpsecGatewayIdJSON(data)
		case "ipsec-psk":
			valueJSON = getSettingVpnL2tpKeyIpsecPskJSON(data)
		}
	case "alias-vpn-openconnect":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "gateway":
			valueJSON = getSettingVpnOpenconnectKeyGatewayJSON(data)
		case "cacert":
			valueJSON = getSettingVpnOpenconnectKeyCacertJSON(data)
		case "proxy":
			valueJSON = getSettingVpnOpenconnectKeyProxyJSON(data)
		case "enable_csd_trojan":
			valueJSON = getSettingVpnOpenconnectKeyCsdEnableJSON(data)
		case "csd_wrapper":
			valueJSON = getSettingVpnOpenconnectKeyCsdWrapperJSON(data)
		case "usercert":
			valueJSON = getSettingVpnOpenconnectKeyUsercertJSON(data)
		case "userkey":
			valueJSON = getSettingVpnOpenconnectKeyPrivkeyJSON(data)
		case "pem_passphrase_fsid":
			valueJSON = getSettingVpnOpenconnectKeyPemPassphraseFsidJSON(data)
		case "cookie":
			valueJSON = getSettingVpnOpenconnectKeyCookieJSON(data)
		case "gwcert":
			valueJSON = getSettingVpnOpenconnectKeyGwcertJSON(data)
		case "authtype":
			valueJSON = getSettingVpnOpenconnectKeyAuthtypeJSON(data)
		case "mtu":
			valueJSON = getSettingVpnOpenconnectKeyMtuJSON(data)
		case "stoken_source":
			valueJSON = getSettingVpnOpenconnectKeyStokenSourceJSON(data)
		case "stoken_string":
			valueJSON = getSettingVpnOpenconnectKeyStokenStringJSON(data)
		}
	case "alias-vpn-openvpn":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "remote":
			valueJSON = getSettingVpnOpenvpnKeyRemoteJSON(data)
		case "connection-type":
			valueJSON = getSettingVpnOpenvpnKeyConnectionTypeJSON(data)
		case "username":
			valueJSON = getSettingVpnOpenvpnKeyUsernameJSON(data)
		case "password-flags":
			valueJSON = getSettingVpnOpenvpnKeyPasswordFlagsJSON(data)
		case "password":
			valueJSON = getSettingVpnOpenvpnKeyPasswordJSON(data)
		case "ca":
			valueJSON = getSettingVpnOpenvpnKeyCaJSON(data)
		case "cert":
			valueJSON = getSettingVpnOpenvpnKeyCertJSON(data)
		case "key":
			valueJSON = getSettingVpnOpenvpnKeyKeyJSON(data)
		case "cert-pass-flags":
			valueJSON = getSettingVpnOpenvpnKeyCertpassFlagsJSON(data)
		case "cert-pass":
			valueJSON = getSettingVpnOpenvpnKeyCertpassJSON(data)
		case "static-key":
			valueJSON = getSettingVpnOpenvpnKeyStaticKeyJSON(data)
		case "static-key-direction":
			valueJSON = getSettingVpnOpenvpnKeyStaticKeyDirectionJSON(data)
		case "remote-ip":
			valueJSON = getSettingVpnOpenvpnKeyRemoteIpJSON(data)
		case "local-ip":
			valueJSON = getSettingVpnOpenvpnKeyLocalIpJSON(data)
		}
	case "alias-vpn-openvpn-advanced":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "port":
			valueJSON = getSettingVpnOpenvpnKeyPortJSON(data)
		case "reneg-seconds":
			valueJSON = getSettingVpnOpenvpnKeyRenegSecondsJSON(data)
		case "comp-lzo":
			valueJSON = getSettingVpnOpenvpnKeyCompLzoJSON(data)
		case "proto-tcp":
			valueJSON = getSettingVpnOpenvpnKeyProtoTcpJSON(data)
		case "tap-dev":
			valueJSON = getSettingVpnOpenvpnKeyTapDevJSON(data)
		case "tunnel-mtu":
			valueJSON = getSettingVpnOpenvpnKeyTunnelMtuJSON(data)
		case "fragment-size":
			valueJSON = getSettingVpnOpenvpnKeyFragmentSizeJSON(data)
		case "mssfix":
			valueJSON = getSettingVpnOpenvpnKeyMssfixJSON(data)
		case "remote-random":
			valueJSON = getSettingVpnOpenvpnKeyRemoteRandomJSON(data)
		}
	case "alias-vpn-openvpn-security":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "cipher":
			valueJSON = getSettingVpnOpenvpnKeyCipherJSON(data)
		case "auth":
			valueJSON = getSettingVpnOpenvpnKeyAuthJSON(data)
		}
	case "alias-vpn-openvpn-tlsauth":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "tls-remote":
			valueJSON = getSettingVpnOpenvpnKeyTlsRemoteJSON(data)
		case "remote-cert-tls":
			valueJSON = getSettingVpnOpenvpnKeyRemoteCertTlsJSON(data)
		case "ta":
			valueJSON = getSettingVpnOpenvpnKeyTaJSON(data)
		case "ta-dir":
			valueJSON = getSettingVpnOpenvpnKeyTaDirJSON(data)
		}
	case "alias-vpn-openvpn-proxies":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "proxy-type":
			valueJSON = getSettingVpnOpenvpnKeyProxyTypeJSON(data)
		case "proxy-server":
			valueJSON = getSettingVpnOpenvpnKeyProxyServerJSON(data)
		case "proxy-port":
			valueJSON = getSettingVpnOpenvpnKeyProxyPortJSON(data)
		case "proxy-retry":
			valueJSON = getSettingVpnOpenvpnKeyProxyRetryJSON(data)
		case "http-proxy-username":
			valueJSON = getSettingVpnOpenvpnKeyHttpProxyUsernameJSON(data)
		case "http-proxy-password":
			valueJSON = getSettingVpnOpenvpnKeyHttpProxyPasswordJSON(data)
		case "http-proxy-password-flags":
			valueJSON = getSettingVpnOpenvpnKeyHttpProxyPasswordFlagsJSON(data)
		}
	case "alias-vpn-pptp":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "gateway":
			valueJSON = getSettingVpnPptpKeyGatewayJSON(data)
		case "user":
			valueJSON = getSettingVpnPptpKeyUserJSON(data)
		case "password-flags":
			valueJSON = getSettingVpnPptpKeyPasswordFlagsJSON(data)
		case "password":
			valueJSON = getSettingVpnPptpKeyPasswordJSON(data)
		case "domain":
			valueJSON = getSettingVpnPptpKeyDomainJSON(data)
		}
	case "alias-vpn-pptp-ppp":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "require-mppe":
			valueJSON = getSettingVpnPptpKeyRequireMppeJSON(data)
		case "require-mppe-40":
			valueJSON = getSettingVpnPptpKeyRequireMppe40JSON(data)
		case "require-mppe-128":
			valueJSON = getSettingVpnPptpKeyRequireMppe128JSON(data)
		case "mppe-stateful":
			valueJSON = getSettingVpnPptpKeyMppeStatefulJSON(data)
		case "refuse-eap":
			valueJSON = getSettingVpnPptpKeyRefuseEapJSON(data)
		case "refuse-pap":
			valueJSON = getSettingVpnPptpKeyRefusePapJSON(data)
		case "refuse-chap":
			valueJSON = getSettingVpnPptpKeyRefuseChapJSON(data)
		case "refuse-mschap":
			valueJSON = getSettingVpnPptpKeyRefuseMschapJSON(data)
		case "refuse-mschapv2":
			valueJSON = getSettingVpnPptpKeyRefuseMschapv2JSON(data)
		case "nobsdcomp":
			valueJSON = getSettingVpnPptpKeyNobsdcompJSON(data)
		case "nodeflate":
			valueJSON = getSettingVpnPptpKeyNodeflateJSON(data)
		case "no-vj-comp":
			valueJSON = getSettingVpnPptpKeyNoVjCompJSON(data)
		case "lcp-echo-failure":
			valueJSON = getSettingVpnPptpKeyLcpEchoFailureJSON(data)
		case "lcp-echo-interval":
			valueJSON = getSettingVpnPptpKeyLcpEchoIntervalJSON(data)
		}
	case "alias-vpn-strongswan":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "address":
			valueJSON = getSettingVpnStrongswanKeyAddressJSON(data)
		case "certificate":
			valueJSON = getSettingVpnStrongswanKeyCertificateJSON(data)
		case "method":
			valueJSON = getSettingVpnStrongswanKeyMethodJSON(data)
		case "user":
			valueJSON = getSettingVpnStrongswanKeyUserJSON(data)
		case "usercert":
			valueJSON = getSettingVpnStrongswanKeyUsercertJSON(data)
		case "userkey":
			valueJSON = getSettingVpnStrongswanKeyUserkeyJSON(data)
		case "password":
			valueJSON = getSettingVpnStrongswanKeyPasswordJSON(data)
		case "password-flags":
			valueJSON = getSettingVpnStrongswanKeyPasswordFlagsJSON(data)
		case "virtual":
			valueJSON = getSettingVpnStrongswanKeyVirtualJSON(data)
		case "encap":
			valueJSON = getSettingVpnStrongswanKeyEncapJSON(data)
		case "ipcomp":
			valueJSON = getSettingVpnStrongswanKeyIpcompJSON(data)
		}
	case "alias-vpn-vpnc":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "IPSec gateway":
			valueJSON = getSettingVpnVpncKeyGatewayJSON(data)
		case "Xauth username":
			valueJSON = getSettingVpnVpncKeyXauthUserJSON(data)
		case "xauth-password-type":
			valueJSON = getSettingVpnVpncKeyXauthPasswordTypeJSON(data)
		case "Xauth password-flags":
			valueJSON = getSettingVpnVpncKeyXauthPasswordFlagsJSON(data)
		case "Xauth password":
			valueJSON = getSettingVpnVpncKeyXauthPasswordJSON(data)
		case "IPSec ID":
			valueJSON = getSettingVpnVpncKeyIdJSON(data)
		case "ipsec-secret-type":
			valueJSON = getSettingVpnVpncKeySecretTypeJSON(data)
		case "IPSec secret-flags":
			valueJSON = getSettingVpnVpncKeySecretFlagsJSON(data)
		case "IPSec secret":
			valueJSON = getSettingVpnVpncKeySecretJSON(data)
		case "IKE Authmode":
			valueJSON = getSettingVpnVpncKeyAuthmodeJSON(data)
		case "CA-File":
			valueJSON = getSettingVpnVpncKeyCaFileJSON(data)
		}
	case "alias-vpn-vpnc-advanced":
		switch key {
		default:
			logger.Error("getSettingKeyJSON: invalide key", section, key)
		case "Domain":
			valueJSON = getSettingVpnVpncKeyDomainJSON(data)
		case "Vendor":
			valueJSON = getSettingVpnVpncKeyVendorJSON(data)
		case "Application Version":
			valueJSON = getSettingVpnVpncKeyAppVersionJSON(data)
		case "Enable Single DES":
			valueJSON = getSettingVpnVpncKeySingleDesJSON(data)
		case "Enable no encryption":
			valueJSON = getSettingVpnVpncKeyNoEncryptionJSON(data)
		case "NAT Traversal Mode":
			valueJSON = getSettingVpnVpncKeyNatTraversalModeJSON(data)
		case "IKE DH Group":
			valueJSON = getSettingVpnVpncKeyDhgroupJSON(data)
		case "Perfect Forward Secrecy":
			valueJSON = getSettingVpnVpncKeyPerfectForwardJSON(data)
		case "Local Port":
			valueJSON = getSettingVpnVpncKeyLocalPortJSON(data)
		case "DPD idle timeout (our side)":
			valueJSON = getSettingVpnVpncKeyDpdIdleTimeoutJSON(data)
		case "Cisco UDP Encapsulation Port":
			valueJSON = getSettingVpnVpncKeyCiscoUdpEncapsPortJSON(data)
		}
	}
	return
}

// Generally JSON setter
func generalSetSettingKeyJSON(data connectionData, section, key, valueJSON string) (err error) {
	if isVirtualKey(section, key) {
		err = generalSetVkeyJSON(data, section, key, valueJSON)
		return
	}
	switch section {
	default:
		err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
		logger.Error(err)
	case "802-1x":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "altsubject-matches":
			err = setSetting8021xAltsubjectMatchesJSON(data, valueJSON)
		case "anonymous-identity":
			err = setSetting8021xAnonymousIdentityJSON(data, valueJSON)
		case "ca-cert":
			err = setSetting8021xCaCertJSON(data, valueJSON)
		case "ca-path":
			err = setSetting8021xCaPathJSON(data, valueJSON)
		case "client-cert":
			err = setSetting8021xClientCertJSON(data, valueJSON)
		case "domain-suffix-match":
			err = setSetting8021xDomainSuffixMatchJSON(data, valueJSON)
		case "eap":
			err = logicSetSetting8021xEapJSON(data, valueJSON)
		case "identity":
			err = setSetting8021xIdentityJSON(data, valueJSON)
		case "pac-file":
			err = setSetting8021xPacFileJSON(data, valueJSON)
		case "password":
			err = setSetting8021xPasswordJSON(data, valueJSON)
		case "password-flags":
			err = setSetting8021xPasswordFlagsJSON(data, valueJSON)
		case "password-raw":
			err = setSetting8021xPasswordRawJSON(data, valueJSON)
		case "password-raw-flags":
			err = setSetting8021xPasswordRawFlagsJSON(data, valueJSON)
		case "phase1-fast-provisioning":
			err = setSetting8021xPhase1FastProvisioningJSON(data, valueJSON)
		case "phase1-peaplabel":
			err = setSetting8021xPhase1PeaplabelJSON(data, valueJSON)
		case "phase1-peapver":
			err = setSetting8021xPhase1PeapverJSON(data, valueJSON)
		case "phase2-altsubject-matches":
			err = setSetting8021xPhase2AltsubjectMatchesJSON(data, valueJSON)
		case "phase2-auth":
			err = setSetting8021xPhase2AuthJSON(data, valueJSON)
		case "phase2-autheap":
			err = setSetting8021xPhase2AutheapJSON(data, valueJSON)
		case "phase2-ca-cert":
			err = setSetting8021xPhase2CaCertJSON(data, valueJSON)
		case "phase2-ca-path":
			err = setSetting8021xPhase2CaPathJSON(data, valueJSON)
		case "phase2-client-cert":
			err = setSetting8021xPhase2ClientCertJSON(data, valueJSON)
		case "phase2-domain-suffix-match":
			err = setSetting8021xPhase2DomainSuffixMatchJSON(data, valueJSON)
		case "phase2-private-key":
			err = setSetting8021xPhase2PrivateKeyJSON(data, valueJSON)
		case "phase2-private-key-password":
			err = setSetting8021xPhase2PrivateKeyPasswordJSON(data, valueJSON)
		case "phase2-private-key-password-flags":
			err = setSetting8021xPhase2PrivateKeyPasswordFlagsJSON(data, valueJSON)
		case "phase2-subject-match":
			err = setSetting8021xPhase2SubjectMatchJSON(data, valueJSON)
		case "pin":
			err = setSetting8021xPinJSON(data, valueJSON)
		case "pin-flags":
			err = setSetting8021xPinFlagsJSON(data, valueJSON)
		case "private-key":
			err = setSetting8021xPrivateKeyJSON(data, valueJSON)
		case "private-key-password":
			err = setSetting8021xPrivateKeyPasswordJSON(data, valueJSON)
		case "private-key-password-flags":
			err = setSetting8021xPrivateKeyPasswordFlagsJSON(data, valueJSON)
		case "subject-match":
			err = setSetting8021xSubjectMatchJSON(data, valueJSON)
		case "system-ca-certs":
			err = setSetting8021xSystemCaCertsJSON(data, valueJSON)
		}
	case "adsl":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "encapsulation":
			err = setSettingAdslEncapsulationJSON(data, valueJSON)
		case "password":
			err = setSettingAdslPasswordJSON(data, valueJSON)
		case "password-flags":
			err = setSettingAdslPasswordFlagsJSON(data, valueJSON)
		case "protocol":
			err = setSettingAdslProtocolJSON(data, valueJSON)
		case "username":
			err = setSettingAdslUsernameJSON(data, valueJSON)
		case "vci":
			err = setSettingAdslVciJSON(data, valueJSON)
		case "vpi":
			err = setSettingAdslVpiJSON(data, valueJSON)
		}
	case "bluetooth":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "bdaddr":
			err = setSettingBluetoothBdaddrJSON(data, valueJSON)
		case "type":
			err = setSettingBluetoothTypeJSON(data, valueJSON)
		}
	case "bond":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "options":
			err = setSettingBondOptionsJSON(data, valueJSON)
		}
	case "bridge":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "ageing-time":
			err = setSettingBridgeAgeingTimeJSON(data, valueJSON)
		case "forward-delay":
			err = setSettingBridgeForwardDelayJSON(data, valueJSON)
		case "hello-time":
			err = setSettingBridgeHelloTimeJSON(data, valueJSON)
		case "mac-address":
			err = setSettingBridgeMacAddressJSON(data, valueJSON)
		case "max-age":
			err = setSettingBridgeMaxAgeJSON(data, valueJSON)
		case "multicast-snooping":
			err = setSettingBridgeMulticastSnoopingJSON(data, valueJSON)
		case "priority":
			err = setSettingBridgePriorityJSON(data, valueJSON)
		case "stp":
			err = setSettingBridgeStpJSON(data, valueJSON)
		}
	case "bridge-port":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "hairpin-mode":
			err = setSettingBridgePortHairpinModeJSON(data, valueJSON)
		case "path-cost":
			err = setSettingBridgePortPathCostJSON(data, valueJSON)
		case "priority":
			err = setSettingBridgePortPriorityJSON(data, valueJSON)
		}
	case "cdma":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "number":
			err = setSettingCdmaNumberJSON(data, valueJSON)
		case "password":
			err = setSettingCdmaPasswordJSON(data, valueJSON)
		case "password-flags":
			err = setSettingCdmaPasswordFlagsJSON(data, valueJSON)
		case "username":
			err = setSettingCdmaUsernameJSON(data, valueJSON)
		}
	case "connection":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "autoconnect":
			err = setSettingConnectionAutoconnectJSON(data, valueJSON)
		case "autoconnect-priority":
			err = setSettingConnectionAutoconnectPriorityJSON(data, valueJSON)
		case "autoconnect-slaves":
			err = setSettingConnectionAutoconnectSlavesJSON(data, valueJSON)
		case "gateway-ping-timeout":
			err = setSettingConnectionGatewayPingTimeoutJSON(data, valueJSON)
		case "id":
			err = setSettingConnectionIdJSON(data, valueJSON)
		case "interface-name":
			err = setSettingConnectionInterfaceNameJSON(data, valueJSON)
		case "lldp":
			err = setSettingConnectionLldpJSON(data, valueJSON)
		case "master":
			err = setSettingConnectionMasterJSON(data, valueJSON)
		case "metered":
			err = setSettingConnectionMeteredJSON(data, valueJSON)
		case "permissions":
			err = setSettingConnectionPermissionsJSON(data, valueJSON)
		case "read-only":
			err = setSettingConnectionReadOnlyJSON(data, valueJSON)
		case "secondaries":
			err = setSettingConnectionSecondariesJSON(data, valueJSON)
		case "slave-type":
			err = setSettingConnectionSlaveTypeJSON(data, valueJSON)
		case "stable-id":
			err = setSettingConnectionStableIdJSON(data, valueJSON)
		case "timestamp":
			err = setSettingConnectionTimestampJSON(data, valueJSON)
		case "type":
			err = setSettingConnectionTypeJSON(data, valueJSON)
		case "uuid":
			err = setSettingConnectionUuidJSON(data, valueJSON)
		case "zone":
			err = setSettingConnectionZoneJSON(data, valueJSON)
		}
	case "dcb":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "app-fcoe-flags":
			err = setSettingDcbAppFcoeFlagsJSON(data, valueJSON)
		case "app-fcoe-mode":
			err = setSettingDcbAppFcoeModeJSON(data, valueJSON)
		case "app-fcoe-priority":
			err = setSettingDcbAppFcoePriorityJSON(data, valueJSON)
		case "app-fip-flags":
			err = setSettingDcbAppFipFlagsJSON(data, valueJSON)
		case "app-fip-priority":
			err = setSettingDcbAppFipPriorityJSON(data, valueJSON)
		case "app-iscsi-flags":
			err = setSettingDcbAppIscsiFlagsJSON(data, valueJSON)
		case "app-iscsi-priority":
			err = setSettingDcbAppIscsiPriorityJSON(data, valueJSON)
		case "priority-bandwidth":
			err = setSettingDcbPriorityBandwidthJSON(data, valueJSON)
		case "priority-flow-control":
			err = setSettingDcbPriorityFlowControlJSON(data, valueJSON)
		case "priority-flow-control-flags":
			err = setSettingDcbPriorityFlowControlFlagsJSON(data, valueJSON)
		case "priority-group-bandwidth":
			err = setSettingDcbPriorityGroupBandwidthJSON(data, valueJSON)
		case "priority-group-flags":
			err = setSettingDcbPriorityGroupFlagsJSON(data, valueJSON)
		case "priority-group-id":
			err = setSettingDcbPriorityGroupIdJSON(data, valueJSON)
		case "priority-strict-bandwidth":
			err = setSettingDcbPriorityStrictBandwidthJSON(data, valueJSON)
		case "priority-traffic-class":
			err = setSettingDcbPriorityTrafficClassJSON(data, valueJSON)
		}
	case "generic":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		}
	case "gsm":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "apn":
			err = setSettingGsmApnJSON(data, valueJSON)
		case "device-id":
			err = setSettingGsmDeviceIdJSON(data, valueJSON)
		case "home-only":
			err = setSettingGsmHomeOnlyJSON(data, valueJSON)
		case "network-id":
			err = setSettingGsmNetworkIdJSON(data, valueJSON)
		case "number":
			err = setSettingGsmNumberJSON(data, valueJSON)
		case "password":
			err = setSettingGsmPasswordJSON(data, valueJSON)
		case "password-flags":
			err = setSettingGsmPasswordFlagsJSON(data, valueJSON)
		case "pin":
			err = setSettingGsmPinJSON(data, valueJSON)
		case "pin-flags":
			err = setSettingGsmPinFlagsJSON(data, valueJSON)
		case "sim-id":
			err = setSettingGsmSimIdJSON(data, valueJSON)
		case "sim-operator-id":
			err = setSettingGsmSimOperatorIdJSON(data, valueJSON)
		case "username":
			err = setSettingGsmUsernameJSON(data, valueJSON)
		}
	case "infiniband":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "mac-address":
			err = setSettingInfinibandMacAddressJSON(data, valueJSON)
		case "mtu":
			err = setSettingInfinibandMtuJSON(data, valueJSON)
		case "p-key":
			err = setSettingInfinibandPKeyJSON(data, valueJSON)
		case "parent":
			err = setSettingInfinibandParentJSON(data, valueJSON)
		case "transport-mode":
			err = setSettingInfinibandTransportModeJSON(data, valueJSON)
		}
	case "ipv4":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "addresses":
			err = setSettingIP4ConfigAddressesJSON(data, valueJSON)
		case "dad-timeout":
			err = setSettingIP4ConfigDadTimeoutJSON(data, valueJSON)
		case "dhcp-client-id":
			err = setSettingIP4ConfigDhcpClientIdJSON(data, valueJSON)
		case "dhcp-fqdn":
			err = setSettingIP4ConfigDhcpFqdnJSON(data, valueJSON)
		case "dhcp-hostname":
			err = setSettingIP4ConfigDhcpHostnameJSON(data, valueJSON)
		case "dhcp-send-hostname":
			err = setSettingIP4ConfigDhcpSendHostnameJSON(data, valueJSON)
		case "dhcp-timeout":
			err = setSettingIP4ConfigDhcpTimeoutJSON(data, valueJSON)
		case "dns":
			err = setSettingIP4ConfigDnsJSON(data, valueJSON)
		case "dns-options":
			err = setSettingIP4ConfigDnsOptionsJSON(data, valueJSON)
		case "dns-priority":
			err = setSettingIP4ConfigDnsPriorityJSON(data, valueJSON)
		case "dns-search":
			err = setSettingIP4ConfigDnsSearchJSON(data, valueJSON)
		case "gateway":
			err = setSettingIP4ConfigGatewayJSON(data, valueJSON)
		case "ignore-auto-dns":
			err = setSettingIP4ConfigIgnoreAutoDnsJSON(data, valueJSON)
		case "ignore-auto-routes":
			err = setSettingIP4ConfigIgnoreAutoRoutesJSON(data, valueJSON)
		case "may-fail":
			err = setSettingIP4ConfigMayFailJSON(data, valueJSON)
		case "method":
			err = logicSetSettingIP4ConfigMethodJSON(data, valueJSON)
		case "never-default":
			err = setSettingIP4ConfigNeverDefaultJSON(data, valueJSON)
		case "route-metric":
			err = setSettingIP4ConfigRouteMetricJSON(data, valueJSON)
		case "routes":
			err = setSettingIP4ConfigRoutesJSON(data, valueJSON)
		}
	case "ipv6":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "addr-gen-mode":
			err = setSettingIP6ConfigAddrGenModeJSON(data, valueJSON)
		case "addresses":
			err = setSettingIP6ConfigAddressesJSON(data, valueJSON)
		case "dad-timeout":
			err = setSettingIP6ConfigDadTimeoutJSON(data, valueJSON)
		case "dhcp-hostname":
			err = setSettingIP6ConfigDhcpHostnameJSON(data, valueJSON)
		case "dhcp-send-hostname":
			err = setSettingIP6ConfigDhcpSendHostnameJSON(data, valueJSON)
		case "dhcp-timeout":
			err = setSettingIP6ConfigDhcpTimeoutJSON(data, valueJSON)
		case "dns":
			err = setSettingIP6ConfigDnsJSON(data, valueJSON)
		case "dns-options":
			err = setSettingIP6ConfigDnsOptionsJSON(data, valueJSON)
		case "dns-priority":
			err = setSettingIP6ConfigDnsPriorityJSON(data, valueJSON)
		case "dns-search":
			err = setSettingIP6ConfigDnsSearchJSON(data, valueJSON)
		case "gateway":
			err = setSettingIP6ConfigGatewayJSON(data, valueJSON)
		case "ignore-auto-dns":
			err = setSettingIP6ConfigIgnoreAutoDnsJSON(data, valueJSON)
		case "ignore-auto-routes":
			err = setSettingIP6ConfigIgnoreAutoRoutesJSON(data, valueJSON)
		case "ip6-privacy":
			err = setSettingIP6ConfigIp6PrivacyJSON(data, valueJSON)
		case "may-fail":
			err = setSettingIP6ConfigMayFailJSON(data, valueJSON)
		case "method":
			err = logicSetSettingIP6ConfigMethodJSON(data, valueJSON)
		case "never-default":
			err = setSettingIP6ConfigNeverDefaultJSON(data, valueJSON)
		case "route-metric":
			err = setSettingIP6ConfigRouteMetricJSON(data, valueJSON)
		case "routes":
			err = setSettingIP6ConfigRoutesJSON(data, valueJSON)
		case "token":
			err = setSettingIP6ConfigTokenJSON(data, valueJSON)
		}
	case "ip-tunnel":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "encapsulation-limit":
			err = setSettingIPTunnelEncapsulationLimitJSON(data, valueJSON)
		case "flow-label":
			err = setSettingIPTunnelFlowLabelJSON(data, valueJSON)
		case "input-key":
			err = setSettingIPTunnelInputKeyJSON(data, valueJSON)
		case "local":
			err = setSettingIPTunnelLocalJSON(data, valueJSON)
		case "mode":
			err = setSettingIPTunnelModeJSON(data, valueJSON)
		case "mtu":
			err = setSettingIPTunnelMtuJSON(data, valueJSON)
		case "output-key":
			err = setSettingIPTunnelOutputKeyJSON(data, valueJSON)
		case "parent":
			err = setSettingIPTunnelParentJSON(data, valueJSON)
		case "path-mtu-discovery":
			err = setSettingIPTunnelPathMtuDiscoveryJSON(data, valueJSON)
		case "remote":
			err = setSettingIPTunnelRemoteJSON(data, valueJSON)
		case "tos":
			err = setSettingIPTunnelTosJSON(data, valueJSON)
		case "ttl":
			err = setSettingIPTunnelTtlJSON(data, valueJSON)
		}
	case "macvlan":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "mode":
			err = setSettingMacvlanModeJSON(data, valueJSON)
		case "parent":
			err = setSettingMacvlanParentJSON(data, valueJSON)
		case "promiscuous":
			err = setSettingMacvlanPromiscuousJSON(data, valueJSON)
		case "tap":
			err = setSettingMacvlanTapJSON(data, valueJSON)
		}
	case "802-11-olpc-mesh":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "channel":
			err = setSettingOlpcMeshChannelJSON(data, valueJSON)
		case "dhcp-anycast-address":
			err = setSettingOlpcMeshDhcpAnycastAddressJSON(data, valueJSON)
		case "ssid":
			err = setSettingOlpcMeshSsidJSON(data, valueJSON)
		}
	case "ppp":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "baud":
			err = setSettingPppBaudJSON(data, valueJSON)
		case "crtscts":
			err = setSettingPppCrtsctsJSON(data, valueJSON)
		case "lcp-echo-failure":
			err = setSettingPppLcpEchoFailureJSON(data, valueJSON)
		case "lcp-echo-interval":
			err = setSettingPppLcpEchoIntervalJSON(data, valueJSON)
		case "mppe-stateful":
			err = setSettingPppMppeStatefulJSON(data, valueJSON)
		case "mru":
			err = setSettingPppMruJSON(data, valueJSON)
		case "mtu":
			err = setSettingPppMtuJSON(data, valueJSON)
		case "no-vj-comp":
			err = setSettingPppNoVjCompJSON(data, valueJSON)
		case "noauth":
			err = setSettingPppNoauthJSON(data, valueJSON)
		case "nobsdcomp":
			err = setSettingPppNobsdcompJSON(data, valueJSON)
		case "nodeflate":
			err = setSettingPppNodeflateJSON(data, valueJSON)
		case "refuse-chap":
			err = setSettingPppRefuseChapJSON(data, valueJSON)
		case "refuse-eap":
			err = setSettingPppRefuseEapJSON(data, valueJSON)
		case "refuse-mschap":
			err = setSettingPppRefuseMschapJSON(data, valueJSON)
		case "refuse-mschapv2":
			err = setSettingPppRefuseMschapv2JSON(data, valueJSON)
		case "refuse-pap":
			err = setSettingPppRefusePapJSON(data, valueJSON)
		case "require-mppe":
			err = logicSetSettingPppRequireMppeJSON(data, valueJSON)
		case "require-mppe-128":
			err = setSettingPppRequireMppe128JSON(data, valueJSON)
		}
	case "pppoe":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "password":
			err = setSettingPppoePasswordJSON(data, valueJSON)
		case "password-flags":
			err = setSettingPppoePasswordFlagsJSON(data, valueJSON)
		case "service":
			err = setSettingPppoeServiceJSON(data, valueJSON)
		case "username":
			err = setSettingPppoeUsernameJSON(data, valueJSON)
		}
	case "serial":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "baud":
			err = setSettingSerialBaudJSON(data, valueJSON)
		case "bits":
			err = setSettingSerialBitsJSON(data, valueJSON)
		case "parity":
			err = setSettingSerialParityJSON(data, valueJSON)
		case "send-delay":
			err = setSettingSerialSendDelayJSON(data, valueJSON)
		case "stopbits":
			err = setSettingSerialStopbitsJSON(data, valueJSON)
		}
	case "team":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "config":
			err = setSettingTeamConfigJSON(data, valueJSON)
		}
	case "team-port":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "config":
			err = setSettingTeamPortConfigJSON(data, valueJSON)
		}
	case "tun":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "group":
			err = setSettingTunGroupJSON(data, valueJSON)
		case "mode":
			err = setSettingTunModeJSON(data, valueJSON)
		case "multi-queue":
			err = setSettingTunMultiQueueJSON(data, valueJSON)
		case "owner":
			err = setSettingTunOwnerJSON(data, valueJSON)
		case "pi":
			err = setSettingTunPiJSON(data, valueJSON)
		case "vnet-hdr":
			err = setSettingTunVnetHdrJSON(data, valueJSON)
		}
	case "vlan":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "egress-priority-map":
			err = setSettingVlanEgressPriorityMapJSON(data, valueJSON)
		case "flags":
			err = setSettingVlanFlagsJSON(data, valueJSON)
		case "id":
			err = setSettingVlanIdJSON(data, valueJSON)
		case "ingress-priority-map":
			err = setSettingVlanIngressPriorityMapJSON(data, valueJSON)
		case "parent":
			err = setSettingVlanParentJSON(data, valueJSON)
		}
	case "vpn":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "data":
			err = setSettingVpnDataJSON(data, valueJSON)
		case "persistent":
			err = setSettingVpnPersistentJSON(data, valueJSON)
		case "secrets":
			err = setSettingVpnSecretsJSON(data, valueJSON)
		case "service-type":
			err = setSettingVpnServiceTypeJSON(data, valueJSON)
		case "timeout":
			err = setSettingVpnTimeoutJSON(data, valueJSON)
		case "user-name":
			err = setSettingVpnUserNameJSON(data, valueJSON)
		}
	case "vxlan":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "ageing":
			err = setSettingVxlanAgeingJSON(data, valueJSON)
		case "destination-port":
			err = setSettingVxlanDestinationPortJSON(data, valueJSON)
		case "id":
			err = setSettingVxlanIdJSON(data, valueJSON)
		case "l2-miss":
			err = setSettingVxlanL2MissJSON(data, valueJSON)
		case "l3-miss":
			err = setSettingVxlanL3MissJSON(data, valueJSON)
		case "learning":
			err = setSettingVxlanLearningJSON(data, valueJSON)
		case "limit":
			err = setSettingVxlanLimitJSON(data, valueJSON)
		case "local":
			err = setSettingVxlanLocalJSON(data, valueJSON)
		case "parent":
			err = setSettingVxlanParentJSON(data, valueJSON)
		case "proxy":
			err = setSettingVxlanProxyJSON(data, valueJSON)
		case "remote":
			err = setSettingVxlanRemoteJSON(data, valueJSON)
		case "rsc":
			err = setSettingVxlanRscJSON(data, valueJSON)
		case "source-port-max":
			err = setSettingVxlanSourcePortMaxJSON(data, valueJSON)
		case "source-port-min":
			err = setSettingVxlanSourcePortMinJSON(data, valueJSON)
		case "tos":
			err = setSettingVxlanTosJSON(data, valueJSON)
		case "ttl":
			err = setSettingVxlanTtlJSON(data, valueJSON)
		}
	case "wimax":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "mac-address":
			err = setSettingWimaxMacAddressJSON(data, valueJSON)
		case "network-name":
			err = setSettingWimaxNetworkNameJSON(data, valueJSON)
		}
	case "802-3-ethernet":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "auto-negotiate":
			err = setSettingWiredAutoNegotiateJSON(data, valueJSON)
		case "cloned-mac-address":
			err = setSettingWiredClonedMacAddressJSON(data, valueJSON)
		case "duplex":
			err = setSettingWiredDuplexJSON(data, valueJSON)
		case "generate-mac-address-mask":
			err = setSettingWiredGenerateMacAddressMaskJSON(data, valueJSON)
		case "mac-address":
			err = setSettingWiredMacAddressJSON(data, valueJSON)
		case "mac-address-blacklist":
			err = setSettingWiredMacAddressBlacklistJSON(data, valueJSON)
		case "mtu":
			err = setSettingWiredMtuJSON(data, valueJSON)
		case "port":
			err = setSettingWiredPortJSON(data, valueJSON)
		case "s390-nettype":
			err = setSettingWiredS390NettypeJSON(data, valueJSON)
		case "s390-options":
			err = setSettingWiredS390OptionsJSON(data, valueJSON)
		case "s390-subchannels":
			err = setSettingWiredS390SubchannelsJSON(data, valueJSON)
		case "speed":
			err = setSettingWiredSpeedJSON(data, valueJSON)
		case "wake-on-lan":
			err = setSettingWiredWakeOnLanJSON(data, valueJSON)
		case "wake-on-lan-password":
			err = setSettingWiredWakeOnLanPasswordJSON(data, valueJSON)
		}
	case "802-11-wireless":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "band":
			err = logicSetSettingWirelessBandJSON(data, valueJSON)
		case "bssid":
			err = setSettingWirelessBssidJSON(data, valueJSON)
		case "channel":
			err = setSettingWirelessChannelJSON(data, valueJSON)
		case "cloned-mac-address":
			err = setSettingWirelessClonedMacAddressJSON(data, valueJSON)
		case "generate-mac-address-mask":
			err = setSettingWirelessGenerateMacAddressMaskJSON(data, valueJSON)
		case "hidden":
			err = setSettingWirelessHiddenJSON(data, valueJSON)
		case "mac-address":
			err = setSettingWirelessMacAddressJSON(data, valueJSON)
		case "mac-address-blacklist":
			err = setSettingWirelessMacAddressBlacklistJSON(data, valueJSON)
		case "mac-address-randomization":
			err = setSettingWirelessMacAddressRandomizationJSON(data, valueJSON)
		case "mode":
			err = logicSetSettingWirelessModeJSON(data, valueJSON)
		case "mtu":
			err = setSettingWirelessMtuJSON(data, valueJSON)
		case "powersave":
			err = setSettingWirelessPowersaveJSON(data, valueJSON)
		case "rate":
			err = setSettingWirelessRateJSON(data, valueJSON)
		case "seen-bssids":
			err = setSettingWirelessSeenBssidsJSON(data, valueJSON)
		case "ssid":
			err = setSettingWirelessSsidJSON(data, valueJSON)
		case "tx-power":
			err = setSettingWirelessTxPowerJSON(data, valueJSON)
		}
	case "802-11-wireless-security":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "auth-alg":
			err = setSettingWirelessSecurityAuthAlgJSON(data, valueJSON)
		case "group":
			err = setSettingWirelessSecurityGroupJSON(data, valueJSON)
		case "key-mgmt":
			err = setSettingWirelessSecurityKeyMgmtJSON(data, valueJSON)
		case "leap-password":
			err = setSettingWirelessSecurityLeapPasswordJSON(data, valueJSON)
		case "leap-password-flags":
			err = setSettingWirelessSecurityLeapPasswordFlagsJSON(data, valueJSON)
		case "leap-username":
			err = setSettingWirelessSecurityLeapUsernameJSON(data, valueJSON)
		case "pairwise":
			err = setSettingWirelessSecurityPairwiseJSON(data, valueJSON)
		case "proto":
			err = setSettingWirelessSecurityProtoJSON(data, valueJSON)
		case "psk":
			err = setSettingWirelessSecurityPskJSON(data, valueJSON)
		case "psk-flags":
			err = setSettingWirelessSecurityPskFlagsJSON(data, valueJSON)
		case "wep-key-flags":
			err = setSettingWirelessSecurityWepKeyFlagsJSON(data, valueJSON)
		case "wep-key-type":
			err = setSettingWirelessSecurityWepKeyTypeJSON(data, valueJSON)
		case "wep-key0":
			err = setSettingWirelessSecurityWepKey0JSON(data, valueJSON)
		case "wep-key1":
			err = setSettingWirelessSecurityWepKey1JSON(data, valueJSON)
		case "wep-key2":
			err = setSettingWirelessSecurityWepKey2JSON(data, valueJSON)
		case "wep-key3":
			err = setSettingWirelessSecurityWepKey3JSON(data, valueJSON)
		case "wep-tx-keyidx":
			err = setSettingWirelessSecurityWepTxKeyidxJSON(data, valueJSON)
		}
	case "alias-vpn-l2tp":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "gateway":
			err = setSettingVpnL2tpKeyGatewayJSON(data, valueJSON)
		case "user":
			err = setSettingVpnL2tpKeyUserJSON(data, valueJSON)
		case "password-flags":
			err = setSettingVpnL2tpKeyPasswordFlagsJSON(data, valueJSON)
		case "password":
			err = setSettingVpnL2tpKeyPasswordJSON(data, valueJSON)
		case "domain":
			err = setSettingVpnL2tpKeyDomainJSON(data, valueJSON)
		}
	case "alias-vpn-l2tp-ppp":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "require-mppe":
			err = setSettingVpnL2tpKeyRequireMppeJSON(data, valueJSON)
		case "require-mppe-40":
			err = setSettingVpnL2tpKeyRequireMppe40JSON(data, valueJSON)
		case "require-mppe-128":
			err = setSettingVpnL2tpKeyRequireMppe128JSON(data, valueJSON)
		case "mppe-stateful":
			err = setSettingVpnL2tpKeyMppeStatefulJSON(data, valueJSON)
		case "refuse-eap":
			err = setSettingVpnL2tpKeyRefuseEapJSON(data, valueJSON)
		case "refuse-pap":
			err = setSettingVpnL2tpKeyRefusePapJSON(data, valueJSON)
		case "refuse-chap":
			err = setSettingVpnL2tpKeyRefuseChapJSON(data, valueJSON)
		case "refuse-mschap":
			err = setSettingVpnL2tpKeyRefuseMschapJSON(data, valueJSON)
		case "refuse-mschapv2":
			err = setSettingVpnL2tpKeyRefuseMschapv2JSON(data, valueJSON)
		case "nobsdcomp":
			err = setSettingVpnL2tpKeyNobsdcompJSON(data, valueJSON)
		case "nodeflate":
			err = setSettingVpnL2tpKeyNodeflateJSON(data, valueJSON)
		case "no-vj-comp":
			err = setSettingVpnL2tpKeyNoVjCompJSON(data, valueJSON)
		case "nopcomp":
			err = setSettingVpnL2tpKeyNoPcompJSON(data, valueJSON)
		case "noaccomp":
			err = setSettingVpnL2tpKeyNoAccompJSON(data, valueJSON)
		case "lcp-echo-failure":
			err = setSettingVpnL2tpKeyLcpEchoFailureJSON(data, valueJSON)
		case "lcp-echo-interval":
			err = setSettingVpnL2tpKeyLcpEchoIntervalJSON(data, valueJSON)
		}
	case "alias-vpn-l2tp-ipsec":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "ipsec-enabled":
			err = logicSetSettingVpnL2tpKeyIpsecEnableJSON(data, valueJSON)
		case "ipsec-group-name":
			err = setSettingVpnL2tpKeyIpsecGroupNameJSON(data, valueJSON)
		case "ipsec-gateway-id":
			err = setSettingVpnL2tpKeyIpsecGatewayIdJSON(data, valueJSON)
		case "ipsec-psk":
			err = setSettingVpnL2tpKeyIpsecPskJSON(data, valueJSON)
		}
	case "alias-vpn-openconnect":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "gateway":
			err = setSettingVpnOpenconnectKeyGatewayJSON(data, valueJSON)
		case "cacert":
			err = setSettingVpnOpenconnectKeyCacertJSON(data, valueJSON)
		case "proxy":
			err = setSettingVpnOpenconnectKeyProxyJSON(data, valueJSON)
		case "enable_csd_trojan":
			err = setSettingVpnOpenconnectKeyCsdEnableJSON(data, valueJSON)
		case "csd_wrapper":
			err = setSettingVpnOpenconnectKeyCsdWrapperJSON(data, valueJSON)
		case "usercert":
			err = setSettingVpnOpenconnectKeyUsercertJSON(data, valueJSON)
		case "userkey":
			err = setSettingVpnOpenconnectKeyPrivkeyJSON(data, valueJSON)
		case "pem_passphrase_fsid":
			err = setSettingVpnOpenconnectKeyPemPassphraseFsidJSON(data, valueJSON)
		case "cookie":
			err = setSettingVpnOpenconnectKeyCookieJSON(data, valueJSON)
		case "gwcert":
			err = setSettingVpnOpenconnectKeyGwcertJSON(data, valueJSON)
		case "authtype":
			err = setSettingVpnOpenconnectKeyAuthtypeJSON(data, valueJSON)
		case "mtu":
			err = setSettingVpnOpenconnectKeyMtuJSON(data, valueJSON)
		case "stoken_source":
			err = setSettingVpnOpenconnectKeyStokenSourceJSON(data, valueJSON)
		case "stoken_string":
			err = setSettingVpnOpenconnectKeyStokenStringJSON(data, valueJSON)
		}
	case "alias-vpn-openvpn":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "remote":
			err = setSettingVpnOpenvpnKeyRemoteJSON(data, valueJSON)
		case "connection-type":
			err = logicSetSettingVpnOpenvpnKeyConnectionTypeJSON(data, valueJSON)
		case "username":
			err = setSettingVpnOpenvpnKeyUsernameJSON(data, valueJSON)
		case "password-flags":
			err = setSettingVpnOpenvpnKeyPasswordFlagsJSON(data, valueJSON)
		case "password":
			err = setSettingVpnOpenvpnKeyPasswordJSON(data, valueJSON)
		case "ca":
			err = logicSetSettingVpnOpenvpnKeyCaJSON(data, valueJSON)
		case "cert":
			err = logicSetSettingVpnOpenvpnKeyCertJSON(data, valueJSON)
		case "key":
			err = logicSetSettingVpnOpenvpnKeyKeyJSON(data, valueJSON)
		case "cert-pass-flags":
			err = setSettingVpnOpenvpnKeyCertpassFlagsJSON(data, valueJSON)
		case "cert-pass":
			err = setSettingVpnOpenvpnKeyCertpassJSON(data, valueJSON)
		case "static-key":
			err = logicSetSettingVpnOpenvpnKeyStaticKeyJSON(data, valueJSON)
		case "static-key-direction":
			err = setSettingVpnOpenvpnKeyStaticKeyDirectionJSON(data, valueJSON)
		case "remote-ip":
			err = setSettingVpnOpenvpnKeyRemoteIpJSON(data, valueJSON)
		case "local-ip":
			err = setSettingVpnOpenvpnKeyLocalIpJSON(data, valueJSON)
		}
	case "alias-vpn-openvpn-advanced":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "port":
			err = setSettingVpnOpenvpnKeyPortJSON(data, valueJSON)
		case "reneg-seconds":
			err = setSettingVpnOpenvpnKeyRenegSecondsJSON(data, valueJSON)
		case "comp-lzo":
			err = setSettingVpnOpenvpnKeyCompLzoJSON(data, valueJSON)
		case "proto-tcp":
			err = setSettingVpnOpenvpnKeyProtoTcpJSON(data, valueJSON)
		case "tap-dev":
			err = setSettingVpnOpenvpnKeyTapDevJSON(data, valueJSON)
		case "tunnel-mtu":
			err = setSettingVpnOpenvpnKeyTunnelMtuJSON(data, valueJSON)
		case "fragment-size":
			err = setSettingVpnOpenvpnKeyFragmentSizeJSON(data, valueJSON)
		case "mssfix":
			err = setSettingVpnOpenvpnKeyMssfixJSON(data, valueJSON)
		case "remote-random":
			err = setSettingVpnOpenvpnKeyRemoteRandomJSON(data, valueJSON)
		}
	case "alias-vpn-openvpn-security":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "cipher":
			err = setSettingVpnOpenvpnKeyCipherJSON(data, valueJSON)
		case "auth":
			err = setSettingVpnOpenvpnKeyAuthJSON(data, valueJSON)
		}
	case "alias-vpn-openvpn-tlsauth":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "tls-remote":
			err = setSettingVpnOpenvpnKeyTlsRemoteJSON(data, valueJSON)
		case "remote-cert-tls":
			err = setSettingVpnOpenvpnKeyRemoteCertTlsJSON(data, valueJSON)
		case "ta":
			err = setSettingVpnOpenvpnKeyTaJSON(data, valueJSON)
		case "ta-dir":
			err = setSettingVpnOpenvpnKeyTaDirJSON(data, valueJSON)
		}
	case "alias-vpn-openvpn-proxies":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "proxy-type":
			err = logicSetSettingVpnOpenvpnKeyProxyTypeJSON(data, valueJSON)
		case "proxy-server":
			err = setSettingVpnOpenvpnKeyProxyServerJSON(data, valueJSON)
		case "proxy-port":
			err = setSettingVpnOpenvpnKeyProxyPortJSON(data, valueJSON)
		case "proxy-retry":
			err = setSettingVpnOpenvpnKeyProxyRetryJSON(data, valueJSON)
		case "http-proxy-username":
			err = setSettingVpnOpenvpnKeyHttpProxyUsernameJSON(data, valueJSON)
		case "http-proxy-password":
			err = setSettingVpnOpenvpnKeyHttpProxyPasswordJSON(data, valueJSON)
		case "http-proxy-password-flags":
			err = setSettingVpnOpenvpnKeyHttpProxyPasswordFlagsJSON(data, valueJSON)
		}
	case "alias-vpn-pptp":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "gateway":
			err = setSettingVpnPptpKeyGatewayJSON(data, valueJSON)
		case "user":
			err = setSettingVpnPptpKeyUserJSON(data, valueJSON)
		case "password-flags":
			err = setSettingVpnPptpKeyPasswordFlagsJSON(data, valueJSON)
		case "password":
			err = setSettingVpnPptpKeyPasswordJSON(data, valueJSON)
		case "domain":
			err = setSettingVpnPptpKeyDomainJSON(data, valueJSON)
		}
	case "alias-vpn-pptp-ppp":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "require-mppe":
			err = setSettingVpnPptpKeyRequireMppeJSON(data, valueJSON)
		case "require-mppe-40":
			err = setSettingVpnPptpKeyRequireMppe40JSON(data, valueJSON)
		case "require-mppe-128":
			err = setSettingVpnPptpKeyRequireMppe128JSON(data, valueJSON)
		case "mppe-stateful":
			err = setSettingVpnPptpKeyMppeStatefulJSON(data, valueJSON)
		case "refuse-eap":
			err = setSettingVpnPptpKeyRefuseEapJSON(data, valueJSON)
		case "refuse-pap":
			err = setSettingVpnPptpKeyRefusePapJSON(data, valueJSON)
		case "refuse-chap":
			err = setSettingVpnPptpKeyRefuseChapJSON(data, valueJSON)
		case "refuse-mschap":
			err = setSettingVpnPptpKeyRefuseMschapJSON(data, valueJSON)
		case "refuse-mschapv2":
			err = setSettingVpnPptpKeyRefuseMschapv2JSON(data, valueJSON)
		case "nobsdcomp":
			err = setSettingVpnPptpKeyNobsdcompJSON(data, valueJSON)
		case "nodeflate":
			err = setSettingVpnPptpKeyNodeflateJSON(data, valueJSON)
		case "no-vj-comp":
			err = setSettingVpnPptpKeyNoVjCompJSON(data, valueJSON)
		case "lcp-echo-failure":
			err = setSettingVpnPptpKeyLcpEchoFailureJSON(data, valueJSON)
		case "lcp-echo-interval":
			err = setSettingVpnPptpKeyLcpEchoIntervalJSON(data, valueJSON)
		}
	case "alias-vpn-strongswan":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "address":
			err = setSettingVpnStrongswanKeyAddressJSON(data, valueJSON)
		case "certificate":
			err = logicSetSettingVpnStrongswanKeyCertificateJSON(data, valueJSON)
		case "method":
			err = logicSetSettingVpnStrongswanKeyMethodJSON(data, valueJSON)
		case "user":
			err = setSettingVpnStrongswanKeyUserJSON(data, valueJSON)
		case "usercert":
			err = logicSetSettingVpnStrongswanKeyUsercertJSON(data, valueJSON)
		case "userkey":
			err = logicSetSettingVpnStrongswanKeyUserkeyJSON(data, valueJSON)
		case "password":
			err = setSettingVpnStrongswanKeyPasswordJSON(data, valueJSON)
		case "password-flags":
			err = setSettingVpnStrongswanKeyPasswordFlagsJSON(data, valueJSON)
		case "virtual":
			err = setSettingVpnStrongswanKeyVirtualJSON(data, valueJSON)
		case "encap":
			err = setSettingVpnStrongswanKeyEncapJSON(data, valueJSON)
		case "ipcomp":
			err = setSettingVpnStrongswanKeyIpcompJSON(data, valueJSON)
		}
	case "alias-vpn-vpnc":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "IPSec gateway":
			err = setSettingVpnVpncKeyGatewayJSON(data, valueJSON)
		case "Xauth username":
			err = setSettingVpnVpncKeyXauthUserJSON(data, valueJSON)
		case "xauth-password-type":
			err = setSettingVpnVpncKeyXauthPasswordTypeJSON(data, valueJSON)
		case "Xauth password-flags":
			err = logicSetSettingVpnVpncKeyXauthPasswordFlagsJSON(data, valueJSON)
		case "Xauth password":
			err = setSettingVpnVpncKeyXauthPasswordJSON(data, valueJSON)
		case "IPSec ID":
			err = setSettingVpnVpncKeyIdJSON(data, valueJSON)
		case "ipsec-secret-type":
			err = setSettingVpnVpncKeySecretTypeJSON(data, valueJSON)
		case "IPSec secret-flags":
			err = logicSetSettingVpnVpncKeySecretFlagsJSON(data, valueJSON)
		case "IPSec secret":
			err = setSettingVpnVpncKeySecretJSON(data, valueJSON)
		case "IKE Authmode":
			err = setSettingVpnVpncKeyAuthmodeJSON(data, valueJSON)
		case "CA-File":
			err = setSettingVpnVpncKeyCaFileJSON(data, valueJSON)
		}
	case "alias-vpn-vpnc-advanced":
		switch key {
		default:
			err = fmt.Errorf("setSettingKeyJSON: invalide key %s %s", section, key)
			logger.Error(err)
		case "Domain":
			err = setSettingVpnVpncKeyDomainJSON(data, valueJSON)
		case "Vendor":
			err = setSettingVpnVpncKeyVendorJSON(data, valueJSON)
		case "Application Version":
			err = setSettingVpnVpncKeyAppVersionJSON(data, valueJSON)
		case "Enable Single DES":
			err = setSettingVpnVpncKeySingleDesJSON(data, valueJSON)
		case "Enable no encryption":
			err = setSettingVpnVpncKeyNoEncryptionJSON(data, valueJSON)
		case "NAT Traversal Mode":
			err = setSettingVpnVpncKeyNatTraversalModeJSON(data, valueJSON)
		case "IKE DH Group":
			err = setSettingVpnVpncKeyDhgroupJSON(data, valueJSON)
		case "Perfect Forward Secrecy":
			err = setSettingVpnVpncKeyPerfectForwardJSON(data, valueJSON)
		case "Local Port":
			err = setSettingVpnVpncKeyLocalPortJSON(data, valueJSON)
		case "DPD idle timeout (our side)":
			err = setSettingVpnVpncKeyDpdIdleTimeoutJSON(data, valueJSON)
		case "Cisco UDP Encapsulation Port":
			err = setSettingVpnVpncKeyCiscoUdpEncapsPortJSON(data, valueJSON)
		}
	}
	return
}

// Ensure setting and key exists and not empty
func ensureSectionSetting8021xExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "802-1x") {
		rememberError(errs, relatedKey, "802-1x", fmt.Sprintf(nmKeyErrorMissingSection, "802-1x"))
	}
	sectionData, _ := data["802-1x"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "802-1x", fmt.Sprintf(nmKeyErrorEmptySection, "802-1x"))
	}
}
func ensureSetting8021xAltsubjectMatchesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xAltsubjectMatchesExists(data) {
		rememberError(errs, "802-1x", "altsubject-matches", nmKeyErrorMissingValue)
	}
	value := getSetting8021xAltsubjectMatches(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "altsubject-matches", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xAnonymousIdentityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xAnonymousIdentityExists(data) {
		rememberError(errs, "802-1x", "anonymous-identity", nmKeyErrorMissingValue)
	}
	value := getSetting8021xAnonymousIdentity(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "anonymous-identity", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xCaCertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xCaCertExists(data) {
		rememberError(errs, "802-1x", "ca-cert", nmKeyErrorMissingValue)
	}
	value := getSetting8021xCaCert(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "ca-cert", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xCaPathNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xCaPathExists(data) {
		rememberError(errs, "802-1x", "ca-path", nmKeyErrorMissingValue)
	}
	value := getSetting8021xCaPath(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "ca-path", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xClientCertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xClientCertExists(data) {
		rememberError(errs, "802-1x", "client-cert", nmKeyErrorMissingValue)
	}
	value := getSetting8021xClientCert(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "client-cert", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xDomainSuffixMatchNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xDomainSuffixMatchExists(data) {
		rememberError(errs, "802-1x", "domain-suffix-match", nmKeyErrorMissingValue)
	}
	value := getSetting8021xDomainSuffixMatch(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "domain-suffix-match", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xEapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xEapExists(data) {
		rememberError(errs, "802-1x", "eap", nmKeyErrorMissingValue)
	}
	value := getSetting8021xEap(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "eap", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xIdentityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xIdentityExists(data) {
		rememberError(errs, "802-1x", "identity", nmKeyErrorMissingValue)
	}
	value := getSetting8021xIdentity(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "identity", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPacFileNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPacFileExists(data) {
		rememberError(errs, "802-1x", "pac-file", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPacFile(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "pac-file", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPasswordExists(data) {
		rememberError(errs, "802-1x", "password", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPassword(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPasswordFlagsExists(data) {
		rememberError(errs, "802-1x", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSetting8021xPasswordRawNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPasswordRawExists(data) {
		rememberError(errs, "802-1x", "password-raw", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPasswordRaw(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "password-raw", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPasswordRawFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPasswordRawFlagsExists(data) {
		rememberError(errs, "802-1x", "password-raw-flags", nmKeyErrorMissingValue)
	}
}
func ensureSetting8021xPhase1FastProvisioningNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase1FastProvisioningExists(data) {
		rememberError(errs, "802-1x", "phase1-fast-provisioning", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase1FastProvisioning(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase1-fast-provisioning", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase1PeaplabelNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase1PeaplabelExists(data) {
		rememberError(errs, "802-1x", "phase1-peaplabel", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase1Peaplabel(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase1-peaplabel", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase1PeapverNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase1PeapverExists(data) {
		rememberError(errs, "802-1x", "phase1-peapver", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase1Peapver(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase1-peapver", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2AltsubjectMatchesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2AltsubjectMatchesExists(data) {
		rememberError(errs, "802-1x", "phase2-altsubject-matches", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2AltsubjectMatches(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-altsubject-matches", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2AuthNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2AuthExists(data) {
		rememberError(errs, "802-1x", "phase2-auth", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2Auth(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-auth", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2AutheapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2AutheapExists(data) {
		rememberError(errs, "802-1x", "phase2-autheap", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2Autheap(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-autheap", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2CaCertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2CaCertExists(data) {
		rememberError(errs, "802-1x", "phase2-ca-cert", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2CaCert(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-ca-cert", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2CaPathNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2CaPathExists(data) {
		rememberError(errs, "802-1x", "phase2-ca-path", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2CaPath(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-ca-path", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2ClientCertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2ClientCertExists(data) {
		rememberError(errs, "802-1x", "phase2-client-cert", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2ClientCert(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-client-cert", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2DomainSuffixMatchNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2DomainSuffixMatchExists(data) {
		rememberError(errs, "802-1x", "phase2-domain-suffix-match", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2DomainSuffixMatch(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-domain-suffix-match", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2PrivateKeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2PrivateKeyExists(data) {
		rememberError(errs, "802-1x", "phase2-private-key", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2PrivateKey(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-private-key", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2PrivateKeyPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2PrivateKeyPasswordExists(data) {
		rememberError(errs, "802-1x", "phase2-private-key-password", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2PrivateKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-private-key-password", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPhase2PrivateKeyPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2PrivateKeyPasswordFlagsExists(data) {
		rememberError(errs, "802-1x", "phase2-private-key-password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSetting8021xPhase2SubjectMatchNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPhase2SubjectMatchExists(data) {
		rememberError(errs, "802-1x", "phase2-subject-match", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPhase2SubjectMatch(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "phase2-subject-match", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPinNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPinExists(data) {
		rememberError(errs, "802-1x", "pin", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPin(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "pin", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPinFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPinFlagsExists(data) {
		rememberError(errs, "802-1x", "pin-flags", nmKeyErrorMissingValue)
	}
}
func ensureSetting8021xPrivateKeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPrivateKeyExists(data) {
		rememberError(errs, "802-1x", "private-key", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPrivateKey(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "private-key", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPrivateKeyPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPrivateKeyPasswordExists(data) {
		rememberError(errs, "802-1x", "private-key-password", nmKeyErrorMissingValue)
	}
	value := getSetting8021xPrivateKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "private-key-password", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xPrivateKeyPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xPrivateKeyPasswordFlagsExists(data) {
		rememberError(errs, "802-1x", "private-key-password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSetting8021xSubjectMatchNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xSubjectMatchExists(data) {
		rememberError(errs, "802-1x", "subject-match", nmKeyErrorMissingValue)
	}
	value := getSetting8021xSubjectMatch(data)
	if len(value) == 0 {
		rememberError(errs, "802-1x", "subject-match", nmKeyErrorEmptyValue)
	}
}
func ensureSetting8021xSystemCaCertsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSetting8021xSystemCaCertsExists(data) {
		rememberError(errs, "802-1x", "system-ca-certs", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingAdslExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "adsl") {
		rememberError(errs, relatedKey, "adsl", fmt.Sprintf(nmKeyErrorMissingSection, "adsl"))
	}
	sectionData, _ := data["adsl"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "adsl", fmt.Sprintf(nmKeyErrorEmptySection, "adsl"))
	}
}
func ensureSettingAdslEncapsulationNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingAdslEncapsulationExists(data) {
		rememberError(errs, "adsl", "encapsulation", nmKeyErrorMissingValue)
	}
	value := getSettingAdslEncapsulation(data)
	if len(value) == 0 {
		rememberError(errs, "adsl", "encapsulation", nmKeyErrorEmptyValue)
	}
}
func ensureSettingAdslPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingAdslPasswordExists(data) {
		rememberError(errs, "adsl", "password", nmKeyErrorMissingValue)
	}
	value := getSettingAdslPassword(data)
	if len(value) == 0 {
		rememberError(errs, "adsl", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingAdslPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingAdslPasswordFlagsExists(data) {
		rememberError(errs, "adsl", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingAdslProtocolNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingAdslProtocolExists(data) {
		rememberError(errs, "adsl", "protocol", nmKeyErrorMissingValue)
	}
	value := getSettingAdslProtocol(data)
	if len(value) == 0 {
		rememberError(errs, "adsl", "protocol", nmKeyErrorEmptyValue)
	}
}
func ensureSettingAdslUsernameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingAdslUsernameExists(data) {
		rememberError(errs, "adsl", "username", nmKeyErrorMissingValue)
	}
	value := getSettingAdslUsername(data)
	if len(value) == 0 {
		rememberError(errs, "adsl", "username", nmKeyErrorEmptyValue)
	}
}
func ensureSettingAdslVciNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingAdslVciExists(data) {
		rememberError(errs, "adsl", "vci", nmKeyErrorMissingValue)
	}
}
func ensureSettingAdslVpiNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingAdslVpiExists(data) {
		rememberError(errs, "adsl", "vpi", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingBluetoothExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "bluetooth") {
		rememberError(errs, relatedKey, "bluetooth", fmt.Sprintf(nmKeyErrorMissingSection, "bluetooth"))
	}
	sectionData, _ := data["bluetooth"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "bluetooth", fmt.Sprintf(nmKeyErrorEmptySection, "bluetooth"))
	}
}
func ensureSettingBluetoothBdaddrNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBluetoothBdaddrExists(data) {
		rememberError(errs, "bluetooth", "bdaddr", nmKeyErrorMissingValue)
	}
	value := getSettingBluetoothBdaddr(data)
	if len(value) == 0 {
		rememberError(errs, "bluetooth", "bdaddr", nmKeyErrorEmptyValue)
	}
}
func ensureSettingBluetoothTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBluetoothTypeExists(data) {
		rememberError(errs, "bluetooth", "type", nmKeyErrorMissingValue)
	}
	value := getSettingBluetoothType(data)
	if len(value) == 0 {
		rememberError(errs, "bluetooth", "type", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingBondExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "bond") {
		rememberError(errs, relatedKey, "bond", fmt.Sprintf(nmKeyErrorMissingSection, "bond"))
	}
	sectionData, _ := data["bond"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "bond", fmt.Sprintf(nmKeyErrorEmptySection, "bond"))
	}
}
func ensureSettingBondOptionsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBondOptionsExists(data) {
		rememberError(errs, "bond", "options", nmKeyErrorMissingValue)
	}
	value := getSettingBondOptions(data)
	if len(value) == 0 {
		rememberError(errs, "bond", "options", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingBridgeExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "bridge") {
		rememberError(errs, relatedKey, "bridge", fmt.Sprintf(nmKeyErrorMissingSection, "bridge"))
	}
	sectionData, _ := data["bridge"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "bridge", fmt.Sprintf(nmKeyErrorEmptySection, "bridge"))
	}
}
func ensureSettingBridgeAgeingTimeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgeAgeingTimeExists(data) {
		rememberError(errs, "bridge", "ageing-time", nmKeyErrorMissingValue)
	}
}
func ensureSettingBridgeForwardDelayNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgeForwardDelayExists(data) {
		rememberError(errs, "bridge", "forward-delay", nmKeyErrorMissingValue)
	}
}
func ensureSettingBridgeHelloTimeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgeHelloTimeExists(data) {
		rememberError(errs, "bridge", "hello-time", nmKeyErrorMissingValue)
	}
}
func ensureSettingBridgeMacAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgeMacAddressExists(data) {
		rememberError(errs, "bridge", "mac-address", nmKeyErrorMissingValue)
	}
	value := getSettingBridgeMacAddress(data)
	if len(value) == 0 {
		rememberError(errs, "bridge", "mac-address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingBridgeMaxAgeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgeMaxAgeExists(data) {
		rememberError(errs, "bridge", "max-age", nmKeyErrorMissingValue)
	}
}
func ensureSettingBridgeMulticastSnoopingNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgeMulticastSnoopingExists(data) {
		rememberError(errs, "bridge", "multicast-snooping", nmKeyErrorMissingValue)
	}
}
func ensureSettingBridgePriorityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgePriorityExists(data) {
		rememberError(errs, "bridge", "priority", nmKeyErrorMissingValue)
	}
}
func ensureSettingBridgeStpNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgeStpExists(data) {
		rememberError(errs, "bridge", "stp", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingBridgePortExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "bridge-port") {
		rememberError(errs, relatedKey, "bridge-port", fmt.Sprintf(nmKeyErrorMissingSection, "bridge-port"))
	}
	sectionData, _ := data["bridge-port"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "bridge-port", fmt.Sprintf(nmKeyErrorEmptySection, "bridge-port"))
	}
}
func ensureSettingBridgePortHairpinModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgePortHairpinModeExists(data) {
		rememberError(errs, "bridge-port", "hairpin-mode", nmKeyErrorMissingValue)
	}
}
func ensureSettingBridgePortPathCostNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgePortPathCostExists(data) {
		rememberError(errs, "bridge-port", "path-cost", nmKeyErrorMissingValue)
	}
}
func ensureSettingBridgePortPriorityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingBridgePortPriorityExists(data) {
		rememberError(errs, "bridge-port", "priority", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingCdmaExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "cdma") {
		rememberError(errs, relatedKey, "cdma", fmt.Sprintf(nmKeyErrorMissingSection, "cdma"))
	}
	sectionData, _ := data["cdma"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "cdma", fmt.Sprintf(nmKeyErrorEmptySection, "cdma"))
	}
}
func ensureSettingCdmaNumberNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingCdmaNumberExists(data) {
		rememberError(errs, "cdma", "number", nmKeyErrorMissingValue)
	}
	value := getSettingCdmaNumber(data)
	if len(value) == 0 {
		rememberError(errs, "cdma", "number", nmKeyErrorEmptyValue)
	}
}
func ensureSettingCdmaPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingCdmaPasswordExists(data) {
		rememberError(errs, "cdma", "password", nmKeyErrorMissingValue)
	}
	value := getSettingCdmaPassword(data)
	if len(value) == 0 {
		rememberError(errs, "cdma", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingCdmaPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingCdmaPasswordFlagsExists(data) {
		rememberError(errs, "cdma", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingCdmaUsernameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingCdmaUsernameExists(data) {
		rememberError(errs, "cdma", "username", nmKeyErrorMissingValue)
	}
	value := getSettingCdmaUsername(data)
	if len(value) == 0 {
		rememberError(errs, "cdma", "username", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingConnectionExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "connection") {
		rememberError(errs, relatedKey, "connection", fmt.Sprintf(nmKeyErrorMissingSection, "connection"))
	}
	sectionData, _ := data["connection"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "connection", fmt.Sprintf(nmKeyErrorEmptySection, "connection"))
	}
}
func ensureSettingConnectionAutoconnectNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionAutoconnectExists(data) {
		rememberError(errs, "connection", "autoconnect", nmKeyErrorMissingValue)
	}
}
func ensureSettingConnectionAutoconnectPriorityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionAutoconnectPriorityExists(data) {
		rememberError(errs, "connection", "autoconnect-priority", nmKeyErrorMissingValue)
	}
}
func ensureSettingConnectionAutoconnectSlavesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionAutoconnectSlavesExists(data) {
		rememberError(errs, "connection", "autoconnect-slaves", nmKeyErrorMissingValue)
	}
}
func ensureSettingConnectionGatewayPingTimeoutNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionGatewayPingTimeoutExists(data) {
		rememberError(errs, "connection", "gateway-ping-timeout", nmKeyErrorMissingValue)
	}
}
func ensureSettingConnectionIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionIdExists(data) {
		rememberError(errs, "connection", "id", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionId(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionInterfaceNameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionInterfaceNameExists(data) {
		rememberError(errs, "connection", "interface-name", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionInterfaceName(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "interface-name", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionLldpNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionLldpExists(data) {
		rememberError(errs, "connection", "lldp", nmKeyErrorMissingValue)
	}
}
func ensureSettingConnectionMasterNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionMasterExists(data) {
		rememberError(errs, "connection", "master", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionMaster(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "master", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionMeteredNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionMeteredExists(data) {
		rememberError(errs, "connection", "metered", nmKeyErrorMissingValue)
	}
}
func ensureSettingConnectionPermissionsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionPermissionsExists(data) {
		rememberError(errs, "connection", "permissions", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionPermissions(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "permissions", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionReadOnlyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionReadOnlyExists(data) {
		rememberError(errs, "connection", "read-only", nmKeyErrorMissingValue)
	}
}
func ensureSettingConnectionSecondariesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionSecondariesExists(data) {
		rememberError(errs, "connection", "secondaries", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionSecondaries(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "secondaries", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionSlaveTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionSlaveTypeExists(data) {
		rememberError(errs, "connection", "slave-type", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionSlaveType(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "slave-type", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionStableIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionStableIdExists(data) {
		rememberError(errs, "connection", "stable-id", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionStableId(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "stable-id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionTimestampNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionTimestampExists(data) {
		rememberError(errs, "connection", "timestamp", nmKeyErrorMissingValue)
	}
}
func ensureSettingConnectionTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionTypeExists(data) {
		rememberError(errs, "connection", "type", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionType(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "type", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionUuidNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionUuidExists(data) {
		rememberError(errs, "connection", "uuid", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionUuid(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "uuid", nmKeyErrorEmptyValue)
	}
}
func ensureSettingConnectionZoneNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingConnectionZoneExists(data) {
		rememberError(errs, "connection", "zone", nmKeyErrorMissingValue)
	}
	value := getSettingConnectionZone(data)
	if len(value) == 0 {
		rememberError(errs, "connection", "zone", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingDcbExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "dcb") {
		rememberError(errs, relatedKey, "dcb", fmt.Sprintf(nmKeyErrorMissingSection, "dcb"))
	}
	sectionData, _ := data["dcb"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "dcb", fmt.Sprintf(nmKeyErrorEmptySection, "dcb"))
	}
}
func ensureSettingDcbAppFcoeFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbAppFcoeFlagsExists(data) {
		rememberError(errs, "dcb", "app-fcoe-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingDcbAppFcoeModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbAppFcoeModeExists(data) {
		rememberError(errs, "dcb", "app-fcoe-mode", nmKeyErrorMissingValue)
	}
	value := getSettingDcbAppFcoeMode(data)
	if len(value) == 0 {
		rememberError(errs, "dcb", "app-fcoe-mode", nmKeyErrorEmptyValue)
	}
}
func ensureSettingDcbAppFcoePriorityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbAppFcoePriorityExists(data) {
		rememberError(errs, "dcb", "app-fcoe-priority", nmKeyErrorMissingValue)
	}
}
func ensureSettingDcbAppFipFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbAppFipFlagsExists(data) {
		rememberError(errs, "dcb", "app-fip-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingDcbAppFipPriorityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbAppFipPriorityExists(data) {
		rememberError(errs, "dcb", "app-fip-priority", nmKeyErrorMissingValue)
	}
}
func ensureSettingDcbAppIscsiFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbAppIscsiFlagsExists(data) {
		rememberError(errs, "dcb", "app-iscsi-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingDcbAppIscsiPriorityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbAppIscsiPriorityExists(data) {
		rememberError(errs, "dcb", "app-iscsi-priority", nmKeyErrorMissingValue)
	}
}
func ensureSettingDcbPriorityBandwidthNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbPriorityBandwidthExists(data) {
		rememberError(errs, "dcb", "priority-bandwidth", nmKeyErrorMissingValue)
	}
	value := getSettingDcbPriorityBandwidth(data)
	if len(value) == 0 {
		rememberError(errs, "dcb", "priority-bandwidth", nmKeyErrorEmptyValue)
	}
}
func ensureSettingDcbPriorityFlowControlNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbPriorityFlowControlExists(data) {
		rememberError(errs, "dcb", "priority-flow-control", nmKeyErrorMissingValue)
	}
	value := getSettingDcbPriorityFlowControl(data)
	if len(value) == 0 {
		rememberError(errs, "dcb", "priority-flow-control", nmKeyErrorEmptyValue)
	}
}
func ensureSettingDcbPriorityFlowControlFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbPriorityFlowControlFlagsExists(data) {
		rememberError(errs, "dcb", "priority-flow-control-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingDcbPriorityGroupBandwidthNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbPriorityGroupBandwidthExists(data) {
		rememberError(errs, "dcb", "priority-group-bandwidth", nmKeyErrorMissingValue)
	}
	value := getSettingDcbPriorityGroupBandwidth(data)
	if len(value) == 0 {
		rememberError(errs, "dcb", "priority-group-bandwidth", nmKeyErrorEmptyValue)
	}
}
func ensureSettingDcbPriorityGroupFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbPriorityGroupFlagsExists(data) {
		rememberError(errs, "dcb", "priority-group-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingDcbPriorityGroupIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbPriorityGroupIdExists(data) {
		rememberError(errs, "dcb", "priority-group-id", nmKeyErrorMissingValue)
	}
	value := getSettingDcbPriorityGroupId(data)
	if len(value) == 0 {
		rememberError(errs, "dcb", "priority-group-id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingDcbPriorityStrictBandwidthNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbPriorityStrictBandwidthExists(data) {
		rememberError(errs, "dcb", "priority-strict-bandwidth", nmKeyErrorMissingValue)
	}
	value := getSettingDcbPriorityStrictBandwidth(data)
	if len(value) == 0 {
		rememberError(errs, "dcb", "priority-strict-bandwidth", nmKeyErrorEmptyValue)
	}
}
func ensureSettingDcbPriorityTrafficClassNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingDcbPriorityTrafficClassExists(data) {
		rememberError(errs, "dcb", "priority-traffic-class", nmKeyErrorMissingValue)
	}
	value := getSettingDcbPriorityTrafficClass(data)
	if len(value) == 0 {
		rememberError(errs, "dcb", "priority-traffic-class", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingGenericExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "generic") {
		rememberError(errs, relatedKey, "generic", fmt.Sprintf(nmKeyErrorMissingSection, "generic"))
	}
	sectionData, _ := data["generic"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "generic", fmt.Sprintf(nmKeyErrorEmptySection, "generic"))
	}
}
func ensureSectionSettingGsmExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "gsm") {
		rememberError(errs, relatedKey, "gsm", fmt.Sprintf(nmKeyErrorMissingSection, "gsm"))
	}
	sectionData, _ := data["gsm"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "gsm", fmt.Sprintf(nmKeyErrorEmptySection, "gsm"))
	}
}
func ensureSettingGsmApnNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmApnExists(data) {
		rememberError(errs, "gsm", "apn", nmKeyErrorMissingValue)
	}
	value := getSettingGsmApn(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "apn", nmKeyErrorEmptyValue)
	}
}
func ensureSettingGsmDeviceIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmDeviceIdExists(data) {
		rememberError(errs, "gsm", "device-id", nmKeyErrorMissingValue)
	}
	value := getSettingGsmDeviceId(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "device-id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingGsmHomeOnlyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmHomeOnlyExists(data) {
		rememberError(errs, "gsm", "home-only", nmKeyErrorMissingValue)
	}
}
func ensureSettingGsmNetworkIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmNetworkIdExists(data) {
		rememberError(errs, "gsm", "network-id", nmKeyErrorMissingValue)
	}
	value := getSettingGsmNetworkId(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "network-id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingGsmNumberNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmNumberExists(data) {
		rememberError(errs, "gsm", "number", nmKeyErrorMissingValue)
	}
	value := getSettingGsmNumber(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "number", nmKeyErrorEmptyValue)
	}
}
func ensureSettingGsmPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmPasswordExists(data) {
		rememberError(errs, "gsm", "password", nmKeyErrorMissingValue)
	}
	value := getSettingGsmPassword(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingGsmPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmPasswordFlagsExists(data) {
		rememberError(errs, "gsm", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingGsmPinNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmPinExists(data) {
		rememberError(errs, "gsm", "pin", nmKeyErrorMissingValue)
	}
	value := getSettingGsmPin(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "pin", nmKeyErrorEmptyValue)
	}
}
func ensureSettingGsmPinFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmPinFlagsExists(data) {
		rememberError(errs, "gsm", "pin-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingGsmSimIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmSimIdExists(data) {
		rememberError(errs, "gsm", "sim-id", nmKeyErrorMissingValue)
	}
	value := getSettingGsmSimId(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "sim-id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingGsmSimOperatorIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmSimOperatorIdExists(data) {
		rememberError(errs, "gsm", "sim-operator-id", nmKeyErrorMissingValue)
	}
	value := getSettingGsmSimOperatorId(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "sim-operator-id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingGsmUsernameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingGsmUsernameExists(data) {
		rememberError(errs, "gsm", "username", nmKeyErrorMissingValue)
	}
	value := getSettingGsmUsername(data)
	if len(value) == 0 {
		rememberError(errs, "gsm", "username", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingInfinibandExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "infiniband") {
		rememberError(errs, relatedKey, "infiniband", fmt.Sprintf(nmKeyErrorMissingSection, "infiniband"))
	}
	sectionData, _ := data["infiniband"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "infiniband", fmt.Sprintf(nmKeyErrorEmptySection, "infiniband"))
	}
}
func ensureSettingInfinibandMacAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingInfinibandMacAddressExists(data) {
		rememberError(errs, "infiniband", "mac-address", nmKeyErrorMissingValue)
	}
	value := getSettingInfinibandMacAddress(data)
	if len(value) == 0 {
		rememberError(errs, "infiniband", "mac-address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingInfinibandMtuNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingInfinibandMtuExists(data) {
		rememberError(errs, "infiniband", "mtu", nmKeyErrorMissingValue)
	}
}
func ensureSettingInfinibandPKeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingInfinibandPKeyExists(data) {
		rememberError(errs, "infiniband", "p-key", nmKeyErrorMissingValue)
	}
}
func ensureSettingInfinibandParentNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingInfinibandParentExists(data) {
		rememberError(errs, "infiniband", "parent", nmKeyErrorMissingValue)
	}
	value := getSettingInfinibandParent(data)
	if len(value) == 0 {
		rememberError(errs, "infiniband", "parent", nmKeyErrorEmptyValue)
	}
}
func ensureSettingInfinibandTransportModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingInfinibandTransportModeExists(data) {
		rememberError(errs, "infiniband", "transport-mode", nmKeyErrorMissingValue)
	}
	value := getSettingInfinibandTransportMode(data)
	if len(value) == 0 {
		rememberError(errs, "infiniband", "transport-mode", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingIP4ConfigExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "ipv4") {
		rememberError(errs, relatedKey, "ipv4", fmt.Sprintf(nmKeyErrorMissingSection, "ipv4"))
	}
	sectionData, _ := data["ipv4"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "ipv4", fmt.Sprintf(nmKeyErrorEmptySection, "ipv4"))
	}
}
func ensureSettingIP4ConfigAddressesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigAddressesExists(data) {
		rememberError(errs, "ipv4", "addresses", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigAddresses(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "addresses", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigDadTimeoutNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDadTimeoutExists(data) {
		rememberError(errs, "ipv4", "dad-timeout", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigDhcpClientIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDhcpClientIdExists(data) {
		rememberError(errs, "ipv4", "dhcp-client-id", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigDhcpClientId(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "dhcp-client-id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigDhcpFqdnNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDhcpFqdnExists(data) {
		rememberError(errs, "ipv4", "dhcp-fqdn", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigDhcpFqdn(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "dhcp-fqdn", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigDhcpHostnameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDhcpHostnameExists(data) {
		rememberError(errs, "ipv4", "dhcp-hostname", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigDhcpHostname(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "dhcp-hostname", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigDhcpSendHostnameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDhcpSendHostnameExists(data) {
		rememberError(errs, "ipv4", "dhcp-send-hostname", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigDhcpTimeoutNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDhcpTimeoutExists(data) {
		rememberError(errs, "ipv4", "dhcp-timeout", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigDnsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDnsExists(data) {
		rememberError(errs, "ipv4", "dns", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigDns(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "dns", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigDnsOptionsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDnsOptionsExists(data) {
		rememberError(errs, "ipv4", "dns-options", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigDnsOptions(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "dns-options", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigDnsPriorityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDnsPriorityExists(data) {
		rememberError(errs, "ipv4", "dns-priority", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigDnsSearchNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigDnsSearchExists(data) {
		rememberError(errs, "ipv4", "dns-search", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigDnsSearch(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "dns-search", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigGatewayNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigGatewayExists(data) {
		rememberError(errs, "ipv4", "gateway", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigGateway(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "gateway", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigIgnoreAutoDnsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigIgnoreAutoDnsExists(data) {
		rememberError(errs, "ipv4", "ignore-auto-dns", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigIgnoreAutoRoutesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigIgnoreAutoRoutesExists(data) {
		rememberError(errs, "ipv4", "ignore-auto-routes", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigMayFailNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigMayFailExists(data) {
		rememberError(errs, "ipv4", "may-fail", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigMethodNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigMethodExists(data) {
		rememberError(errs, "ipv4", "method", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigMethod(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "method", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP4ConfigNeverDefaultNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigNeverDefaultExists(data) {
		rememberError(errs, "ipv4", "never-default", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigRouteMetricNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigRouteMetricExists(data) {
		rememberError(errs, "ipv4", "route-metric", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP4ConfigRoutesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP4ConfigRoutesExists(data) {
		rememberError(errs, "ipv4", "routes", nmKeyErrorMissingValue)
	}
	value := getSettingIP4ConfigRoutes(data)
	if len(value) == 0 {
		rememberError(errs, "ipv4", "routes", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingIP6ConfigExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "ipv6") {
		rememberError(errs, relatedKey, "ipv6", fmt.Sprintf(nmKeyErrorMissingSection, "ipv6"))
	}
	sectionData, _ := data["ipv6"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "ipv6", fmt.Sprintf(nmKeyErrorEmptySection, "ipv6"))
	}
}
func ensureSettingIP6ConfigAddrGenModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigAddrGenModeExists(data) {
		rememberError(errs, "ipv6", "addr-gen-mode", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigAddressesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigAddressesExists(data) {
		rememberError(errs, "ipv6", "addresses", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigAddresses(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "addresses", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP6ConfigDadTimeoutNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigDadTimeoutExists(data) {
		rememberError(errs, "ipv6", "dad-timeout", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigDhcpHostnameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigDhcpHostnameExists(data) {
		rememberError(errs, "ipv6", "dhcp-hostname", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigDhcpHostname(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "dhcp-hostname", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP6ConfigDhcpSendHostnameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigDhcpSendHostnameExists(data) {
		rememberError(errs, "ipv6", "dhcp-send-hostname", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigDhcpTimeoutNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigDhcpTimeoutExists(data) {
		rememberError(errs, "ipv6", "dhcp-timeout", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigDnsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigDnsExists(data) {
		rememberError(errs, "ipv6", "dns", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigDns(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "dns", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP6ConfigDnsOptionsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigDnsOptionsExists(data) {
		rememberError(errs, "ipv6", "dns-options", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigDnsOptions(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "dns-options", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP6ConfigDnsPriorityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigDnsPriorityExists(data) {
		rememberError(errs, "ipv6", "dns-priority", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigDnsSearchNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigDnsSearchExists(data) {
		rememberError(errs, "ipv6", "dns-search", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigDnsSearch(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "dns-search", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP6ConfigGatewayNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigGatewayExists(data) {
		rememberError(errs, "ipv6", "gateway", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigGateway(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "gateway", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP6ConfigIgnoreAutoDnsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigIgnoreAutoDnsExists(data) {
		rememberError(errs, "ipv6", "ignore-auto-dns", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigIgnoreAutoRoutesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigIgnoreAutoRoutesExists(data) {
		rememberError(errs, "ipv6", "ignore-auto-routes", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigIp6PrivacyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigIp6PrivacyExists(data) {
		rememberError(errs, "ipv6", "ip6-privacy", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigMayFailNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigMayFailExists(data) {
		rememberError(errs, "ipv6", "may-fail", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigMethodNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigMethodExists(data) {
		rememberError(errs, "ipv6", "method", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigMethod(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "method", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP6ConfigNeverDefaultNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigNeverDefaultExists(data) {
		rememberError(errs, "ipv6", "never-default", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigRouteMetricNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigRouteMetricExists(data) {
		rememberError(errs, "ipv6", "route-metric", nmKeyErrorMissingValue)
	}
}
func ensureSettingIP6ConfigRoutesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigRoutesExists(data) {
		rememberError(errs, "ipv6", "routes", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigRoutes(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "routes", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIP6ConfigTokenNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIP6ConfigTokenExists(data) {
		rememberError(errs, "ipv6", "token", nmKeyErrorMissingValue)
	}
	value := getSettingIP6ConfigToken(data)
	if len(value) == 0 {
		rememberError(errs, "ipv6", "token", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingIPTunnelExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "ip-tunnel") {
		rememberError(errs, relatedKey, "ip-tunnel", fmt.Sprintf(nmKeyErrorMissingSection, "ip-tunnel"))
	}
	sectionData, _ := data["ip-tunnel"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "ip-tunnel", fmt.Sprintf(nmKeyErrorEmptySection, "ip-tunnel"))
	}
}
func ensureSettingIPTunnelEncapsulationLimitNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelEncapsulationLimitExists(data) {
		rememberError(errs, "ip-tunnel", "encapsulation-limit", nmKeyErrorMissingValue)
	}
}
func ensureSettingIPTunnelFlowLabelNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelFlowLabelExists(data) {
		rememberError(errs, "ip-tunnel", "flow-label", nmKeyErrorMissingValue)
	}
}
func ensureSettingIPTunnelInputKeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelInputKeyExists(data) {
		rememberError(errs, "ip-tunnel", "input-key", nmKeyErrorMissingValue)
	}
	value := getSettingIPTunnelInputKey(data)
	if len(value) == 0 {
		rememberError(errs, "ip-tunnel", "input-key", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIPTunnelLocalNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelLocalExists(data) {
		rememberError(errs, "ip-tunnel", "local", nmKeyErrorMissingValue)
	}
	value := getSettingIPTunnelLocal(data)
	if len(value) == 0 {
		rememberError(errs, "ip-tunnel", "local", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIPTunnelModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelModeExists(data) {
		rememberError(errs, "ip-tunnel", "mode", nmKeyErrorMissingValue)
	}
}
func ensureSettingIPTunnelMtuNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelMtuExists(data) {
		rememberError(errs, "ip-tunnel", "mtu", nmKeyErrorMissingValue)
	}
}
func ensureSettingIPTunnelOutputKeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelOutputKeyExists(data) {
		rememberError(errs, "ip-tunnel", "output-key", nmKeyErrorMissingValue)
	}
	value := getSettingIPTunnelOutputKey(data)
	if len(value) == 0 {
		rememberError(errs, "ip-tunnel", "output-key", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIPTunnelParentNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelParentExists(data) {
		rememberError(errs, "ip-tunnel", "parent", nmKeyErrorMissingValue)
	}
	value := getSettingIPTunnelParent(data)
	if len(value) == 0 {
		rememberError(errs, "ip-tunnel", "parent", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIPTunnelPathMtuDiscoveryNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelPathMtuDiscoveryExists(data) {
		rememberError(errs, "ip-tunnel", "path-mtu-discovery", nmKeyErrorMissingValue)
	}
}
func ensureSettingIPTunnelRemoteNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelRemoteExists(data) {
		rememberError(errs, "ip-tunnel", "remote", nmKeyErrorMissingValue)
	}
	value := getSettingIPTunnelRemote(data)
	if len(value) == 0 {
		rememberError(errs, "ip-tunnel", "remote", nmKeyErrorEmptyValue)
	}
}
func ensureSettingIPTunnelTosNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelTosExists(data) {
		rememberError(errs, "ip-tunnel", "tos", nmKeyErrorMissingValue)
	}
}
func ensureSettingIPTunnelTtlNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingIPTunnelTtlExists(data) {
		rememberError(errs, "ip-tunnel", "ttl", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingMacvlanExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "macvlan") {
		rememberError(errs, relatedKey, "macvlan", fmt.Sprintf(nmKeyErrorMissingSection, "macvlan"))
	}
	sectionData, _ := data["macvlan"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "macvlan", fmt.Sprintf(nmKeyErrorEmptySection, "macvlan"))
	}
}
func ensureSettingMacvlanModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingMacvlanModeExists(data) {
		rememberError(errs, "macvlan", "mode", nmKeyErrorMissingValue)
	}
}
func ensureSettingMacvlanParentNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingMacvlanParentExists(data) {
		rememberError(errs, "macvlan", "parent", nmKeyErrorMissingValue)
	}
	value := getSettingMacvlanParent(data)
	if len(value) == 0 {
		rememberError(errs, "macvlan", "parent", nmKeyErrorEmptyValue)
	}
}
func ensureSettingMacvlanPromiscuousNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingMacvlanPromiscuousExists(data) {
		rememberError(errs, "macvlan", "promiscuous", nmKeyErrorMissingValue)
	}
}
func ensureSettingMacvlanTapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingMacvlanTapExists(data) {
		rememberError(errs, "macvlan", "tap", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingOlpcMeshExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "802-11-olpc-mesh") {
		rememberError(errs, relatedKey, "802-11-olpc-mesh", fmt.Sprintf(nmKeyErrorMissingSection, "802-11-olpc-mesh"))
	}
	sectionData, _ := data["802-11-olpc-mesh"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "802-11-olpc-mesh", fmt.Sprintf(nmKeyErrorEmptySection, "802-11-olpc-mesh"))
	}
}
func ensureSettingOlpcMeshChannelNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingOlpcMeshChannelExists(data) {
		rememberError(errs, "802-11-olpc-mesh", "channel", nmKeyErrorMissingValue)
	}
}
func ensureSettingOlpcMeshDhcpAnycastAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingOlpcMeshDhcpAnycastAddressExists(data) {
		rememberError(errs, "802-11-olpc-mesh", "dhcp-anycast-address", nmKeyErrorMissingValue)
	}
	value := getSettingOlpcMeshDhcpAnycastAddress(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-olpc-mesh", "dhcp-anycast-address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingOlpcMeshSsidNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingOlpcMeshSsidExists(data) {
		rememberError(errs, "802-11-olpc-mesh", "ssid", nmKeyErrorMissingValue)
	}
	value := getSettingOlpcMeshSsid(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-olpc-mesh", "ssid", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingPppExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "ppp") {
		rememberError(errs, relatedKey, "ppp", fmt.Sprintf(nmKeyErrorMissingSection, "ppp"))
	}
	sectionData, _ := data["ppp"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "ppp", fmt.Sprintf(nmKeyErrorEmptySection, "ppp"))
	}
}
func ensureSettingPppBaudNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppBaudExists(data) {
		rememberError(errs, "ppp", "baud", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppCrtsctsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppCrtsctsExists(data) {
		rememberError(errs, "ppp", "crtscts", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppLcpEchoFailureNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppLcpEchoFailureExists(data) {
		rememberError(errs, "ppp", "lcp-echo-failure", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppLcpEchoIntervalNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppLcpEchoIntervalExists(data) {
		rememberError(errs, "ppp", "lcp-echo-interval", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppMppeStatefulNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppMppeStatefulExists(data) {
		rememberError(errs, "ppp", "mppe-stateful", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppMruNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppMruExists(data) {
		rememberError(errs, "ppp", "mru", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppMtuNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppMtuExists(data) {
		rememberError(errs, "ppp", "mtu", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppNoVjCompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppNoVjCompExists(data) {
		rememberError(errs, "ppp", "no-vj-comp", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppNoauthNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppNoauthExists(data) {
		rememberError(errs, "ppp", "noauth", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppNobsdcompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppNobsdcompExists(data) {
		rememberError(errs, "ppp", "nobsdcomp", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppNodeflateNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppNodeflateExists(data) {
		rememberError(errs, "ppp", "nodeflate", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppRefuseChapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppRefuseChapExists(data) {
		rememberError(errs, "ppp", "refuse-chap", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppRefuseEapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppRefuseEapExists(data) {
		rememberError(errs, "ppp", "refuse-eap", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppRefuseMschapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppRefuseMschapExists(data) {
		rememberError(errs, "ppp", "refuse-mschap", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppRefuseMschapv2NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppRefuseMschapv2Exists(data) {
		rememberError(errs, "ppp", "refuse-mschapv2", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppRefusePapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppRefusePapExists(data) {
		rememberError(errs, "ppp", "refuse-pap", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppRequireMppeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppRequireMppeExists(data) {
		rememberError(errs, "ppp", "require-mppe", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppRequireMppe128NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppRequireMppe128Exists(data) {
		rememberError(errs, "ppp", "require-mppe-128", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingPppoeExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "pppoe") {
		rememberError(errs, relatedKey, "pppoe", fmt.Sprintf(nmKeyErrorMissingSection, "pppoe"))
	}
	sectionData, _ := data["pppoe"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "pppoe", fmt.Sprintf(nmKeyErrorEmptySection, "pppoe"))
	}
}
func ensureSettingPppoePasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppoePasswordExists(data) {
		rememberError(errs, "pppoe", "password", nmKeyErrorMissingValue)
	}
	value := getSettingPppoePassword(data)
	if len(value) == 0 {
		rememberError(errs, "pppoe", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingPppoePasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppoePasswordFlagsExists(data) {
		rememberError(errs, "pppoe", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingPppoeServiceNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppoeServiceExists(data) {
		rememberError(errs, "pppoe", "service", nmKeyErrorMissingValue)
	}
	value := getSettingPppoeService(data)
	if len(value) == 0 {
		rememberError(errs, "pppoe", "service", nmKeyErrorEmptyValue)
	}
}
func ensureSettingPppoeUsernameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingPppoeUsernameExists(data) {
		rememberError(errs, "pppoe", "username", nmKeyErrorMissingValue)
	}
	value := getSettingPppoeUsername(data)
	if len(value) == 0 {
		rememberError(errs, "pppoe", "username", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingSerialExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "serial") {
		rememberError(errs, relatedKey, "serial", fmt.Sprintf(nmKeyErrorMissingSection, "serial"))
	}
	sectionData, _ := data["serial"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "serial", fmt.Sprintf(nmKeyErrorEmptySection, "serial"))
	}
}
func ensureSettingSerialBaudNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingSerialBaudExists(data) {
		rememberError(errs, "serial", "baud", nmKeyErrorMissingValue)
	}
}
func ensureSettingSerialBitsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingSerialBitsExists(data) {
		rememberError(errs, "serial", "bits", nmKeyErrorMissingValue)
	}
}
func ensureSettingSerialParityNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingSerialParityExists(data) {
		rememberError(errs, "serial", "parity", nmKeyErrorMissingValue)
	}
}
func ensureSettingSerialSendDelayNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingSerialSendDelayExists(data) {
		rememberError(errs, "serial", "send-delay", nmKeyErrorMissingValue)
	}
}
func ensureSettingSerialStopbitsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingSerialStopbitsExists(data) {
		rememberError(errs, "serial", "stopbits", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingTeamExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "team") {
		rememberError(errs, relatedKey, "team", fmt.Sprintf(nmKeyErrorMissingSection, "team"))
	}
	sectionData, _ := data["team"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "team", fmt.Sprintf(nmKeyErrorEmptySection, "team"))
	}
}
func ensureSettingTeamConfigNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingTeamConfigExists(data) {
		rememberError(errs, "team", "config", nmKeyErrorMissingValue)
	}
	value := getSettingTeamConfig(data)
	if len(value) == 0 {
		rememberError(errs, "team", "config", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingTeamPortExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "team-port") {
		rememberError(errs, relatedKey, "team-port", fmt.Sprintf(nmKeyErrorMissingSection, "team-port"))
	}
	sectionData, _ := data["team-port"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "team-port", fmt.Sprintf(nmKeyErrorEmptySection, "team-port"))
	}
}
func ensureSettingTeamPortConfigNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingTeamPortConfigExists(data) {
		rememberError(errs, "team-port", "config", nmKeyErrorMissingValue)
	}
	value := getSettingTeamPortConfig(data)
	if len(value) == 0 {
		rememberError(errs, "team-port", "config", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingTunExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "tun") {
		rememberError(errs, relatedKey, "tun", fmt.Sprintf(nmKeyErrorMissingSection, "tun"))
	}
	sectionData, _ := data["tun"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "tun", fmt.Sprintf(nmKeyErrorEmptySection, "tun"))
	}
}
func ensureSettingTunGroupNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingTunGroupExists(data) {
		rememberError(errs, "tun", "group", nmKeyErrorMissingValue)
	}
	value := getSettingTunGroup(data)
	if len(value) == 0 {
		rememberError(errs, "tun", "group", nmKeyErrorEmptyValue)
	}
}
func ensureSettingTunModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingTunModeExists(data) {
		rememberError(errs, "tun", "mode", nmKeyErrorMissingValue)
	}
}
func ensureSettingTunMultiQueueNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingTunMultiQueueExists(data) {
		rememberError(errs, "tun", "multi-queue", nmKeyErrorMissingValue)
	}
}
func ensureSettingTunOwnerNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingTunOwnerExists(data) {
		rememberError(errs, "tun", "owner", nmKeyErrorMissingValue)
	}
	value := getSettingTunOwner(data)
	if len(value) == 0 {
		rememberError(errs, "tun", "owner", nmKeyErrorEmptyValue)
	}
}
func ensureSettingTunPiNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingTunPiExists(data) {
		rememberError(errs, "tun", "pi", nmKeyErrorMissingValue)
	}
}
func ensureSettingTunVnetHdrNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingTunVnetHdrExists(data) {
		rememberError(errs, "tun", "vnet-hdr", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingVlanExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "vlan") {
		rememberError(errs, relatedKey, "vlan", fmt.Sprintf(nmKeyErrorMissingSection, "vlan"))
	}
	sectionData, _ := data["vlan"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "vlan", fmt.Sprintf(nmKeyErrorEmptySection, "vlan"))
	}
}
func ensureSettingVlanEgressPriorityMapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVlanEgressPriorityMapExists(data) {
		rememberError(errs, "vlan", "egress-priority-map", nmKeyErrorMissingValue)
	}
	value := getSettingVlanEgressPriorityMap(data)
	if len(value) == 0 {
		rememberError(errs, "vlan", "egress-priority-map", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVlanFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVlanFlagsExists(data) {
		rememberError(errs, "vlan", "flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingVlanIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVlanIdExists(data) {
		rememberError(errs, "vlan", "id", nmKeyErrorMissingValue)
	}
}
func ensureSettingVlanIngressPriorityMapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVlanIngressPriorityMapExists(data) {
		rememberError(errs, "vlan", "ingress-priority-map", nmKeyErrorMissingValue)
	}
	value := getSettingVlanIngressPriorityMap(data)
	if len(value) == 0 {
		rememberError(errs, "vlan", "ingress-priority-map", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVlanParentNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVlanParentExists(data) {
		rememberError(errs, "vlan", "parent", nmKeyErrorMissingValue)
	}
	value := getSettingVlanParent(data)
	if len(value) == 0 {
		rememberError(errs, "vlan", "parent", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVpnExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "vpn") {
		rememberError(errs, relatedKey, "vpn", fmt.Sprintf(nmKeyErrorMissingSection, "vpn"))
	}
	sectionData, _ := data["vpn"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "vpn", fmt.Sprintf(nmKeyErrorEmptySection, "vpn"))
	}
}
func ensureSettingVpnDataNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnDataExists(data) {
		rememberError(errs, "vpn", "data", nmKeyErrorMissingValue)
	}
	value := getSettingVpnData(data)
	if len(value) == 0 {
		rememberError(errs, "vpn", "data", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnPersistentNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPersistentExists(data) {
		rememberError(errs, "vpn", "persistent", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnSecretsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnSecretsExists(data) {
		rememberError(errs, "vpn", "secrets", nmKeyErrorMissingValue)
	}
	value := getSettingVpnSecrets(data)
	if len(value) == 0 {
		rememberError(errs, "vpn", "secrets", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnServiceTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnServiceTypeExists(data) {
		rememberError(errs, "vpn", "service-type", nmKeyErrorMissingValue)
	}
	value := getSettingVpnServiceType(data)
	if len(value) == 0 {
		rememberError(errs, "vpn", "service-type", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnTimeoutNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnTimeoutExists(data) {
		rememberError(errs, "vpn", "timeout", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnUserNameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnUserNameExists(data) {
		rememberError(errs, "vpn", "user-name", nmKeyErrorMissingValue)
	}
	value := getSettingVpnUserName(data)
	if len(value) == 0 {
		rememberError(errs, "vpn", "user-name", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVxlanExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "vxlan") {
		rememberError(errs, relatedKey, "vxlan", fmt.Sprintf(nmKeyErrorMissingSection, "vxlan"))
	}
	sectionData, _ := data["vxlan"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "vxlan", fmt.Sprintf(nmKeyErrorEmptySection, "vxlan"))
	}
}
func ensureSettingVxlanAgeingNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanAgeingExists(data) {
		rememberError(errs, "vxlan", "ageing", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanDestinationPortNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanDestinationPortExists(data) {
		rememberError(errs, "vxlan", "destination-port", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanIdExists(data) {
		rememberError(errs, "vxlan", "id", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanL2MissNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanL2MissExists(data) {
		rememberError(errs, "vxlan", "l2-miss", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanL3MissNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanL3MissExists(data) {
		rememberError(errs, "vxlan", "l3-miss", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanLearningNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanLearningExists(data) {
		rememberError(errs, "vxlan", "learning", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanLimitNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanLimitExists(data) {
		rememberError(errs, "vxlan", "limit", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanLocalNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanLocalExists(data) {
		rememberError(errs, "vxlan", "local", nmKeyErrorMissingValue)
	}
	value := getSettingVxlanLocal(data)
	if len(value) == 0 {
		rememberError(errs, "vxlan", "local", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVxlanParentNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanParentExists(data) {
		rememberError(errs, "vxlan", "parent", nmKeyErrorMissingValue)
	}
	value := getSettingVxlanParent(data)
	if len(value) == 0 {
		rememberError(errs, "vxlan", "parent", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVxlanProxyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanProxyExists(data) {
		rememberError(errs, "vxlan", "proxy", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanRemoteNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanRemoteExists(data) {
		rememberError(errs, "vxlan", "remote", nmKeyErrorMissingValue)
	}
	value := getSettingVxlanRemote(data)
	if len(value) == 0 {
		rememberError(errs, "vxlan", "remote", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVxlanRscNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanRscExists(data) {
		rememberError(errs, "vxlan", "rsc", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanSourcePortMaxNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanSourcePortMaxExists(data) {
		rememberError(errs, "vxlan", "source-port-max", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanSourcePortMinNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanSourcePortMinExists(data) {
		rememberError(errs, "vxlan", "source-port-min", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanTosNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanTosExists(data) {
		rememberError(errs, "vxlan", "tos", nmKeyErrorMissingValue)
	}
}
func ensureSettingVxlanTtlNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVxlanTtlExists(data) {
		rememberError(errs, "vxlan", "ttl", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingWimaxExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "wimax") {
		rememberError(errs, relatedKey, "wimax", fmt.Sprintf(nmKeyErrorMissingSection, "wimax"))
	}
	sectionData, _ := data["wimax"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "wimax", fmt.Sprintf(nmKeyErrorEmptySection, "wimax"))
	}
}
func ensureSettingWimaxMacAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWimaxMacAddressExists(data) {
		rememberError(errs, "wimax", "mac-address", nmKeyErrorMissingValue)
	}
	value := getSettingWimaxMacAddress(data)
	if len(value) == 0 {
		rememberError(errs, "wimax", "mac-address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWimaxNetworkNameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWimaxNetworkNameExists(data) {
		rememberError(errs, "wimax", "network-name", nmKeyErrorMissingValue)
	}
	value := getSettingWimaxNetworkName(data)
	if len(value) == 0 {
		rememberError(errs, "wimax", "network-name", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingWiredExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "802-3-ethernet") {
		rememberError(errs, relatedKey, "802-3-ethernet", fmt.Sprintf(nmKeyErrorMissingSection, "802-3-ethernet"))
	}
	sectionData, _ := data["802-3-ethernet"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "802-3-ethernet", fmt.Sprintf(nmKeyErrorEmptySection, "802-3-ethernet"))
	}
}
func ensureSettingWiredAutoNegotiateNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredAutoNegotiateExists(data) {
		rememberError(errs, "802-3-ethernet", "auto-negotiate", nmKeyErrorMissingValue)
	}
}
func ensureSettingWiredClonedMacAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredClonedMacAddressExists(data) {
		rememberError(errs, "802-3-ethernet", "cloned-mac-address", nmKeyErrorMissingValue)
	}
	value := getSettingWiredClonedMacAddress(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "cloned-mac-address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredDuplexNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredDuplexExists(data) {
		rememberError(errs, "802-3-ethernet", "duplex", nmKeyErrorMissingValue)
	}
	value := getSettingWiredDuplex(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "duplex", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredGenerateMacAddressMaskNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredGenerateMacAddressMaskExists(data) {
		rememberError(errs, "802-3-ethernet", "generate-mac-address-mask", nmKeyErrorMissingValue)
	}
	value := getSettingWiredGenerateMacAddressMask(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "generate-mac-address-mask", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredMacAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredMacAddressExists(data) {
		rememberError(errs, "802-3-ethernet", "mac-address", nmKeyErrorMissingValue)
	}
	value := getSettingWiredMacAddress(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "mac-address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredMacAddressBlacklistNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredMacAddressBlacklistExists(data) {
		rememberError(errs, "802-3-ethernet", "mac-address-blacklist", nmKeyErrorMissingValue)
	}
	value := getSettingWiredMacAddressBlacklist(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "mac-address-blacklist", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredMtuNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredMtuExists(data) {
		rememberError(errs, "802-3-ethernet", "mtu", nmKeyErrorMissingValue)
	}
}
func ensureSettingWiredPortNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredPortExists(data) {
		rememberError(errs, "802-3-ethernet", "port", nmKeyErrorMissingValue)
	}
	value := getSettingWiredPort(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "port", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredS390NettypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredS390NettypeExists(data) {
		rememberError(errs, "802-3-ethernet", "s390-nettype", nmKeyErrorMissingValue)
	}
	value := getSettingWiredS390Nettype(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "s390-nettype", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredS390OptionsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredS390OptionsExists(data) {
		rememberError(errs, "802-3-ethernet", "s390-options", nmKeyErrorMissingValue)
	}
	value := getSettingWiredS390Options(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "s390-options", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredS390SubchannelsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredS390SubchannelsExists(data) {
		rememberError(errs, "802-3-ethernet", "s390-subchannels", nmKeyErrorMissingValue)
	}
	value := getSettingWiredS390Subchannels(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "s390-subchannels", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWiredSpeedNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredSpeedExists(data) {
		rememberError(errs, "802-3-ethernet", "speed", nmKeyErrorMissingValue)
	}
}
func ensureSettingWiredWakeOnLanNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredWakeOnLanExists(data) {
		rememberError(errs, "802-3-ethernet", "wake-on-lan", nmKeyErrorMissingValue)
	}
}
func ensureSettingWiredWakeOnLanPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWiredWakeOnLanPasswordExists(data) {
		rememberError(errs, "802-3-ethernet", "wake-on-lan-password", nmKeyErrorMissingValue)
	}
	value := getSettingWiredWakeOnLanPassword(data)
	if len(value) == 0 {
		rememberError(errs, "802-3-ethernet", "wake-on-lan-password", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingWirelessExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "802-11-wireless") {
		rememberError(errs, relatedKey, "802-11-wireless", fmt.Sprintf(nmKeyErrorMissingSection, "802-11-wireless"))
	}
	sectionData, _ := data["802-11-wireless"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "802-11-wireless", fmt.Sprintf(nmKeyErrorEmptySection, "802-11-wireless"))
	}
}
func ensureSettingWirelessBandNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessBandExists(data) {
		rememberError(errs, "802-11-wireless", "band", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessBand(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "band", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessBssidNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessBssidExists(data) {
		rememberError(errs, "802-11-wireless", "bssid", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessBssid(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "bssid", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessChannelNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessChannelExists(data) {
		rememberError(errs, "802-11-wireless", "channel", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessClonedMacAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessClonedMacAddressExists(data) {
		rememberError(errs, "802-11-wireless", "cloned-mac-address", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessClonedMacAddress(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "cloned-mac-address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessGenerateMacAddressMaskNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessGenerateMacAddressMaskExists(data) {
		rememberError(errs, "802-11-wireless", "generate-mac-address-mask", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessGenerateMacAddressMask(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "generate-mac-address-mask", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessHiddenNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessHiddenExists(data) {
		rememberError(errs, "802-11-wireless", "hidden", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessMacAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessMacAddressExists(data) {
		rememberError(errs, "802-11-wireless", "mac-address", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessMacAddress(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "mac-address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessMacAddressBlacklistNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessMacAddressBlacklistExists(data) {
		rememberError(errs, "802-11-wireless", "mac-address-blacklist", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessMacAddressBlacklist(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "mac-address-blacklist", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessMacAddressRandomizationNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessMacAddressRandomizationExists(data) {
		rememberError(errs, "802-11-wireless", "mac-address-randomization", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessModeExists(data) {
		rememberError(errs, "802-11-wireless", "mode", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessMode(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "mode", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessMtuNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessMtuExists(data) {
		rememberError(errs, "802-11-wireless", "mtu", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessPowersaveNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessPowersaveExists(data) {
		rememberError(errs, "802-11-wireless", "powersave", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessRateNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessRateExists(data) {
		rememberError(errs, "802-11-wireless", "rate", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessSeenBssidsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSeenBssidsExists(data) {
		rememberError(errs, "802-11-wireless", "seen-bssids", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSeenBssids(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "seen-bssids", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSsidNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSsidExists(data) {
		rememberError(errs, "802-11-wireless", "ssid", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSsid(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless", "ssid", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessTxPowerNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessTxPowerExists(data) {
		rememberError(errs, "802-11-wireless", "tx-power", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingWirelessSecurityExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "802-11-wireless-security") {
		rememberError(errs, relatedKey, "802-11-wireless-security", fmt.Sprintf(nmKeyErrorMissingSection, "802-11-wireless-security"))
	}
	sectionData, _ := data["802-11-wireless-security"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "802-11-wireless-security", fmt.Sprintf(nmKeyErrorEmptySection, "802-11-wireless-security"))
	}
}
func ensureSettingWirelessSecurityAuthAlgNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityAuthAlgExists(data) {
		rememberError(errs, "802-11-wireless-security", "auth-alg", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityAuthAlg(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "auth-alg", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityGroupNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityGroupExists(data) {
		rememberError(errs, "802-11-wireless-security", "group", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityGroup(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "group", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityKeyMgmtNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityKeyMgmtExists(data) {
		rememberError(errs, "802-11-wireless-security", "key-mgmt", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityKeyMgmt(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "key-mgmt", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityLeapPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityLeapPasswordExists(data) {
		rememberError(errs, "802-11-wireless-security", "leap-password", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityLeapPassword(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "leap-password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityLeapPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityLeapPasswordFlagsExists(data) {
		rememberError(errs, "802-11-wireless-security", "leap-password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessSecurityLeapUsernameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityLeapUsernameExists(data) {
		rememberError(errs, "802-11-wireless-security", "leap-username", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityLeapUsername(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "leap-username", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityPairwiseNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityPairwiseExists(data) {
		rememberError(errs, "802-11-wireless-security", "pairwise", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityPairwise(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "pairwise", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityProtoNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityProtoExists(data) {
		rememberError(errs, "802-11-wireless-security", "proto", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityProto(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "proto", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityPskNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityPskExists(data) {
		rememberError(errs, "802-11-wireless-security", "psk", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityPsk(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "psk", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityPskFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityPskFlagsExists(data) {
		rememberError(errs, "802-11-wireless-security", "psk-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessSecurityWepKeyFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityWepKeyFlagsExists(data) {
		rememberError(errs, "802-11-wireless-security", "wep-key-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessSecurityWepKeyTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityWepKeyTypeExists(data) {
		rememberError(errs, "802-11-wireless-security", "wep-key-type", nmKeyErrorMissingValue)
	}
}
func ensureSettingWirelessSecurityWepKey0NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityWepKey0Exists(data) {
		rememberError(errs, "802-11-wireless-security", "wep-key0", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityWepKey0(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "wep-key0", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityWepKey1NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityWepKey1Exists(data) {
		rememberError(errs, "802-11-wireless-security", "wep-key1", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityWepKey1(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "wep-key1", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityWepKey2NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityWepKey2Exists(data) {
		rememberError(errs, "802-11-wireless-security", "wep-key2", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityWepKey2(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "wep-key2", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityWepKey3NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityWepKey3Exists(data) {
		rememberError(errs, "802-11-wireless-security", "wep-key3", nmKeyErrorMissingValue)
	}
	value := getSettingWirelessSecurityWepKey3(data)
	if len(value) == 0 {
		rememberError(errs, "802-11-wireless-security", "wep-key3", nmKeyErrorEmptyValue)
	}
}
func ensureSettingWirelessSecurityWepTxKeyidxNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingWirelessSecurityWepTxKeyidxExists(data) {
		rememberError(errs, "802-11-wireless-security", "wep-tx-keyidx", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingVpnL2tpExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-l2tp") {
		rememberError(errs, relatedKey, "alias-vpn-l2tp", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-l2tp"))
	}
	sectionData, _ := data["alias-vpn-l2tp"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-l2tp", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-l2tp"))
	}
}
func ensureSettingVpnL2tpKeyGatewayNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyGatewayExists(data) {
		rememberError(errs, "alias-vpn-l2tp", "gateway", nmKeyErrorMissingValue)
	}
	value := getSettingVpnL2tpKeyGateway(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-l2tp", "gateway", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnL2tpKeyUserNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyUserExists(data) {
		rememberError(errs, "alias-vpn-l2tp", "user", nmKeyErrorMissingValue)
	}
	value := getSettingVpnL2tpKeyUser(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-l2tp", "user", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnL2tpKeyPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyPasswordFlagsExists(data) {
		rememberError(errs, "alias-vpn-l2tp", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyPasswordExists(data) {
		rememberError(errs, "alias-vpn-l2tp", "password", nmKeyErrorMissingValue)
	}
	value := getSettingVpnL2tpKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-l2tp", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnL2tpKeyDomainNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyDomainExists(data) {
		rememberError(errs, "alias-vpn-l2tp", "domain", nmKeyErrorMissingValue)
	}
	value := getSettingVpnL2tpKeyDomain(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-l2tp", "domain", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVpnL2tpPppExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-l2tp-ppp") {
		rememberError(errs, relatedKey, "alias-vpn-l2tp-ppp", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-l2tp-ppp"))
	}
	sectionData, _ := data["alias-vpn-l2tp-ppp"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-l2tp-ppp", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-l2tp-ppp"))
	}
}
func ensureSettingVpnL2tpKeyRequireMppeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyRequireMppeExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "require-mppe", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyRequireMppe40NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyRequireMppe40Exists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "require-mppe-40", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyRequireMppe128NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyRequireMppe128Exists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "require-mppe-128", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyMppeStatefulNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyMppeStatefulExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "mppe-stateful", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyRefuseEapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyRefuseEapExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "refuse-eap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyRefusePapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyRefusePapExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "refuse-pap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyRefuseChapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyRefuseChapExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "refuse-chap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyRefuseMschapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyRefuseMschapExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "refuse-mschap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyRefuseMschapv2NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyRefuseMschapv2Exists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "refuse-mschapv2", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyNobsdcompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyNobsdcompExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "nobsdcomp", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyNodeflateNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyNodeflateExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "nodeflate", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyNoVjCompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyNoVjCompExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "no-vj-comp", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyNoPcompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyNoPcompExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "nopcomp", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyNoAccompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyNoAccompExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "noaccomp", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyLcpEchoFailureNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyLcpEchoFailureExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "lcp-echo-failure", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyLcpEchoIntervalNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyLcpEchoIntervalExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ppp", "lcp-echo-interval", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingVpnL2tpIpsecExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-l2tp-ipsec") {
		rememberError(errs, relatedKey, "alias-vpn-l2tp-ipsec", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-l2tp-ipsec"))
	}
	sectionData, _ := data["alias-vpn-l2tp-ipsec"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-l2tp-ipsec", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-l2tp-ipsec"))
	}
}
func ensureSettingVpnL2tpKeyIpsecEnableNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyIpsecEnableExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ipsec", "ipsec-enabled", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnL2tpKeyIpsecGroupNameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyIpsecGroupNameExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ipsec", "ipsec-group-name", nmKeyErrorMissingValue)
	}
	value := getSettingVpnL2tpKeyIpsecGroupName(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-l2tp-ipsec", "ipsec-group-name", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnL2tpKeyIpsecGatewayIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyIpsecGatewayIdExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id", nmKeyErrorMissingValue)
	}
	value := getSettingVpnL2tpKeyIpsecGatewayId(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnL2tpKeyIpsecPskNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnL2tpKeyIpsecPskExists(data) {
		rememberError(errs, "alias-vpn-l2tp-ipsec", "ipsec-psk", nmKeyErrorMissingValue)
	}
	value := getSettingVpnL2tpKeyIpsecPsk(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-l2tp-ipsec", "ipsec-psk", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVpnOpenconnectExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-openconnect") {
		rememberError(errs, relatedKey, "alias-vpn-openconnect", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-openconnect"))
	}
	sectionData, _ := data["alias-vpn-openconnect"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-openconnect", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-openconnect"))
	}
}
func ensureSettingVpnOpenconnectKeyGatewayNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyGatewayExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "gateway", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyGateway(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "gateway", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyCacertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyCacertExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "cacert", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyCacert(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "cacert", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyProxyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyProxyExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "proxy", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyProxy(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "proxy", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyCsdEnableNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyCsdEnableExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "enable_csd_trojan", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenconnectKeyCsdWrapperNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyCsdWrapperExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "csd_wrapper", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyCsdWrapper(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "csd_wrapper", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyUsercertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyUsercertExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "usercert", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyUsercert(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "usercert", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyPrivkeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyPrivkeyExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "userkey", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyPrivkey(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "userkey", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyPemPassphraseFsidNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyPemPassphraseFsidExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "pem_passphrase_fsid", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenconnectKeyCookieNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyCookieExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "cookie", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyCookie(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "cookie", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyGwcertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyGwcertExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "gwcert", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyGwcert(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "gwcert", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyAuthtypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyAuthtypeExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "authtype", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyAuthtype(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "authtype", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyMtuNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyMtuExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "mtu", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyMtu(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "mtu", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyStokenSourceNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyStokenSourceExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "stoken_source", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyStokenSource(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "stoken_source", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenconnectKeyStokenStringNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenconnectKeyStokenStringExists(data) {
		rememberError(errs, "alias-vpn-openconnect", "stoken_string", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenconnectKeyStokenString(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openconnect", "stoken_string", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVpnOpenvpnExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-openvpn") {
		rememberError(errs, relatedKey, "alias-vpn-openvpn", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-openvpn"))
	}
	sectionData, _ := data["alias-vpn-openvpn"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-openvpn", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-openvpn"))
	}
}
func ensureSettingVpnOpenvpnKeyRemoteNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyRemoteExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "remote", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyRemote(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "remote", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyConnectionTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyConnectionTypeExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "connection-type", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyConnectionType(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "connection-type", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyUsernameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyUsernameExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "username", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyUsername(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "username", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyPasswordFlagsExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyPasswordExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "password", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyCaNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyCaExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "ca", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyCa(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "ca", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyCertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyCertExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "cert", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyCert(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "cert", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyKeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyKeyExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "key", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyKey(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "key", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyCertpassFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyCertpassFlagsExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "cert-pass-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyCertpassNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyCertpassExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "cert-pass", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyCertpass(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "cert-pass", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyStaticKeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyStaticKeyExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "static-key", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyStaticKey(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "static-key", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyStaticKeyDirectionNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyStaticKeyDirectionExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "static-key-direction", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyRemoteIpNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyRemoteIpExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "remote-ip", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyRemoteIp(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "remote-ip", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyLocalIpNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyLocalIpExists(data) {
		rememberError(errs, "alias-vpn-openvpn", "local-ip", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyLocalIp(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn", "local-ip", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVpnOpenvpnAdvancedExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-openvpn-advanced") {
		rememberError(errs, relatedKey, "alias-vpn-openvpn-advanced", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-openvpn-advanced"))
	}
	sectionData, _ := data["alias-vpn-openvpn-advanced"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-openvpn-advanced", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-openvpn-advanced"))
	}
}
func ensureSettingVpnOpenvpnKeyPortNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyPortExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "port", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyRenegSecondsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyRenegSecondsExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "reneg-seconds", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyCompLzoNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyCompLzoExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "comp-lzo", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyProtoTcpNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyProtoTcpExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "proto-tcp", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyTapDevNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyTapDevExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "tap-dev", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyTunnelMtuNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyTunnelMtuExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "tunnel-mtu", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyFragmentSizeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyFragmentSizeExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "fragment-size", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyMssfixNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyMssfixExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "mssfix", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyRemoteRandomNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyRemoteRandomExists(data) {
		rememberError(errs, "alias-vpn-openvpn-advanced", "remote-random", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingVpnOpenvpnSecurityExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-openvpn-security") {
		rememberError(errs, relatedKey, "alias-vpn-openvpn-security", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-openvpn-security"))
	}
	sectionData, _ := data["alias-vpn-openvpn-security"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-openvpn-security", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-openvpn-security"))
	}
}
func ensureSettingVpnOpenvpnKeyCipherNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyCipherExists(data) {
		rememberError(errs, "alias-vpn-openvpn-security", "cipher", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyCipher(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-security", "cipher", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyAuthNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyAuthExists(data) {
		rememberError(errs, "alias-vpn-openvpn-security", "auth", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyAuth(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-security", "auth", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVpnOpenvpnTlsauthExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-openvpn-tlsauth") {
		rememberError(errs, relatedKey, "alias-vpn-openvpn-tlsauth", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-openvpn-tlsauth"))
	}
	sectionData, _ := data["alias-vpn-openvpn-tlsauth"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-openvpn-tlsauth", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-openvpn-tlsauth"))
	}
}
func ensureSettingVpnOpenvpnKeyTlsRemoteNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyTlsRemoteExists(data) {
		rememberError(errs, "alias-vpn-openvpn-tlsauth", "tls-remote", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyTlsRemote(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-tlsauth", "tls-remote", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyRemoteCertTlsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyRemoteCertTlsExists(data) {
		rememberError(errs, "alias-vpn-openvpn-tlsauth", "remote-cert-tls", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyRemoteCertTls(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-tlsauth", "remote-cert-tls", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyTaNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyTaExists(data) {
		rememberError(errs, "alias-vpn-openvpn-tlsauth", "ta", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyTa(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-tlsauth", "ta", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyTaDirNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyTaDirExists(data) {
		rememberError(errs, "alias-vpn-openvpn-tlsauth", "ta-dir", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingVpnOpenvpnProxiesExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-openvpn-proxies") {
		rememberError(errs, relatedKey, "alias-vpn-openvpn-proxies", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-openvpn-proxies"))
	}
	sectionData, _ := data["alias-vpn-openvpn-proxies"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-openvpn-proxies", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-openvpn-proxies"))
	}
}
func ensureSettingVpnOpenvpnKeyProxyTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyProxyTypeExists(data) {
		rememberError(errs, "alias-vpn-openvpn-proxies", "proxy-type", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyProxyType(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-proxies", "proxy-type", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyProxyServerNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyProxyServerExists(data) {
		rememberError(errs, "alias-vpn-openvpn-proxies", "proxy-server", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyProxyServer(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-proxies", "proxy-server", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyProxyPortNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyProxyPortExists(data) {
		rememberError(errs, "alias-vpn-openvpn-proxies", "proxy-port", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyProxyRetryNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyProxyRetryExists(data) {
		rememberError(errs, "alias-vpn-openvpn-proxies", "proxy-retry", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnOpenvpnKeyHttpProxyUsernameNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyHttpProxyUsernameExists(data) {
		rememberError(errs, "alias-vpn-openvpn-proxies", "http-proxy-username", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyHttpProxyUsername(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-proxies", "http-proxy-username", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyHttpProxyPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyHttpProxyPasswordExists(data) {
		rememberError(errs, "alias-vpn-openvpn-proxies", "http-proxy-password", nmKeyErrorMissingValue)
	}
	value := getSettingVpnOpenvpnKeyHttpProxyPassword(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-openvpn-proxies", "http-proxy-password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnOpenvpnKeyHttpProxyPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnOpenvpnKeyHttpProxyPasswordFlagsExists(data) {
		rememberError(errs, "alias-vpn-openvpn-proxies", "http-proxy-password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingVpnPptpExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-pptp") {
		rememberError(errs, relatedKey, "alias-vpn-pptp", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-pptp"))
	}
	sectionData, _ := data["alias-vpn-pptp"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-pptp", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-pptp"))
	}
}
func ensureSettingVpnPptpKeyGatewayNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyGatewayExists(data) {
		rememberError(errs, "alias-vpn-pptp", "gateway", nmKeyErrorMissingValue)
	}
	value := getSettingVpnPptpKeyGateway(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-pptp", "gateway", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnPptpKeyUserNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyUserExists(data) {
		rememberError(errs, "alias-vpn-pptp", "user", nmKeyErrorMissingValue)
	}
	value := getSettingVpnPptpKeyUser(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-pptp", "user", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnPptpKeyPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyPasswordFlagsExists(data) {
		rememberError(errs, "alias-vpn-pptp", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyPasswordExists(data) {
		rememberError(errs, "alias-vpn-pptp", "password", nmKeyErrorMissingValue)
	}
	value := getSettingVpnPptpKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-pptp", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnPptpKeyDomainNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyDomainExists(data) {
		rememberError(errs, "alias-vpn-pptp", "domain", nmKeyErrorMissingValue)
	}
	value := getSettingVpnPptpKeyDomain(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-pptp", "domain", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVpnPptpPppExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-pptp-ppp") {
		rememberError(errs, relatedKey, "alias-vpn-pptp-ppp", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-pptp-ppp"))
	}
	sectionData, _ := data["alias-vpn-pptp-ppp"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-pptp-ppp", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-pptp-ppp"))
	}
}
func ensureSettingVpnPptpKeyRequireMppeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyRequireMppeExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "require-mppe", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyRequireMppe40NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyRequireMppe40Exists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "require-mppe-40", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyRequireMppe128NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyRequireMppe128Exists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "require-mppe-128", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyMppeStatefulNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyMppeStatefulExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "mppe-stateful", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyRefuseEapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyRefuseEapExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "refuse-eap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyRefusePapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyRefusePapExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "refuse-pap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyRefuseChapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyRefuseChapExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "refuse-chap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyRefuseMschapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyRefuseMschapExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "refuse-mschap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyRefuseMschapv2NoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyRefuseMschapv2Exists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "refuse-mschapv2", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyNobsdcompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyNobsdcompExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "nobsdcomp", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyNodeflateNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyNodeflateExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "nodeflate", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyNoVjCompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyNoVjCompExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "no-vj-comp", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyLcpEchoFailureNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyLcpEchoFailureExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "lcp-echo-failure", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnPptpKeyLcpEchoIntervalNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnPptpKeyLcpEchoIntervalExists(data) {
		rememberError(errs, "alias-vpn-pptp-ppp", "lcp-echo-interval", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingVpnStrongswanExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-strongswan") {
		rememberError(errs, relatedKey, "alias-vpn-strongswan", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-strongswan"))
	}
	sectionData, _ := data["alias-vpn-strongswan"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-strongswan", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-strongswan"))
	}
}
func ensureSettingVpnStrongswanKeyAddressNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyAddressExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "address", nmKeyErrorMissingValue)
	}
	value := getSettingVpnStrongswanKeyAddress(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-strongswan", "address", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnStrongswanKeyCertificateNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyCertificateExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "certificate", nmKeyErrorMissingValue)
	}
	value := getSettingVpnStrongswanKeyCertificate(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-strongswan", "certificate", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnStrongswanKeyMethodNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyMethodExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "method", nmKeyErrorMissingValue)
	}
	value := getSettingVpnStrongswanKeyMethod(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-strongswan", "method", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnStrongswanKeyUserNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyUserExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "user", nmKeyErrorMissingValue)
	}
	value := getSettingVpnStrongswanKeyUser(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-strongswan", "user", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnStrongswanKeyUsercertNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyUsercertExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "usercert", nmKeyErrorMissingValue)
	}
	value := getSettingVpnStrongswanKeyUsercert(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-strongswan", "usercert", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnStrongswanKeyUserkeyNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyUserkeyExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "userkey", nmKeyErrorMissingValue)
	}
	value := getSettingVpnStrongswanKeyUserkey(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-strongswan", "userkey", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnStrongswanKeyPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyPasswordExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "password", nmKeyErrorMissingValue)
	}
	value := getSettingVpnStrongswanKeyPassword(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-strongswan", "password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnStrongswanKeyPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyPasswordFlagsExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnStrongswanKeyVirtualNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyVirtualExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "virtual", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnStrongswanKeyEncapNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyEncapExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "encap", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnStrongswanKeyIpcompNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnStrongswanKeyIpcompExists(data) {
		rememberError(errs, "alias-vpn-strongswan", "ipcomp", nmKeyErrorMissingValue)
	}
}
func ensureSectionSettingVpnVpncExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-vpnc") {
		rememberError(errs, relatedKey, "alias-vpn-vpnc", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-vpnc"))
	}
	sectionData, _ := data["alias-vpn-vpnc"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-vpnc", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-vpnc"))
	}
}
func ensureSettingVpnVpncKeyGatewayNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyGatewayExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "IPSec gateway", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyGateway(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "IPSec gateway", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyXauthUserNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyXauthUserExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "Xauth username", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyXauthUser(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "Xauth username", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyXauthPasswordTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyXauthPasswordTypeExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "xauth-password-type", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyXauthPasswordType(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "xauth-password-type", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyXauthPasswordFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyXauthPasswordFlagsExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "Xauth password-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnVpncKeyXauthPasswordNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyXauthPasswordExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "Xauth password", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyXauthPassword(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "Xauth password", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyIdNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyIdExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "IPSec ID", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyId(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "IPSec ID", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeySecretTypeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeySecretTypeExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "ipsec-secret-type", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeySecretType(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "ipsec-secret-type", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeySecretFlagsNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeySecretFlagsExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "IPSec secret-flags", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnVpncKeySecretNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeySecretExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "IPSec secret", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeySecret(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "IPSec secret", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyAuthmodeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyAuthmodeExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "IKE Authmode", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyAuthmode(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "IKE Authmode", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyCaFileNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyCaFileExists(data) {
		rememberError(errs, "alias-vpn-vpnc", "CA-File", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyCaFile(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc", "CA-File", nmKeyErrorEmptyValue)
	}
}
func ensureSectionSettingVpnVpncAdvancedExists(data connectionData, errs sectionErrors, relatedKey string) {
	if !isSettingExists(data, "alias-vpn-vpnc-advanced") {
		rememberError(errs, relatedKey, "alias-vpn-vpnc-advanced", fmt.Sprintf(nmKeyErrorMissingSection, "alias-vpn-vpnc-advanced"))
	}
	sectionData, _ := data["alias-vpn-vpnc-advanced"]
	if len(sectionData) == 0 {
		rememberError(errs, relatedKey, "alias-vpn-vpnc-advanced", fmt.Sprintf(nmKeyErrorEmptySection, "alias-vpn-vpnc-advanced"))
	}
}
func ensureSettingVpnVpncKeyDomainNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyDomainExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Domain", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyDomain(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Domain", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyVendorNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyVendorExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Vendor", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyVendor(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Vendor", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyAppVersionNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyAppVersionExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Application Version", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyAppVersion(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Application Version", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeySingleDesNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeySingleDesExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Enable Single DES", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnVpncKeyNoEncryptionNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyNoEncryptionExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Enable no encryption", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnVpncKeyNatTraversalModeNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyNatTraversalModeExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "NAT Traversal Mode", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyNatTraversalMode(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc-advanced", "NAT Traversal Mode", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyDhgroupNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyDhgroupExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "IKE DH Group", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyDhgroup(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc-advanced", "IKE DH Group", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyPerfectForwardNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyPerfectForwardExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy", nmKeyErrorMissingValue)
	}
	value := getSettingVpnVpncKeyPerfectForward(data)
	if len(value) == 0 {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy", nmKeyErrorEmptyValue)
	}
}
func ensureSettingVpnVpncKeyLocalPortNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyLocalPortExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Local Port", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnVpncKeyDpdIdleTimeoutNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyDpdIdleTimeoutExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)", nmKeyErrorMissingValue)
	}
}
func ensureSettingVpnVpncKeyCiscoUdpEncapsPortNoEmpty(data connectionData, errs sectionErrors) {
	if !isSettingVpnVpncKeyCiscoUdpEncapsPortExists(data) {
		rememberError(errs, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port", nmKeyErrorMissingValue)
	}
}

// Check is key exists
func isSetting8021xAltsubjectMatchesExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "altsubject-matches")
}
func isSetting8021xAnonymousIdentityExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "anonymous-identity")
}
func isSetting8021xCaCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "ca-cert")
}
func isSetting8021xCaPathExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "ca-path")
}
func isSetting8021xClientCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "client-cert")
}
func isSetting8021xDomainSuffixMatchExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "domain-suffix-match")
}
func isSetting8021xEapExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "eap")
}
func isSetting8021xIdentityExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "identity")
}
func isSetting8021xPacFileExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "pac-file")
}
func isSetting8021xPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "password")
}
func isSetting8021xPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "password-flags")
}
func isSetting8021xPasswordRawExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "password-raw")
}
func isSetting8021xPasswordRawFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "password-raw-flags")
}
func isSetting8021xPhase1FastProvisioningExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase1-fast-provisioning")
}
func isSetting8021xPhase1PeaplabelExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase1-peaplabel")
}
func isSetting8021xPhase1PeapverExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase1-peapver")
}
func isSetting8021xPhase2AltsubjectMatchesExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-altsubject-matches")
}
func isSetting8021xPhase2AuthExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-auth")
}
func isSetting8021xPhase2AutheapExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-autheap")
}
func isSetting8021xPhase2CaCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-ca-cert")
}
func isSetting8021xPhase2CaPathExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-ca-path")
}
func isSetting8021xPhase2ClientCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-client-cert")
}
func isSetting8021xPhase2DomainSuffixMatchExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-domain-suffix-match")
}
func isSetting8021xPhase2PrivateKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-private-key")
}
func isSetting8021xPhase2PrivateKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-private-key-password")
}
func isSetting8021xPhase2PrivateKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-private-key-password-flags")
}
func isSetting8021xPhase2SubjectMatchExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "phase2-subject-match")
}
func isSetting8021xPinExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "pin")
}
func isSetting8021xPinFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "pin-flags")
}
func isSetting8021xPrivateKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "private-key")
}
func isSetting8021xPrivateKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "private-key-password")
}
func isSetting8021xPrivateKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "private-key-password-flags")
}
func isSetting8021xSubjectMatchExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "subject-match")
}
func isSetting8021xSystemCaCertsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-1x", "system-ca-certs")
}
func isSettingAdslEncapsulationExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "encapsulation")
}
func isSettingAdslPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "password")
}
func isSettingAdslPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "password-flags")
}
func isSettingAdslProtocolExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "protocol")
}
func isSettingAdslUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "username")
}
func isSettingAdslVciExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "vci")
}
func isSettingAdslVpiExists(data connectionData) bool {
	return isSettingKeyExists(data, "adsl", "vpi")
}
func isSettingBluetoothBdaddrExists(data connectionData) bool {
	return isSettingKeyExists(data, "bluetooth", "bdaddr")
}
func isSettingBluetoothTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bluetooth", "type")
}
func isSettingBondOptionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "bond", "options")
}
func isSettingBridgeAgeingTimeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "ageing-time")
}
func isSettingBridgeForwardDelayExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "forward-delay")
}
func isSettingBridgeHelloTimeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "hello-time")
}
func isSettingBridgeMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "mac-address")
}
func isSettingBridgeMaxAgeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "max-age")
}
func isSettingBridgeMulticastSnoopingExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "multicast-snooping")
}
func isSettingBridgePriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "priority")
}
func isSettingBridgeStpExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge", "stp")
}
func isSettingBridgePortHairpinModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge-port", "hairpin-mode")
}
func isSettingBridgePortPathCostExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge-port", "path-cost")
}
func isSettingBridgePortPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "bridge-port", "priority")
}
func isSettingCdmaNumberExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "number")
}
func isSettingCdmaPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "password")
}
func isSettingCdmaPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "password-flags")
}
func isSettingCdmaUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "cdma", "username")
}
func isSettingConnectionAutoconnectExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "autoconnect")
}
func isSettingConnectionAutoconnectPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "autoconnect-priority")
}
func isSettingConnectionAutoconnectSlavesExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "autoconnect-slaves")
}
func isSettingConnectionGatewayPingTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "gateway-ping-timeout")
}
func isSettingConnectionIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "id")
}
func isSettingConnectionInterfaceNameExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "interface-name")
}
func isSettingConnectionLldpExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "lldp")
}
func isSettingConnectionMasterExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "master")
}
func isSettingConnectionMeteredExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "metered")
}
func isSettingConnectionPermissionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "permissions")
}
func isSettingConnectionReadOnlyExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "read-only")
}
func isSettingConnectionSecondariesExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "secondaries")
}
func isSettingConnectionSlaveTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "slave-type")
}
func isSettingConnectionStableIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "stable-id")
}
func isSettingConnectionTimestampExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "timestamp")
}
func isSettingConnectionTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "type")
}
func isSettingConnectionUuidExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "uuid")
}
func isSettingConnectionZoneExists(data connectionData) bool {
	return isSettingKeyExists(data, "connection", "zone")
}
func isSettingDcbAppFcoeFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fcoe-flags")
}
func isSettingDcbAppFcoeModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fcoe-mode")
}
func isSettingDcbAppFcoePriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fcoe-priority")
}
func isSettingDcbAppFipFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fip-flags")
}
func isSettingDcbAppFipPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-fip-priority")
}
func isSettingDcbAppIscsiFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-iscsi-flags")
}
func isSettingDcbAppIscsiPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "app-iscsi-priority")
}
func isSettingDcbPriorityBandwidthExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-bandwidth")
}
func isSettingDcbPriorityFlowControlExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-flow-control")
}
func isSettingDcbPriorityFlowControlFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-flow-control-flags")
}
func isSettingDcbPriorityGroupBandwidthExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-group-bandwidth")
}
func isSettingDcbPriorityGroupFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-group-flags")
}
func isSettingDcbPriorityGroupIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-group-id")
}
func isSettingDcbPriorityStrictBandwidthExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-strict-bandwidth")
}
func isSettingDcbPriorityTrafficClassExists(data connectionData) bool {
	return isSettingKeyExists(data, "dcb", "priority-traffic-class")
}
func isSettingGsmApnExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "apn")
}
func isSettingGsmDeviceIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "device-id")
}
func isSettingGsmHomeOnlyExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "home-only")
}
func isSettingGsmNetworkIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "network-id")
}
func isSettingGsmNumberExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "number")
}
func isSettingGsmPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "password")
}
func isSettingGsmPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "password-flags")
}
func isSettingGsmPinExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "pin")
}
func isSettingGsmPinFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "pin-flags")
}
func isSettingGsmSimIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "sim-id")
}
func isSettingGsmSimOperatorIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "sim-operator-id")
}
func isSettingGsmUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "gsm", "username")
}
func isSettingInfinibandMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "mac-address")
}
func isSettingInfinibandMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "mtu")
}
func isSettingInfinibandPKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "p-key")
}
func isSettingInfinibandParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "parent")
}
func isSettingInfinibandTransportModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "infiniband", "transport-mode")
}
func isSettingIP4ConfigAddressesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "addresses")
}
func isSettingIP4ConfigDadTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dad-timeout")
}
func isSettingIP4ConfigDhcpClientIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-client-id")
}
func isSettingIP4ConfigDhcpFqdnExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-fqdn")
}
func isSettingIP4ConfigDhcpHostnameExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-hostname")
}
func isSettingIP4ConfigDhcpSendHostnameExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-send-hostname")
}
func isSettingIP4ConfigDhcpTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dhcp-timeout")
}
func isSettingIP4ConfigDnsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dns")
}
func isSettingIP4ConfigDnsOptionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dns-options")
}
func isSettingIP4ConfigDnsPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dns-priority")
}
func isSettingIP4ConfigDnsSearchExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "dns-search")
}
func isSettingIP4ConfigGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "gateway")
}
func isSettingIP4ConfigIgnoreAutoDnsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "ignore-auto-dns")
}
func isSettingIP4ConfigIgnoreAutoRoutesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "ignore-auto-routes")
}
func isSettingIP4ConfigMayFailExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "may-fail")
}
func isSettingIP4ConfigMethodExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "method")
}
func isSettingIP4ConfigNeverDefaultExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "never-default")
}
func isSettingIP4ConfigRouteMetricExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "route-metric")
}
func isSettingIP4ConfigRoutesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv4", "routes")
}
func isSettingIP6ConfigAddrGenModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "addr-gen-mode")
}
func isSettingIP6ConfigAddressesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "addresses")
}
func isSettingIP6ConfigDadTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dad-timeout")
}
func isSettingIP6ConfigDhcpHostnameExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dhcp-hostname")
}
func isSettingIP6ConfigDhcpSendHostnameExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dhcp-send-hostname")
}
func isSettingIP6ConfigDhcpTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dhcp-timeout")
}
func isSettingIP6ConfigDnsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dns")
}
func isSettingIP6ConfigDnsOptionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dns-options")
}
func isSettingIP6ConfigDnsPriorityExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dns-priority")
}
func isSettingIP6ConfigDnsSearchExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "dns-search")
}
func isSettingIP6ConfigGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "gateway")
}
func isSettingIP6ConfigIgnoreAutoDnsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "ignore-auto-dns")
}
func isSettingIP6ConfigIgnoreAutoRoutesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "ignore-auto-routes")
}
func isSettingIP6ConfigIp6PrivacyExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "ip6-privacy")
}
func isSettingIP6ConfigMayFailExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "may-fail")
}
func isSettingIP6ConfigMethodExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "method")
}
func isSettingIP6ConfigNeverDefaultExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "never-default")
}
func isSettingIP6ConfigRouteMetricExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "route-metric")
}
func isSettingIP6ConfigRoutesExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "routes")
}
func isSettingIP6ConfigTokenExists(data connectionData) bool {
	return isSettingKeyExists(data, "ipv6", "token")
}
func isSettingIPTunnelEncapsulationLimitExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "encapsulation-limit")
}
func isSettingIPTunnelFlowLabelExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "flow-label")
}
func isSettingIPTunnelInputKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "input-key")
}
func isSettingIPTunnelLocalExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "local")
}
func isSettingIPTunnelModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "mode")
}
func isSettingIPTunnelMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "mtu")
}
func isSettingIPTunnelOutputKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "output-key")
}
func isSettingIPTunnelParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "parent")
}
func isSettingIPTunnelPathMtuDiscoveryExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "path-mtu-discovery")
}
func isSettingIPTunnelRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "remote")
}
func isSettingIPTunnelTosExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "tos")
}
func isSettingIPTunnelTtlExists(data connectionData) bool {
	return isSettingKeyExists(data, "ip-tunnel", "ttl")
}
func isSettingMacvlanModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "macvlan", "mode")
}
func isSettingMacvlanParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "macvlan", "parent")
}
func isSettingMacvlanPromiscuousExists(data connectionData) bool {
	return isSettingKeyExists(data, "macvlan", "promiscuous")
}
func isSettingMacvlanTapExists(data connectionData) bool {
	return isSettingKeyExists(data, "macvlan", "tap")
}
func isSettingOlpcMeshChannelExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-olpc-mesh", "channel")
}
func isSettingOlpcMeshDhcpAnycastAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-olpc-mesh", "dhcp-anycast-address")
}
func isSettingOlpcMeshSsidExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-olpc-mesh", "ssid")
}
func isSettingPppBaudExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "baud")
}
func isSettingPppCrtsctsExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "crtscts")
}
func isSettingPppLcpEchoFailureExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "lcp-echo-failure")
}
func isSettingPppLcpEchoIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "lcp-echo-interval")
}
func isSettingPppMppeStatefulExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "mppe-stateful")
}
func isSettingPppMruExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "mru")
}
func isSettingPppMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "mtu")
}
func isSettingPppNoVjCompExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "no-vj-comp")
}
func isSettingPppNoauthExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "noauth")
}
func isSettingPppNobsdcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "nobsdcomp")
}
func isSettingPppNodeflateExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "nodeflate")
}
func isSettingPppRefuseChapExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-chap")
}
func isSettingPppRefuseEapExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-eap")
}
func isSettingPppRefuseMschapExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-mschap")
}
func isSettingPppRefuseMschapv2Exists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-mschapv2")
}
func isSettingPppRefusePapExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "refuse-pap")
}
func isSettingPppRequireMppeExists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "require-mppe")
}
func isSettingPppRequireMppe128Exists(data connectionData) bool {
	return isSettingKeyExists(data, "ppp", "require-mppe-128")
}
func isSettingPppoePasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "password")
}
func isSettingPppoePasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "password-flags")
}
func isSettingPppoeServiceExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "service")
}
func isSettingPppoeUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "pppoe", "username")
}
func isSettingSerialBaudExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "baud")
}
func isSettingSerialBitsExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "bits")
}
func isSettingSerialParityExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "parity")
}
func isSettingSerialSendDelayExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "send-delay")
}
func isSettingSerialStopbitsExists(data connectionData) bool {
	return isSettingKeyExists(data, "serial", "stopbits")
}
func isSettingTeamConfigExists(data connectionData) bool {
	return isSettingKeyExists(data, "team", "config")
}
func isSettingTeamPortConfigExists(data connectionData) bool {
	return isSettingKeyExists(data, "team-port", "config")
}
func isSettingTunGroupExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "group")
}
func isSettingTunModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "mode")
}
func isSettingTunMultiQueueExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "multi-queue")
}
func isSettingTunOwnerExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "owner")
}
func isSettingTunPiExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "pi")
}
func isSettingTunVnetHdrExists(data connectionData) bool {
	return isSettingKeyExists(data, "tun", "vnet-hdr")
}
func isSettingVlanEgressPriorityMapExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "egress-priority-map")
}
func isSettingVlanFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "flags")
}
func isSettingVlanIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "id")
}
func isSettingVlanIngressPriorityMapExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "ingress-priority-map")
}
func isSettingVlanParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "vlan", "parent")
}
func isSettingVpnDataExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "data")
}
func isSettingVpnPersistentExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "persistent")
}
func isSettingVpnSecretsExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "secrets")
}
func isSettingVpnServiceTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "service-type")
}
func isSettingVpnTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "timeout")
}
func isSettingVpnUserNameExists(data connectionData) bool {
	return isSettingKeyExists(data, "vpn", "user-name")
}
func isSettingVxlanAgeingExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "ageing")
}
func isSettingVxlanDestinationPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "destination-port")
}
func isSettingVxlanIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "id")
}
func isSettingVxlanL2MissExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "l2-miss")
}
func isSettingVxlanL3MissExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "l3-miss")
}
func isSettingVxlanLearningExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "learning")
}
func isSettingVxlanLimitExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "limit")
}
func isSettingVxlanLocalExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "local")
}
func isSettingVxlanParentExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "parent")
}
func isSettingVxlanProxyExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "proxy")
}
func isSettingVxlanRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "remote")
}
func isSettingVxlanRscExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "rsc")
}
func isSettingVxlanSourcePortMaxExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "source-port-max")
}
func isSettingVxlanSourcePortMinExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "source-port-min")
}
func isSettingVxlanTosExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "tos")
}
func isSettingVxlanTtlExists(data connectionData) bool {
	return isSettingKeyExists(data, "vxlan", "ttl")
}
func isSettingWimaxMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "wimax", "mac-address")
}
func isSettingWimaxNetworkNameExists(data connectionData) bool {
	return isSettingKeyExists(data, "wimax", "network-name")
}
func isSettingWiredAutoNegotiateExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "auto-negotiate")
}
func isSettingWiredClonedMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "cloned-mac-address")
}
func isSettingWiredDuplexExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "duplex")
}
func isSettingWiredGenerateMacAddressMaskExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "generate-mac-address-mask")
}
func isSettingWiredMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "mac-address")
}
func isSettingWiredMacAddressBlacklistExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "mac-address-blacklist")
}
func isSettingWiredMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "mtu")
}
func isSettingWiredPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "port")
}
func isSettingWiredS390NettypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "s390-nettype")
}
func isSettingWiredS390OptionsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "s390-options")
}
func isSettingWiredS390SubchannelsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "s390-subchannels")
}
func isSettingWiredSpeedExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "speed")
}
func isSettingWiredWakeOnLanExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "wake-on-lan")
}
func isSettingWiredWakeOnLanPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-3-ethernet", "wake-on-lan-password")
}
func isSettingWirelessBandExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "band")
}
func isSettingWirelessBssidExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "bssid")
}
func isSettingWirelessChannelExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "channel")
}
func isSettingWirelessClonedMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "cloned-mac-address")
}
func isSettingWirelessGenerateMacAddressMaskExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "generate-mac-address-mask")
}
func isSettingWirelessHiddenExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "hidden")
}
func isSettingWirelessMacAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mac-address")
}
func isSettingWirelessMacAddressBlacklistExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mac-address-blacklist")
}
func isSettingWirelessMacAddressRandomizationExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mac-address-randomization")
}
func isSettingWirelessModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mode")
}
func isSettingWirelessMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "mtu")
}
func isSettingWirelessPowersaveExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "powersave")
}
func isSettingWirelessRateExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "rate")
}
func isSettingWirelessSeenBssidsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "seen-bssids")
}
func isSettingWirelessSsidExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "ssid")
}
func isSettingWirelessTxPowerExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless", "tx-power")
}
func isSettingWirelessSecurityAuthAlgExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "auth-alg")
}
func isSettingWirelessSecurityGroupExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "group")
}
func isSettingWirelessSecurityKeyMgmtExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "key-mgmt")
}
func isSettingWirelessSecurityLeapPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "leap-password")
}
func isSettingWirelessSecurityLeapPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "leap-password-flags")
}
func isSettingWirelessSecurityLeapUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "leap-username")
}
func isSettingWirelessSecurityPairwiseExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "pairwise")
}
func isSettingWirelessSecurityProtoExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "proto")
}
func isSettingWirelessSecurityPskExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "psk")
}
func isSettingWirelessSecurityPskFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "psk-flags")
}
func isSettingWirelessSecurityWepKeyFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key-flags")
}
func isSettingWirelessSecurityWepKeyTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key-type")
}
func isSettingWirelessSecurityWepKey0Exists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key0")
}
func isSettingWirelessSecurityWepKey1Exists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key1")
}
func isSettingWirelessSecurityWepKey2Exists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key2")
}
func isSettingWirelessSecurityWepKey3Exists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-key3")
}
func isSettingWirelessSecurityWepTxKeyidxExists(data connectionData) bool {
	return isSettingKeyExists(data, "802-11-wireless-security", "wep-tx-keyidx")
}
func isSettingVpnL2tpKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "gateway")
}
func isSettingVpnL2tpKeyUserExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "user")
}
func isSettingVpnL2tpKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "password-flags")
}
func isSettingVpnL2tpKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "password")
}
func isSettingVpnL2tpKeyDomainExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp", "domain")
}
func isSettingVpnL2tpKeyRequireMppeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "require-mppe")
}
func isSettingVpnL2tpKeyRequireMppe40Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "require-mppe-40")
}
func isSettingVpnL2tpKeyRequireMppe128Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "require-mppe-128")
}
func isSettingVpnL2tpKeyMppeStatefulExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "mppe-stateful")
}
func isSettingVpnL2tpKeyRefuseEapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-eap")
}
func isSettingVpnL2tpKeyRefusePapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-pap")
}
func isSettingVpnL2tpKeyRefuseChapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-chap")
}
func isSettingVpnL2tpKeyRefuseMschapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-mschap")
}
func isSettingVpnL2tpKeyRefuseMschapv2Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2")
}
func isSettingVpnL2tpKeyNobsdcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "nobsdcomp")
}
func isSettingVpnL2tpKeyNodeflateExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "nodeflate")
}
func isSettingVpnL2tpKeyNoVjCompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "no-vj-comp")
}
func isSettingVpnL2tpKeyNoPcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "nopcomp")
}
func isSettingVpnL2tpKeyNoAccompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "noaccomp")
}
func isSettingVpnL2tpKeyLcpEchoFailureExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure")
}
func isSettingVpnL2tpKeyLcpEchoIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval")
}
func isSettingVpnL2tpKeyIpsecEnableExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled")
}
func isSettingVpnL2tpKeyIpsecGroupNameExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name")
}
func isSettingVpnL2tpKeyIpsecGatewayIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id")
}
func isSettingVpnL2tpKeyIpsecPskExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-l2tp-ipsec", "ipsec-psk")
}
func isSettingVpnOpenconnectKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "gateway")
}
func isSettingVpnOpenconnectKeyCacertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "cacert")
}
func isSettingVpnOpenconnectKeyProxyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "proxy")
}
func isSettingVpnOpenconnectKeyCsdEnableExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "enable_csd_trojan")
}
func isSettingVpnOpenconnectKeyCsdWrapperExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "csd_wrapper")
}
func isSettingVpnOpenconnectKeyUsercertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "usercert")
}
func isSettingVpnOpenconnectKeyPrivkeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "userkey")
}
func isSettingVpnOpenconnectKeyPemPassphraseFsidExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "pem_passphrase_fsid")
}
func isSettingVpnOpenconnectKeyCookieExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "cookie")
}
func isSettingVpnOpenconnectKeyGwcertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "gwcert")
}
func isSettingVpnOpenconnectKeyAuthtypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "authtype")
}
func isSettingVpnOpenconnectKeyMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "mtu")
}
func isSettingVpnOpenconnectKeyStokenSourceExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "stoken_source")
}
func isSettingVpnOpenconnectKeyStokenStringExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openconnect", "stoken_string")
}
func isSettingVpnOpenvpnKeyRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "remote")
}
func isSettingVpnOpenvpnKeyConnectionTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "connection-type")
}
func isSettingVpnOpenvpnKeyUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "username")
}
func isSettingVpnOpenvpnKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "password-flags")
}
func isSettingVpnOpenvpnKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "password")
}
func isSettingVpnOpenvpnKeyCaExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "ca")
}
func isSettingVpnOpenvpnKeyCertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "cert")
}
func isSettingVpnOpenvpnKeyKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "key")
}
func isSettingVpnOpenvpnKeyCertpassFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "cert-pass-flags")
}
func isSettingVpnOpenvpnKeyCertpassExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "cert-pass")
}
func isSettingVpnOpenvpnKeyStaticKeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "static-key")
}
func isSettingVpnOpenvpnKeyStaticKeyDirectionExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "static-key-direction")
}
func isSettingVpnOpenvpnKeyRemoteIpExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "remote-ip")
}
func isSettingVpnOpenvpnKeyLocalIpExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn", "local-ip")
}
func isSettingVpnOpenvpnKeyPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "port")
}
func isSettingVpnOpenvpnKeyRenegSecondsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "reneg-seconds")
}
func isSettingVpnOpenvpnKeyCompLzoExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "comp-lzo")
}
func isSettingVpnOpenvpnKeyProtoTcpExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "proto-tcp")
}
func isSettingVpnOpenvpnKeyTapDevExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "tap-dev")
}
func isSettingVpnOpenvpnKeyTunnelMtuExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "tunnel-mtu")
}
func isSettingVpnOpenvpnKeyFragmentSizeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "fragment-size")
}
func isSettingVpnOpenvpnKeyMssfixExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "mssfix")
}
func isSettingVpnOpenvpnKeyRemoteRandomExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-advanced", "remote-random")
}
func isSettingVpnOpenvpnKeyCipherExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-security", "cipher")
}
func isSettingVpnOpenvpnKeyAuthExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-security", "auth")
}
func isSettingVpnOpenvpnKeyTlsRemoteExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-tlsauth", "tls-remote")
}
func isSettingVpnOpenvpnKeyRemoteCertTlsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls")
}
func isSettingVpnOpenvpnKeyTaExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-tlsauth", "ta")
}
func isSettingVpnOpenvpnKeyTaDirExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-tlsauth", "ta-dir")
}
func isSettingVpnOpenvpnKeyProxyTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "proxy-type")
}
func isSettingVpnOpenvpnKeyProxyServerExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "proxy-server")
}
func isSettingVpnOpenvpnKeyProxyPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "proxy-port")
}
func isSettingVpnOpenvpnKeyProxyRetryExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "proxy-retry")
}
func isSettingVpnOpenvpnKeyHttpProxyUsernameExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "http-proxy-username")
}
func isSettingVpnOpenvpnKeyHttpProxyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "http-proxy-password")
}
func isSettingVpnOpenvpnKeyHttpProxyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags")
}
func isSettingVpnPptpKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "gateway")
}
func isSettingVpnPptpKeyUserExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "user")
}
func isSettingVpnPptpKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "password-flags")
}
func isSettingVpnPptpKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "password")
}
func isSettingVpnPptpKeyDomainExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp", "domain")
}
func isSettingVpnPptpKeyRequireMppeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "require-mppe")
}
func isSettingVpnPptpKeyRequireMppe40Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "require-mppe-40")
}
func isSettingVpnPptpKeyRequireMppe128Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "require-mppe-128")
}
func isSettingVpnPptpKeyMppeStatefulExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "mppe-stateful")
}
func isSettingVpnPptpKeyRefuseEapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-eap")
}
func isSettingVpnPptpKeyRefusePapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-pap")
}
func isSettingVpnPptpKeyRefuseChapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-chap")
}
func isSettingVpnPptpKeyRefuseMschapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-mschap")
}
func isSettingVpnPptpKeyRefuseMschapv2Exists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "refuse-mschapv2")
}
func isSettingVpnPptpKeyNobsdcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "nobsdcomp")
}
func isSettingVpnPptpKeyNodeflateExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "nodeflate")
}
func isSettingVpnPptpKeyNoVjCompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "no-vj-comp")
}
func isSettingVpnPptpKeyLcpEchoFailureExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "lcp-echo-failure")
}
func isSettingVpnPptpKeyLcpEchoIntervalExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-pptp-ppp", "lcp-echo-interval")
}
func isSettingVpnStrongswanKeyAddressExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "address")
}
func isSettingVpnStrongswanKeyCertificateExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "certificate")
}
func isSettingVpnStrongswanKeyMethodExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "method")
}
func isSettingVpnStrongswanKeyUserExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "user")
}
func isSettingVpnStrongswanKeyUsercertExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "usercert")
}
func isSettingVpnStrongswanKeyUserkeyExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "userkey")
}
func isSettingVpnStrongswanKeyPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "password")
}
func isSettingVpnStrongswanKeyPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "password-flags")
}
func isSettingVpnStrongswanKeyVirtualExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "virtual")
}
func isSettingVpnStrongswanKeyEncapExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "encap")
}
func isSettingVpnStrongswanKeyIpcompExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-strongswan", "ipcomp")
}
func isSettingVpnVpncKeyGatewayExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IPSec gateway")
}
func isSettingVpnVpncKeyXauthUserExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "Xauth username")
}
func isSettingVpnVpncKeyXauthPasswordTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "xauth-password-type")
}
func isSettingVpnVpncKeyXauthPasswordFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "Xauth password-flags")
}
func isSettingVpnVpncKeyXauthPasswordExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "Xauth password")
}
func isSettingVpnVpncKeyIdExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IPSec ID")
}
func isSettingVpnVpncKeySecretTypeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "ipsec-secret-type")
}
func isSettingVpnVpncKeySecretFlagsExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IPSec secret-flags")
}
func isSettingVpnVpncKeySecretExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IPSec secret")
}
func isSettingVpnVpncKeyAuthmodeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "IKE Authmode")
}
func isSettingVpnVpncKeyCaFileExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc", "CA-File")
}
func isSettingVpnVpncKeyDomainExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Domain")
}
func isSettingVpnVpncKeyVendorExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Vendor")
}
func isSettingVpnVpncKeyAppVersionExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Application Version")
}
func isSettingVpnVpncKeySingleDesExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Enable Single DES")
}
func isSettingVpnVpncKeyNoEncryptionExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Enable no encryption")
}
func isSettingVpnVpncKeyNatTraversalModeExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode")
}
func isSettingVpnVpncKeyDhgroupExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "IKE DH Group")
}
func isSettingVpnVpncKeyPerfectForwardExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy")
}
func isSettingVpnVpncKeyLocalPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Local Port")
}
func isSettingVpnVpncKeyDpdIdleTimeoutExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)")
}
func isSettingVpnVpncKeyCiscoUdpEncapsPortExists(data connectionData) bool {
	return isSettingKeyExists(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port")
}

// Getter
func getSetting8021xAltsubjectMatches(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-1x", "altsubject-matches")
	value = interfaceToArrayString(ivalue)
	return
}
func getSetting8021xAnonymousIdentity(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "anonymous-identity")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xCaCert(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "ca-cert")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xCaPath(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "ca-path")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xClientCert(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "client-cert")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xDomainSuffixMatch(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "domain-suffix-match")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xEap(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-1x", "eap")
	value = interfaceToArrayString(ivalue)
	return
}
func getSetting8021xIdentity(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "identity")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPacFile(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "pac-file")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPasswordRaw(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "password-raw")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPasswordRawFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "password-raw-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPhase1FastProvisioning(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase1-fast-provisioning")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase1Peaplabel(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase1-peaplabel")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase1Peapver(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase1-peapver")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2AltsubjectMatches(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-altsubject-matches")
	value = interfaceToArrayString(ivalue)
	return
}
func getSetting8021xPhase2Auth(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-auth")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2Autheap(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-autheap")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2CaCert(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "phase2-ca-cert")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPhase2CaPath(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-ca-path")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2ClientCert(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "phase2-client-cert")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPhase2DomainSuffixMatch(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-domain-suffix-match")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2PrivateKey(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "phase2-private-key")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPhase2PrivateKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-private-key-password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPhase2PrivateKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "phase2-private-key-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPhase2SubjectMatch(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "phase2-subject-match")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPin(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "pin")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPinFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "pin-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xPrivateKey(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-1x", "private-key")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSetting8021xPrivateKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "private-key-password")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xPrivateKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-1x", "private-key-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSetting8021xSubjectMatch(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-1x", "subject-match")
	value = interfaceToString(ivalue)
	return
}
func getSetting8021xSystemCaCerts(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "802-1x", "system-ca-certs")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingAdslEncapsulation(data connectionData) (value string) {
	ivalue := getSettingKey(data, "adsl", "encapsulation")
	value = interfaceToString(ivalue)
	return
}
func getSettingAdslPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "adsl", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingAdslPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "adsl", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingAdslProtocol(data connectionData) (value string) {
	ivalue := getSettingKey(data, "adsl", "protocol")
	value = interfaceToString(ivalue)
	return
}
func getSettingAdslUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "adsl", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingAdslVci(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "adsl", "vci")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingAdslVpi(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "adsl", "vpi")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBluetoothBdaddr(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "bluetooth", "bdaddr")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingBluetoothType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "bluetooth", "type")
	value = interfaceToString(ivalue)
	return
}
func getSettingBondOptions(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "bond", "options")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingBridgeAgeingTime(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "ageing-time")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeForwardDelay(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "forward-delay")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeHelloTime(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "hello-time")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "bridge", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingBridgeMaxAge(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "max-age")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeMulticastSnooping(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "bridge", "multicast-snooping")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingBridgePriority(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge", "priority")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgeStp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "bridge", "stp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingBridgePortHairpinMode(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "bridge-port", "hairpin-mode")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingBridgePortPathCost(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge-port", "path-cost")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingBridgePortPriority(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "bridge-port", "priority")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingCdmaNumber(data connectionData) (value string) {
	ivalue := getSettingKey(data, "cdma", "number")
	value = interfaceToString(ivalue)
	return
}
func getSettingCdmaPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "cdma", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingCdmaPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "cdma", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingCdmaUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "cdma", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionAutoconnect(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "connection", "autoconnect")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingConnectionAutoconnectPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "autoconnect-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionAutoconnectSlaves(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "autoconnect-slaves")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionGatewayPingTimeout(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "connection", "gateway-ping-timeout")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingConnectionId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "id")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionInterfaceName(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "interface-name")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionLldp(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "lldp")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionMaster(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "master")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionMetered(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "connection", "metered")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingConnectionPermissions(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "connection", "permissions")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingConnectionReadOnly(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "connection", "read-only")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingConnectionSecondaries(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "connection", "secondaries")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingConnectionSlaveType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "slave-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionStableId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "stable-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionTimestamp(data connectionData) (value uint64) {
	ivalue := getSettingKey(data, "connection", "timestamp")
	value = interfaceToUint64(ivalue)
	return
}
func getSettingConnectionType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "type")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionUuid(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "uuid")
	value = interfaceToString(ivalue)
	return
}
func getSettingConnectionZone(data connectionData) (value string) {
	ivalue := getSettingKey(data, "connection", "zone")
	value = interfaceToString(ivalue)
	return
}
func getSettingDcbAppFcoeFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "app-fcoe-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbAppFcoeMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "dcb", "app-fcoe-mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingDcbAppFcoePriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "dcb", "app-fcoe-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingDcbAppFipFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "app-fip-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbAppFipPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "dcb", "app-fip-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingDcbAppIscsiFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "app-iscsi-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbAppIscsiPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "dcb", "app-iscsi-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingDcbPriorityBandwidth(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-bandwidth")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityFlowControl(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-flow-control")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityFlowControlFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-flow-control-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbPriorityGroupBandwidth(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-group-bandwidth")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityGroupFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-group-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingDcbPriorityGroupId(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-group-id")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityStrictBandwidth(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-strict-bandwidth")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingDcbPriorityTrafficClass(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "dcb", "priority-traffic-class")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingGsmApn(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "apn")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmDeviceId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "device-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmHomeOnly(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "gsm", "home-only")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingGsmNetworkId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "network-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmNumber(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "number")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "gsm", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingGsmPin(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "pin")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmPinFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "gsm", "pin-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingGsmSimId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "sim-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmSimOperatorId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "sim-operator-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingGsmUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "gsm", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingInfinibandMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "infiniband", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingInfinibandMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "infiniband", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingInfinibandPKey(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "infiniband", "p-key")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingInfinibandParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "infiniband", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingInfinibandTransportMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "infiniband", "transport-mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigAddresses(data connectionData) (value [][]uint32) {
	ivalue := getSettingKey(data, "ipv4", "addresses")
	value = interfaceToArrayArrayUint32(ivalue)
	return
}
func getSettingIP4ConfigDadTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv4", "dad-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP4ConfigDhcpClientId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-client-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigDhcpFqdn(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-fqdn")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigDhcpHostname(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-hostname")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigDhcpSendHostname(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-send-hostname")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigDhcpTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv4", "dhcp-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP4ConfigDns(data connectionData) (value []uint32) {
	ivalue := getSettingKey(data, "ipv4", "dns")
	value = interfaceToArrayUint32(ivalue)
	return
}
func getSettingIP4ConfigDnsOptions(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "ipv4", "dns-options")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingIP4ConfigDnsPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv4", "dns-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP4ConfigDnsSearch(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "ipv4", "dns-search")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingIP4ConfigGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigIgnoreAutoDns(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "ignore-auto-dns")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigIgnoreAutoRoutes(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "ignore-auto-routes")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigMayFail(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "may-fail")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigMethod(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv4", "method")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP4ConfigNeverDefault(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv4", "never-default")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP4ConfigRouteMetric(data connectionData) (value int64) {
	ivalue := getSettingKey(data, "ipv4", "route-metric")
	value = interfaceToInt64(ivalue)
	return
}
func getSettingIP4ConfigRoutes(data connectionData) (value [][]uint32) {
	ivalue := getSettingKey(data, "ipv4", "routes")
	value = interfaceToArrayArrayUint32(ivalue)
	return
}
func getSettingIP6ConfigAddrGenMode(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "addr-gen-mode")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigAddresses(data connectionData) (value ipv6Addresses) {
	ivalue := getSettingKey(data, "ipv6", "addresses")
	value = interfaceToIpv6Addresses(ivalue)
	return
}
func getSettingIP6ConfigDadTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "dad-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigDhcpHostname(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv6", "dhcp-hostname")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP6ConfigDhcpSendHostname(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "dhcp-send-hostname")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigDhcpTimeout(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "dhcp-timeout")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigDns(data connectionData) (value [][]byte) {
	ivalue := getSettingKey(data, "ipv6", "dns")
	value = interfaceToArrayArrayByte(ivalue)
	return
}
func getSettingIP6ConfigDnsOptions(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "ipv6", "dns-options")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingIP6ConfigDnsPriority(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "dns-priority")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigDnsSearch(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "ipv6", "dns-search")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingIP6ConfigGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv6", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP6ConfigIgnoreAutoDns(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "ignore-auto-dns")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigIgnoreAutoRoutes(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "ignore-auto-routes")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigIp6Privacy(data connectionData) (value int32) {
	ivalue := getSettingKey(data, "ipv6", "ip6-privacy")
	value = interfaceToInt32(ivalue)
	return
}
func getSettingIP6ConfigMayFail(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "may-fail")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigMethod(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv6", "method")
	value = interfaceToString(ivalue)
	return
}
func getSettingIP6ConfigNeverDefault(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ipv6", "never-default")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIP6ConfigRouteMetric(data connectionData) (value int64) {
	ivalue := getSettingKey(data, "ipv6", "route-metric")
	value = interfaceToInt64(ivalue)
	return
}
func getSettingIP6ConfigRoutes(data connectionData) (value ipv6Routes) {
	ivalue := getSettingKey(data, "ipv6", "routes")
	value = interfaceToIpv6Routes(ivalue)
	return
}
func getSettingIP6ConfigToken(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ipv6", "token")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelEncapsulationLimit(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "encapsulation-limit")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelFlowLabel(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "flow-label")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelInputKey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "input-key")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelLocal(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "local")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelMode(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "mode")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelOutputKey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "output-key")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelPathMtuDiscovery(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ip-tunnel", "path-mtu-discovery")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingIPTunnelRemote(data connectionData) (value string) {
	ivalue := getSettingKey(data, "ip-tunnel", "remote")
	value = interfaceToString(ivalue)
	return
}
func getSettingIPTunnelTos(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "tos")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingIPTunnelTtl(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ip-tunnel", "ttl")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingMacvlanMode(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "macvlan", "mode")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingMacvlanParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "macvlan", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingMacvlanPromiscuous(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "macvlan", "promiscuous")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingMacvlanTap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "macvlan", "tap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingOlpcMeshChannel(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-olpc-mesh", "channel")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingOlpcMeshDhcpAnycastAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-olpc-mesh", "dhcp-anycast-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingOlpcMeshSsid(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-olpc-mesh", "ssid")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingPppBaud(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "baud")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppCrtscts(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "crtscts")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppLcpEchoFailure(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "lcp-echo-failure")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppLcpEchoInterval(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "lcp-echo-interval")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppMppeStateful(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "mppe-stateful")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppMru(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "mru")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "ppp", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppNoVjComp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "no-vj-comp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppNoauth(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "noauth")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppNobsdcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "nobsdcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppNodeflate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "nodeflate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefuseChap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-chap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefuseEap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-eap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefuseMschap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-mschap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefuseMschapv2(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-mschapv2")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRefusePap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "refuse-pap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRequireMppe(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "require-mppe")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppRequireMppe128(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "ppp", "require-mppe-128")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingPppoePassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "pppoe", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingPppoePasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "pppoe", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingPppoeService(data connectionData) (value string) {
	ivalue := getSettingKey(data, "pppoe", "service")
	value = interfaceToString(ivalue)
	return
}
func getSettingPppoeUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "pppoe", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingSerialBaud(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "serial", "baud")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingSerialBits(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "serial", "bits")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingSerialParity(data connectionData) (value byte) {
	ivalue := getSettingKey(data, "serial", "parity")
	value = interfaceToByte(ivalue)
	return
}
func getSettingSerialSendDelay(data connectionData) (value uint64) {
	ivalue := getSettingKey(data, "serial", "send-delay")
	value = interfaceToUint64(ivalue)
	return
}
func getSettingSerialStopbits(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "serial", "stopbits")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingTeamConfig(data connectionData) (value string) {
	ivalue := getSettingKey(data, "team", "config")
	value = interfaceToString(ivalue)
	return
}
func getSettingTeamPortConfig(data connectionData) (value string) {
	ivalue := getSettingKey(data, "team-port", "config")
	value = interfaceToString(ivalue)
	return
}
func getSettingTunGroup(data connectionData) (value string) {
	ivalue := getSettingKey(data, "tun", "group")
	value = interfaceToString(ivalue)
	return
}
func getSettingTunMode(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "tun", "mode")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingTunMultiQueue(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "tun", "multi-queue")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingTunOwner(data connectionData) (value string) {
	ivalue := getSettingKey(data, "tun", "owner")
	value = interfaceToString(ivalue)
	return
}
func getSettingTunPi(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "tun", "pi")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingTunVnetHdr(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "tun", "vnet-hdr")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVlanEgressPriorityMap(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "vlan", "egress-priority-map")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingVlanFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vlan", "flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVlanId(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vlan", "id")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVlanIngressPriorityMap(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "vlan", "ingress-priority-map")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingVlanParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vlan", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnData(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "vpn", "data")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingVpnPersistent(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vpn", "persistent")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnSecrets(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "vpn", "secrets")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingVpnServiceType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vpn", "service-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnTimeout(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vpn", "timeout")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnUserName(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vpn", "user-name")
	value = interfaceToString(ivalue)
	return
}
func getSettingVxlanAgeing(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "ageing")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanDestinationPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "destination-port")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanId(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "id")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanL2Miss(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "l2-miss")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanL3Miss(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "l3-miss")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanLearning(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "learning")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanLimit(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "limit")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanLocal(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vxlan", "local")
	value = interfaceToString(ivalue)
	return
}
func getSettingVxlanParent(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vxlan", "parent")
	value = interfaceToString(ivalue)
	return
}
func getSettingVxlanProxy(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "proxy")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanRemote(data connectionData) (value string) {
	ivalue := getSettingKey(data, "vxlan", "remote")
	value = interfaceToString(ivalue)
	return
}
func getSettingVxlanRsc(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "vxlan", "rsc")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVxlanSourcePortMax(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "source-port-max")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanSourcePortMin(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "source-port-min")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanTos(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "tos")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVxlanTtl(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "vxlan", "ttl")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWimaxMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "wimax", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWimaxNetworkName(data connectionData) (value string) {
	ivalue := getSettingKey(data, "wimax", "network-name")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredAutoNegotiate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "802-3-ethernet", "auto-negotiate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingWiredClonedMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-3-ethernet", "cloned-mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWiredDuplex(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "duplex")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredGenerateMacAddressMask(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "generate-mac-address-mask")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-3-ethernet", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWiredMacAddressBlacklist(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "mac-address-blacklist")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWiredMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-3-ethernet", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWiredPort(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "port")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredS390Nettype(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "s390-nettype")
	value = interfaceToString(ivalue)
	return
}
func getSettingWiredS390Options(data connectionData) (value map[string]string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "s390-options")
	value = interfaceToDictStringString(ivalue)
	return
}
func getSettingWiredS390Subchannels(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "s390-subchannels")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWiredSpeed(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-3-ethernet", "speed")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWiredWakeOnLan(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-3-ethernet", "wake-on-lan")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWiredWakeOnLanPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-3-ethernet", "wake-on-lan-password")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessBand(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless", "band")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessBssid(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-wireless", "bssid")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWirelessChannel(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "channel")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessClonedMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-wireless", "cloned-mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWirelessGenerateMacAddressMask(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless", "generate-mac-address-mask")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessHidden(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "802-11-wireless", "hidden")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingWirelessMacAddress(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-wireless", "mac-address")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWirelessMacAddressBlacklist(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless", "mac-address-blacklist")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessMacAddressRandomization(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "mac-address-randomization")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless", "mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessPowersave(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "powersave")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessRate(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "rate")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSeenBssids(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless", "seen-bssids")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessSsid(data connectionData) (value []byte) {
	ivalue := getSettingKey(data, "802-11-wireless", "ssid")
	value = interfaceToArrayByte(ivalue)
	return
}
func getSettingWirelessTxPower(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless", "tx-power")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityAuthAlg(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "auth-alg")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityGroup(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "group")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessSecurityKeyMgmt(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "key-mgmt")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityLeapPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "leap-password")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityLeapPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "leap-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityLeapUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "leap-username")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityPairwise(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "pairwise")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessSecurityProto(data connectionData) (value []string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "proto")
	value = interfaceToArrayString(ivalue)
	return
}
func getSettingWirelessSecurityPsk(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "psk")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityPskFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "psk-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityWepKeyFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityWepKeyType(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key-type")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingWirelessSecurityWepKey0(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key0")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityWepKey1(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key1")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityWepKey2(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key2")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityWepKey3(data connectionData) (value string) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-key3")
	value = interfaceToString(ivalue)
	return
}
func getSettingWirelessSecurityWepTxKeyidx(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "802-11-wireless-security", "wep-tx-keyidx")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnL2tpKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "user")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnL2tpKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyDomain(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp", "domain")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyRequireMppe(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRequireMppe40(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-40")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRequireMppe128(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-128")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyMppeStateful(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "mppe-stateful")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefuseEap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-eap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefusePap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-pap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefuseChap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-chap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefuseMschap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyRefuseMschapv2(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNobsdcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "nobsdcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNodeflate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "nodeflate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNoVjComp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "no-vj-comp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNoPcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "nopcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyNoAccomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "noaccomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyLcpEchoFailure(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnL2tpKeyLcpEchoInterval(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecEnable(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecGroupName(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecGatewayId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnL2tpKeyIpsecPsk(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-psk")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyCacert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "cacert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyProxy(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "proxy")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyCsdEnable(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "enable_csd_trojan")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenconnectKeyCsdWrapper(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "csd_wrapper")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyUsercert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "usercert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyPrivkey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "userkey")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyPemPassphraseFsid(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "pem_passphrase_fsid")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenconnectKeyCookie(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "cookie")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyGwcert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "gwcert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyAuthtype(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "authtype")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyMtu(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "mtu")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyStokenSource(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "stoken_source")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenconnectKeyStokenString(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openconnect", "stoken_string")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRemote(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "remote")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyConnectionType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "connection-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "username")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCa(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "ca")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "cert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyKey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "key")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCertpassFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "cert-pass-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCertpass(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "cert-pass")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyStaticKey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "static-key")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "static-key-direction")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRemoteIp(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "remote-ip")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyLocalIp(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn", "local-ip")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "port")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRenegSeconds(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "reneg-seconds")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCompLzo(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "comp-lzo")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProtoTcp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "proto-tcp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTapDev(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "tap-dev")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTunnelMtu(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "tunnel-mtu")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyFragmentSize(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "fragment-size")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyMssfix(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "mssfix")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRemoteRandom(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-advanced", "remote-random")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyCipher(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-security", "cipher")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyAuth(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-security", "auth")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTlsRemote(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-tlsauth", "tls-remote")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyRemoteCertTls(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTa(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyTaDir(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta-dir")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProxyType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProxyServer(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-server")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProxyPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-port")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnOpenvpnKeyProxyRetry(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-retry")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyUsername(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-username")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnPptpKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnPptpKeyUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "user")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnPptpKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnPptpKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnPptpKeyDomain(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-pptp", "domain")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnPptpKeyRequireMppe(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRequireMppe40(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-40")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRequireMppe128(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-128")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyMppeStateful(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "mppe-stateful")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefuseEap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-eap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefusePap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-pap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefuseChap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-chap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefuseMschap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyRefuseMschapv2(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschapv2")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyNobsdcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "nobsdcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyNodeflate(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "nodeflate")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyNoVjComp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "no-vj-comp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnPptpKeyLcpEchoFailure(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-failure")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnPptpKeyLcpEchoInterval(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-interval")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnStrongswanKeyAddress(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "address")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyCertificate(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "certificate")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyMethod(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "method")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "user")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyUsercert(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "usercert")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyUserkey(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "userkey")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnStrongswanKeyPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnStrongswanKeyVirtual(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "virtual")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnStrongswanKeyEncap(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "encap")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnStrongswanKeyIpcomp(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-strongswan", "ipcomp")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnVpncKeyGateway(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IPSec gateway")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyXauthUser(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "Xauth username")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyXauthPasswordType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "xauth-password-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyXauthPasswordFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "Xauth password-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnVpncKeyXauthPassword(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "Xauth password")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyId(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IPSec ID")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeySecretType(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "ipsec-secret-type")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeySecretFlags(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IPSec secret-flags")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnVpncKeySecret(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IPSec secret")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyAuthmode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "IKE Authmode")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyCaFile(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc", "CA-File")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyDomain(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Domain")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyVendor(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Vendor")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyAppVersion(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Application Version")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeySingleDes(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Enable Single DES")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnVpncKeyNoEncryption(data connectionData) (value bool) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Enable no encryption")
	value = interfaceToBoolean(ivalue)
	return
}
func getSettingVpnVpncKeyNatTraversalMode(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyDhgroup(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "IKE DH Group")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyPerfectForward(data connectionData) (value string) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy")
	value = interfaceToString(ivalue)
	return
}
func getSettingVpnVpncKeyLocalPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Local Port")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnVpncKeyDpdIdleTimeout(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)")
	value = interfaceToUint32(ivalue)
	return
}
func getSettingVpnVpncKeyCiscoUdpEncapsPort(data connectionData) (value uint32) {
	ivalue := getSettingKey(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port")
	value = interfaceToUint32(ivalue)
	return
}

// Setter
func setSetting8021xAltsubjectMatches(data connectionData, value []string) {
	setSettingKey(data, "802-1x", "altsubject-matches", value)
}
func setSetting8021xAnonymousIdentity(data connectionData, value string) {
	setSettingKey(data, "802-1x", "anonymous-identity", value)
}
func setSetting8021xCaCert(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "ca-cert", value)
}
func setSetting8021xCaPath(data connectionData, value string) {
	setSettingKey(data, "802-1x", "ca-path", value)
}
func setSetting8021xClientCert(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "client-cert", value)
}
func setSetting8021xDomainSuffixMatch(data connectionData, value string) {
	setSettingKey(data, "802-1x", "domain-suffix-match", value)
}
func setSetting8021xEap(data connectionData, value []string) {
	setSettingKey(data, "802-1x", "eap", value)
}
func setSetting8021xIdentity(data connectionData, value string) {
	setSettingKey(data, "802-1x", "identity", value)
}
func setSetting8021xPacFile(data connectionData, value string) {
	setSettingKey(data, "802-1x", "pac-file", value)
}
func setSetting8021xPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "password", value)
}
func setSetting8021xPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "password-flags", value)
}
func setSetting8021xPasswordRaw(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "password-raw", value)
}
func setSetting8021xPasswordRawFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "password-raw-flags", value)
}
func setSetting8021xPhase1FastProvisioning(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase1-fast-provisioning", value)
}
func setSetting8021xPhase1Peaplabel(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase1-peaplabel", value)
}
func setSetting8021xPhase1Peapver(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase1-peapver", value)
}
func setSetting8021xPhase2AltsubjectMatches(data connectionData, value []string) {
	setSettingKey(data, "802-1x", "phase2-altsubject-matches", value)
}
func setSetting8021xPhase2Auth(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-auth", value)
}
func setSetting8021xPhase2Autheap(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-autheap", value)
}
func setSetting8021xPhase2CaCert(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "phase2-ca-cert", value)
}
func setSetting8021xPhase2CaPath(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-ca-path", value)
}
func setSetting8021xPhase2ClientCert(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "phase2-client-cert", value)
}
func setSetting8021xPhase2DomainSuffixMatch(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-domain-suffix-match", value)
}
func setSetting8021xPhase2PrivateKey(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "phase2-private-key", value)
}
func setSetting8021xPhase2PrivateKeyPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-private-key-password", value)
}
func setSetting8021xPhase2PrivateKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "phase2-private-key-password-flags", value)
}
func setSetting8021xPhase2SubjectMatch(data connectionData, value string) {
	setSettingKey(data, "802-1x", "phase2-subject-match", value)
}
func setSetting8021xPin(data connectionData, value string) {
	setSettingKey(data, "802-1x", "pin", value)
}
func setSetting8021xPinFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "pin-flags", value)
}
func setSetting8021xPrivateKey(data connectionData, value []byte) {
	setSettingKey(data, "802-1x", "private-key", value)
}
func setSetting8021xPrivateKeyPassword(data connectionData, value string) {
	setSettingKey(data, "802-1x", "private-key-password", value)
}
func setSetting8021xPrivateKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-1x", "private-key-password-flags", value)
}
func setSetting8021xSubjectMatch(data connectionData, value string) {
	setSettingKey(data, "802-1x", "subject-match", value)
}
func setSetting8021xSystemCaCerts(data connectionData, value bool) {
	setSettingKey(data, "802-1x", "system-ca-certs", value)
}
func setSettingAdslEncapsulation(data connectionData, value string) {
	setSettingKey(data, "adsl", "encapsulation", value)
}
func setSettingAdslPassword(data connectionData, value string) {
	setSettingKey(data, "adsl", "password", value)
}
func setSettingAdslPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "adsl", "password-flags", value)
}
func setSettingAdslProtocol(data connectionData, value string) {
	setSettingKey(data, "adsl", "protocol", value)
}
func setSettingAdslUsername(data connectionData, value string) {
	setSettingKey(data, "adsl", "username", value)
}
func setSettingAdslVci(data connectionData, value uint32) {
	setSettingKey(data, "adsl", "vci", value)
}
func setSettingAdslVpi(data connectionData, value uint32) {
	setSettingKey(data, "adsl", "vpi", value)
}
func setSettingBluetoothBdaddr(data connectionData, value []byte) {
	setSettingKey(data, "bluetooth", "bdaddr", value)
}
func setSettingBluetoothType(data connectionData, value string) {
	setSettingKey(data, "bluetooth", "type", value)
}
func setSettingBondOptions(data connectionData, value map[string]string) {
	setSettingKey(data, "bond", "options", value)
}
func setSettingBridgeAgeingTime(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "ageing-time", value)
}
func setSettingBridgeForwardDelay(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "forward-delay", value)
}
func setSettingBridgeHelloTime(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "hello-time", value)
}
func setSettingBridgeMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "bridge", "mac-address", value)
}
func setSettingBridgeMaxAge(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "max-age", value)
}
func setSettingBridgeMulticastSnooping(data connectionData, value bool) {
	setSettingKey(data, "bridge", "multicast-snooping", value)
}
func setSettingBridgePriority(data connectionData, value uint32) {
	setSettingKey(data, "bridge", "priority", value)
}
func setSettingBridgeStp(data connectionData, value bool) {
	setSettingKey(data, "bridge", "stp", value)
}
func setSettingBridgePortHairpinMode(data connectionData, value bool) {
	setSettingKey(data, "bridge-port", "hairpin-mode", value)
}
func setSettingBridgePortPathCost(data connectionData, value uint32) {
	setSettingKey(data, "bridge-port", "path-cost", value)
}
func setSettingBridgePortPriority(data connectionData, value uint32) {
	setSettingKey(data, "bridge-port", "priority", value)
}
func setSettingCdmaNumber(data connectionData, value string) {
	setSettingKey(data, "cdma", "number", value)
}
func setSettingCdmaPassword(data connectionData, value string) {
	setSettingKey(data, "cdma", "password", value)
}
func setSettingCdmaPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "cdma", "password-flags", value)
}
func setSettingCdmaUsername(data connectionData, value string) {
	setSettingKey(data, "cdma", "username", value)
}
func setSettingConnectionAutoconnect(data connectionData, value bool) {
	setSettingKey(data, "connection", "autoconnect", value)
}
func setSettingConnectionAutoconnectPriority(data connectionData, value int32) {
	setSettingKey(data, "connection", "autoconnect-priority", value)
}
func setSettingConnectionAutoconnectSlaves(data connectionData, value int32) {
	setSettingKey(data, "connection", "autoconnect-slaves", value)
}
func setSettingConnectionGatewayPingTimeout(data connectionData, value uint32) {
	setSettingKey(data, "connection", "gateway-ping-timeout", value)
}
func setSettingConnectionId(data connectionData, value string) {
	setSettingKey(data, "connection", "id", value)
}
func setSettingConnectionInterfaceName(data connectionData, value string) {
	setSettingKey(data, "connection", "interface-name", value)
}
func setSettingConnectionLldp(data connectionData, value int32) {
	setSettingKey(data, "connection", "lldp", value)
}
func setSettingConnectionMaster(data connectionData, value string) {
	setSettingKey(data, "connection", "master", value)
}
func setSettingConnectionMetered(data connectionData, value int32) {
	setSettingKey(data, "connection", "metered", value)
}
func setSettingConnectionPermissions(data connectionData, value []string) {
	setSettingKey(data, "connection", "permissions", value)
}
func setSettingConnectionReadOnly(data connectionData, value bool) {
	setSettingKey(data, "connection", "read-only", value)
}
func setSettingConnectionSecondaries(data connectionData, value []string) {
	setSettingKey(data, "connection", "secondaries", value)
}
func setSettingConnectionSlaveType(data connectionData, value string) {
	setSettingKey(data, "connection", "slave-type", value)
}
func setSettingConnectionStableId(data connectionData, value string) {
	setSettingKey(data, "connection", "stable-id", value)
}
func setSettingConnectionTimestamp(data connectionData, value uint64) {
	setSettingKey(data, "connection", "timestamp", value)
}
func setSettingConnectionType(data connectionData, value string) {
	setSettingKey(data, "connection", "type", value)
}
func setSettingConnectionUuid(data connectionData, value string) {
	setSettingKey(data, "connection", "uuid", value)
}
func setSettingConnectionZone(data connectionData, value string) {
	setSettingKey(data, "connection", "zone", value)
}
func setSettingDcbAppFcoeFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "app-fcoe-flags", value)
}
func setSettingDcbAppFcoeMode(data connectionData, value string) {
	setSettingKey(data, "dcb", "app-fcoe-mode", value)
}
func setSettingDcbAppFcoePriority(data connectionData, value int32) {
	setSettingKey(data, "dcb", "app-fcoe-priority", value)
}
func setSettingDcbAppFipFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "app-fip-flags", value)
}
func setSettingDcbAppFipPriority(data connectionData, value int32) {
	setSettingKey(data, "dcb", "app-fip-priority", value)
}
func setSettingDcbAppIscsiFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "app-iscsi-flags", value)
}
func setSettingDcbAppIscsiPriority(data connectionData, value int32) {
	setSettingKey(data, "dcb", "app-iscsi-priority", value)
}
func setSettingDcbPriorityBandwidth(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-bandwidth", value)
}
func setSettingDcbPriorityFlowControl(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-flow-control", value)
}
func setSettingDcbPriorityFlowControlFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "priority-flow-control-flags", value)
}
func setSettingDcbPriorityGroupBandwidth(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-group-bandwidth", value)
}
func setSettingDcbPriorityGroupFlags(data connectionData, value uint32) {
	setSettingKey(data, "dcb", "priority-group-flags", value)
}
func setSettingDcbPriorityGroupId(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-group-id", value)
}
func setSettingDcbPriorityStrictBandwidth(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-strict-bandwidth", value)
}
func setSettingDcbPriorityTrafficClass(data connectionData, value []uint32) {
	setSettingKey(data, "dcb", "priority-traffic-class", value)
}
func setSettingGsmApn(data connectionData, value string) {
	setSettingKey(data, "gsm", "apn", value)
}
func setSettingGsmDeviceId(data connectionData, value string) {
	setSettingKey(data, "gsm", "device-id", value)
}
func setSettingGsmHomeOnly(data connectionData, value bool) {
	setSettingKey(data, "gsm", "home-only", value)
}
func setSettingGsmNetworkId(data connectionData, value string) {
	setSettingKey(data, "gsm", "network-id", value)
}
func setSettingGsmNumber(data connectionData, value string) {
	setSettingKey(data, "gsm", "number", value)
}
func setSettingGsmPassword(data connectionData, value string) {
	setSettingKey(data, "gsm", "password", value)
}
func setSettingGsmPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "gsm", "password-flags", value)
}
func setSettingGsmPin(data connectionData, value string) {
	setSettingKey(data, "gsm", "pin", value)
}
func setSettingGsmPinFlags(data connectionData, value uint32) {
	setSettingKey(data, "gsm", "pin-flags", value)
}
func setSettingGsmSimId(data connectionData, value string) {
	setSettingKey(data, "gsm", "sim-id", value)
}
func setSettingGsmSimOperatorId(data connectionData, value string) {
	setSettingKey(data, "gsm", "sim-operator-id", value)
}
func setSettingGsmUsername(data connectionData, value string) {
	setSettingKey(data, "gsm", "username", value)
}
func setSettingInfinibandMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "infiniband", "mac-address", value)
}
func setSettingInfinibandMtu(data connectionData, value uint32) {
	setSettingKey(data, "infiniband", "mtu", value)
}
func setSettingInfinibandPKey(data connectionData, value int32) {
	setSettingKey(data, "infiniband", "p-key", value)
}
func setSettingInfinibandParent(data connectionData, value string) {
	setSettingKey(data, "infiniband", "parent", value)
}
func setSettingInfinibandTransportMode(data connectionData, value string) {
	setSettingKey(data, "infiniband", "transport-mode", value)
}
func setSettingIP4ConfigAddresses(data connectionData, value [][]uint32) {
	setSettingKey(data, "ipv4", "addresses", value)
}
func setSettingIP4ConfigDadTimeout(data connectionData, value int32) {
	setSettingKey(data, "ipv4", "dad-timeout", value)
}
func setSettingIP4ConfigDhcpClientId(data connectionData, value string) {
	setSettingKey(data, "ipv4", "dhcp-client-id", value)
}
func setSettingIP4ConfigDhcpFqdn(data connectionData, value string) {
	setSettingKey(data, "ipv4", "dhcp-fqdn", value)
}
func setSettingIP4ConfigDhcpHostname(data connectionData, value string) {
	setSettingKey(data, "ipv4", "dhcp-hostname", value)
}
func setSettingIP4ConfigDhcpSendHostname(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "dhcp-send-hostname", value)
}
func setSettingIP4ConfigDhcpTimeout(data connectionData, value int32) {
	setSettingKey(data, "ipv4", "dhcp-timeout", value)
}
func setSettingIP4ConfigDns(data connectionData, value []uint32) {
	setSettingKey(data, "ipv4", "dns", value)
}
func setSettingIP4ConfigDnsOptions(data connectionData, value []string) {
	setSettingKey(data, "ipv4", "dns-options", value)
}
func setSettingIP4ConfigDnsPriority(data connectionData, value int32) {
	setSettingKey(data, "ipv4", "dns-priority", value)
}
func setSettingIP4ConfigDnsSearch(data connectionData, value []string) {
	setSettingKey(data, "ipv4", "dns-search", value)
}
func setSettingIP4ConfigGateway(data connectionData, value string) {
	setSettingKey(data, "ipv4", "gateway", value)
}
func setSettingIP4ConfigIgnoreAutoDns(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "ignore-auto-dns", value)
}
func setSettingIP4ConfigIgnoreAutoRoutes(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "ignore-auto-routes", value)
}
func setSettingIP4ConfigMayFail(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "may-fail", value)
}
func setSettingIP4ConfigMethod(data connectionData, value string) {
	setSettingKey(data, "ipv4", "method", value)
}
func setSettingIP4ConfigNeverDefault(data connectionData, value bool) {
	setSettingKey(data, "ipv4", "never-default", value)
}
func setSettingIP4ConfigRouteMetric(data connectionData, value int64) {
	setSettingKey(data, "ipv4", "route-metric", value)
}
func setSettingIP4ConfigRoutes(data connectionData, value [][]uint32) {
	setSettingKey(data, "ipv4", "routes", value)
}
func setSettingIP6ConfigAddrGenMode(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "addr-gen-mode", value)
}
func setSettingIP6ConfigAddresses(data connectionData, value ipv6Addresses) {
	setSettingKey(data, "ipv6", "addresses", value)
}
func setSettingIP6ConfigDadTimeout(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "dad-timeout", value)
}
func setSettingIP6ConfigDhcpHostname(data connectionData, value string) {
	setSettingKey(data, "ipv6", "dhcp-hostname", value)
}
func setSettingIP6ConfigDhcpSendHostname(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "dhcp-send-hostname", value)
}
func setSettingIP6ConfigDhcpTimeout(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "dhcp-timeout", value)
}
func setSettingIP6ConfigDns(data connectionData, value [][]byte) {
	setSettingKey(data, "ipv6", "dns", value)
}
func setSettingIP6ConfigDnsOptions(data connectionData, value []string) {
	setSettingKey(data, "ipv6", "dns-options", value)
}
func setSettingIP6ConfigDnsPriority(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "dns-priority", value)
}
func setSettingIP6ConfigDnsSearch(data connectionData, value []string) {
	setSettingKey(data, "ipv6", "dns-search", value)
}
func setSettingIP6ConfigGateway(data connectionData, value string) {
	setSettingKey(data, "ipv6", "gateway", value)
}
func setSettingIP6ConfigIgnoreAutoDns(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "ignore-auto-dns", value)
}
func setSettingIP6ConfigIgnoreAutoRoutes(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "ignore-auto-routes", value)
}
func setSettingIP6ConfigIp6Privacy(data connectionData, value int32) {
	setSettingKey(data, "ipv6", "ip6-privacy", value)
}
func setSettingIP6ConfigMayFail(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "may-fail", value)
}
func setSettingIP6ConfigMethod(data connectionData, value string) {
	setSettingKey(data, "ipv6", "method", value)
}
func setSettingIP6ConfigNeverDefault(data connectionData, value bool) {
	setSettingKey(data, "ipv6", "never-default", value)
}
func setSettingIP6ConfigRouteMetric(data connectionData, value int64) {
	setSettingKey(data, "ipv6", "route-metric", value)
}
func setSettingIP6ConfigRoutes(data connectionData, value ipv6Routes) {
	setSettingKey(data, "ipv6", "routes", value)
}
func setSettingIP6ConfigToken(data connectionData, value string) {
	setSettingKey(data, "ipv6", "token", value)
}
func setSettingIPTunnelEncapsulationLimit(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "encapsulation-limit", value)
}
func setSettingIPTunnelFlowLabel(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "flow-label", value)
}
func setSettingIPTunnelInputKey(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "input-key", value)
}
func setSettingIPTunnelLocal(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "local", value)
}
func setSettingIPTunnelMode(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "mode", value)
}
func setSettingIPTunnelMtu(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "mtu", value)
}
func setSettingIPTunnelOutputKey(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "output-key", value)
}
func setSettingIPTunnelParent(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "parent", value)
}
func setSettingIPTunnelPathMtuDiscovery(data connectionData, value bool) {
	setSettingKey(data, "ip-tunnel", "path-mtu-discovery", value)
}
func setSettingIPTunnelRemote(data connectionData, value string) {
	setSettingKey(data, "ip-tunnel", "remote", value)
}
func setSettingIPTunnelTos(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "tos", value)
}
func setSettingIPTunnelTtl(data connectionData, value uint32) {
	setSettingKey(data, "ip-tunnel", "ttl", value)
}
func setSettingMacvlanMode(data connectionData, value uint32) {
	setSettingKey(data, "macvlan", "mode", value)
}
func setSettingMacvlanParent(data connectionData, value string) {
	setSettingKey(data, "macvlan", "parent", value)
}
func setSettingMacvlanPromiscuous(data connectionData, value bool) {
	setSettingKey(data, "macvlan", "promiscuous", value)
}
func setSettingMacvlanTap(data connectionData, value bool) {
	setSettingKey(data, "macvlan", "tap", value)
}
func setSettingOlpcMeshChannel(data connectionData, value uint32) {
	setSettingKey(data, "802-11-olpc-mesh", "channel", value)
}
func setSettingOlpcMeshDhcpAnycastAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-11-olpc-mesh", "dhcp-anycast-address", value)
}
func setSettingOlpcMeshSsid(data connectionData, value []byte) {
	setSettingKey(data, "802-11-olpc-mesh", "ssid", value)
}
func setSettingPppBaud(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "baud", value)
}
func setSettingPppCrtscts(data connectionData, value bool) {
	setSettingKey(data, "ppp", "crtscts", value)
}
func setSettingPppLcpEchoFailure(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "lcp-echo-failure", value)
}
func setSettingPppLcpEchoInterval(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "lcp-echo-interval", value)
}
func setSettingPppMppeStateful(data connectionData, value bool) {
	setSettingKey(data, "ppp", "mppe-stateful", value)
}
func setSettingPppMru(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "mru", value)
}
func setSettingPppMtu(data connectionData, value uint32) {
	setSettingKey(data, "ppp", "mtu", value)
}
func setSettingPppNoVjComp(data connectionData, value bool) {
	setSettingKey(data, "ppp", "no-vj-comp", value)
}
func setSettingPppNoauth(data connectionData, value bool) {
	setSettingKey(data, "ppp", "noauth", value)
}
func setSettingPppNobsdcomp(data connectionData, value bool) {
	setSettingKey(data, "ppp", "nobsdcomp", value)
}
func setSettingPppNodeflate(data connectionData, value bool) {
	setSettingKey(data, "ppp", "nodeflate", value)
}
func setSettingPppRefuseChap(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-chap", value)
}
func setSettingPppRefuseEap(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-eap", value)
}
func setSettingPppRefuseMschap(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-mschap", value)
}
func setSettingPppRefuseMschapv2(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-mschapv2", value)
}
func setSettingPppRefusePap(data connectionData, value bool) {
	setSettingKey(data, "ppp", "refuse-pap", value)
}
func setSettingPppRequireMppe(data connectionData, value bool) {
	setSettingKey(data, "ppp", "require-mppe", value)
}
func setSettingPppRequireMppe128(data connectionData, value bool) {
	setSettingKey(data, "ppp", "require-mppe-128", value)
}
func setSettingPppoePassword(data connectionData, value string) {
	setSettingKey(data, "pppoe", "password", value)
}
func setSettingPppoePasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "pppoe", "password-flags", value)
}
func setSettingPppoeService(data connectionData, value string) {
	setSettingKey(data, "pppoe", "service", value)
}
func setSettingPppoeUsername(data connectionData, value string) {
	setSettingKey(data, "pppoe", "username", value)
}
func setSettingSerialBaud(data connectionData, value uint32) {
	setSettingKey(data, "serial", "baud", value)
}
func setSettingSerialBits(data connectionData, value uint32) {
	setSettingKey(data, "serial", "bits", value)
}
func setSettingSerialParity(data connectionData, value byte) {
	setSettingKey(data, "serial", "parity", value)
}
func setSettingSerialSendDelay(data connectionData, value uint64) {
	setSettingKey(data, "serial", "send-delay", value)
}
func setSettingSerialStopbits(data connectionData, value uint32) {
	setSettingKey(data, "serial", "stopbits", value)
}
func setSettingTeamConfig(data connectionData, value string) {
	setSettingKey(data, "team", "config", value)
}
func setSettingTeamPortConfig(data connectionData, value string) {
	setSettingKey(data, "team-port", "config", value)
}
func setSettingTunGroup(data connectionData, value string) {
	setSettingKey(data, "tun", "group", value)
}
func setSettingTunMode(data connectionData, value uint32) {
	setSettingKey(data, "tun", "mode", value)
}
func setSettingTunMultiQueue(data connectionData, value bool) {
	setSettingKey(data, "tun", "multi-queue", value)
}
func setSettingTunOwner(data connectionData, value string) {
	setSettingKey(data, "tun", "owner", value)
}
func setSettingTunPi(data connectionData, value bool) {
	setSettingKey(data, "tun", "pi", value)
}
func setSettingTunVnetHdr(data connectionData, value bool) {
	setSettingKey(data, "tun", "vnet-hdr", value)
}
func setSettingVlanEgressPriorityMap(data connectionData, value []string) {
	setSettingKey(data, "vlan", "egress-priority-map", value)
}
func setSettingVlanFlags(data connectionData, value uint32) {
	setSettingKey(data, "vlan", "flags", value)
}
func setSettingVlanId(data connectionData, value uint32) {
	setSettingKey(data, "vlan", "id", value)
}
func setSettingVlanIngressPriorityMap(data connectionData, value []string) {
	setSettingKey(data, "vlan", "ingress-priority-map", value)
}
func setSettingVlanParent(data connectionData, value string) {
	setSettingKey(data, "vlan", "parent", value)
}
func setSettingVpnData(data connectionData, value map[string]string) {
	setSettingKey(data, "vpn", "data", value)
}
func setSettingVpnPersistent(data connectionData, value bool) {
	setSettingKey(data, "vpn", "persistent", value)
}
func setSettingVpnSecrets(data connectionData, value map[string]string) {
	setSettingKey(data, "vpn", "secrets", value)
}
func setSettingVpnServiceType(data connectionData, value string) {
	setSettingKey(data, "vpn", "service-type", value)
}
func setSettingVpnTimeout(data connectionData, value uint32) {
	setSettingKey(data, "vpn", "timeout", value)
}
func setSettingVpnUserName(data connectionData, value string) {
	setSettingKey(data, "vpn", "user-name", value)
}
func setSettingVxlanAgeing(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "ageing", value)
}
func setSettingVxlanDestinationPort(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "destination-port", value)
}
func setSettingVxlanId(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "id", value)
}
func setSettingVxlanL2Miss(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "l2-miss", value)
}
func setSettingVxlanL3Miss(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "l3-miss", value)
}
func setSettingVxlanLearning(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "learning", value)
}
func setSettingVxlanLimit(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "limit", value)
}
func setSettingVxlanLocal(data connectionData, value string) {
	setSettingKey(data, "vxlan", "local", value)
}
func setSettingVxlanParent(data connectionData, value string) {
	setSettingKey(data, "vxlan", "parent", value)
}
func setSettingVxlanProxy(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "proxy", value)
}
func setSettingVxlanRemote(data connectionData, value string) {
	setSettingKey(data, "vxlan", "remote", value)
}
func setSettingVxlanRsc(data connectionData, value bool) {
	setSettingKey(data, "vxlan", "rsc", value)
}
func setSettingVxlanSourcePortMax(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "source-port-max", value)
}
func setSettingVxlanSourcePortMin(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "source-port-min", value)
}
func setSettingVxlanTos(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "tos", value)
}
func setSettingVxlanTtl(data connectionData, value uint32) {
	setSettingKey(data, "vxlan", "ttl", value)
}
func setSettingWimaxMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "wimax", "mac-address", value)
}
func setSettingWimaxNetworkName(data connectionData, value string) {
	setSettingKey(data, "wimax", "network-name", value)
}
func setSettingWiredAutoNegotiate(data connectionData, value bool) {
	setSettingKey(data, "802-3-ethernet", "auto-negotiate", value)
}
func setSettingWiredClonedMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-3-ethernet", "cloned-mac-address", value)
}
func setSettingWiredDuplex(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "duplex", value)
}
func setSettingWiredGenerateMacAddressMask(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "generate-mac-address-mask", value)
}
func setSettingWiredMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-3-ethernet", "mac-address", value)
}
func setSettingWiredMacAddressBlacklist(data connectionData, value []string) {
	setSettingKey(data, "802-3-ethernet", "mac-address-blacklist", value)
}
func setSettingWiredMtu(data connectionData, value uint32) {
	setSettingKey(data, "802-3-ethernet", "mtu", value)
}
func setSettingWiredPort(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "port", value)
}
func setSettingWiredS390Nettype(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "s390-nettype", value)
}
func setSettingWiredS390Options(data connectionData, value map[string]string) {
	setSettingKey(data, "802-3-ethernet", "s390-options", value)
}
func setSettingWiredS390Subchannels(data connectionData, value []string) {
	setSettingKey(data, "802-3-ethernet", "s390-subchannels", value)
}
func setSettingWiredSpeed(data connectionData, value uint32) {
	setSettingKey(data, "802-3-ethernet", "speed", value)
}
func setSettingWiredWakeOnLan(data connectionData, value uint32) {
	setSettingKey(data, "802-3-ethernet", "wake-on-lan", value)
}
func setSettingWiredWakeOnLanPassword(data connectionData, value string) {
	setSettingKey(data, "802-3-ethernet", "wake-on-lan-password", value)
}
func setSettingWirelessBand(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless", "band", value)
}
func setSettingWirelessBssid(data connectionData, value []byte) {
	setSettingKey(data, "802-11-wireless", "bssid", value)
}
func setSettingWirelessChannel(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "channel", value)
}
func setSettingWirelessClonedMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-11-wireless", "cloned-mac-address", value)
}
func setSettingWirelessGenerateMacAddressMask(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless", "generate-mac-address-mask", value)
}
func setSettingWirelessHidden(data connectionData, value bool) {
	setSettingKey(data, "802-11-wireless", "hidden", value)
}
func setSettingWirelessMacAddress(data connectionData, value []byte) {
	setSettingKey(data, "802-11-wireless", "mac-address", value)
}
func setSettingWirelessMacAddressBlacklist(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless", "mac-address-blacklist", value)
}
func setSettingWirelessMacAddressRandomization(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "mac-address-randomization", value)
}
func setSettingWirelessMode(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless", "mode", value)
}
func setSettingWirelessMtu(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "mtu", value)
}
func setSettingWirelessPowersave(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "powersave", value)
}
func setSettingWirelessRate(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "rate", value)
}
func setSettingWirelessSeenBssids(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless", "seen-bssids", value)
}
func setSettingWirelessSsid(data connectionData, value []byte) {
	setSettingKey(data, "802-11-wireless", "ssid", value)
}
func setSettingWirelessTxPower(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless", "tx-power", value)
}
func setSettingWirelessSecurityAuthAlg(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "auth-alg", value)
}
func setSettingWirelessSecurityGroup(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless-security", "group", value)
}
func setSettingWirelessSecurityKeyMgmt(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "key-mgmt", value)
}
func setSettingWirelessSecurityLeapPassword(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "leap-password", value)
}
func setSettingWirelessSecurityLeapPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "leap-password-flags", value)
}
func setSettingWirelessSecurityLeapUsername(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "leap-username", value)
}
func setSettingWirelessSecurityPairwise(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless-security", "pairwise", value)
}
func setSettingWirelessSecurityProto(data connectionData, value []string) {
	setSettingKey(data, "802-11-wireless-security", "proto", value)
}
func setSettingWirelessSecurityPsk(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "psk", value)
}
func setSettingWirelessSecurityPskFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "psk-flags", value)
}
func setSettingWirelessSecurityWepKeyFlags(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "wep-key-flags", value)
}
func setSettingWirelessSecurityWepKeyType(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "wep-key-type", value)
}
func setSettingWirelessSecurityWepKey0(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "wep-key0", value)
}
func setSettingWirelessSecurityWepKey1(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "wep-key1", value)
}
func setSettingWirelessSecurityWepKey2(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "wep-key2", value)
}
func setSettingWirelessSecurityWepKey3(data connectionData, value string) {
	setSettingKey(data, "802-11-wireless-security", "wep-key3", value)
}
func setSettingWirelessSecurityWepTxKeyidx(data connectionData, value uint32) {
	setSettingKey(data, "802-11-wireless-security", "wep-tx-keyidx", value)
}
func setSettingVpnL2tpKeyGateway(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp", "gateway", value)
}
func setSettingVpnL2tpKeyUser(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp", "user", value)
}
func setSettingVpnL2tpKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-l2tp", "password-flags", value)
}
func setSettingVpnL2tpKeyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp", "password", value)
}
func setSettingVpnL2tpKeyDomain(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp", "domain", value)
}
func setSettingVpnL2tpKeyRequireMppe(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe", value)
}
func setSettingVpnL2tpKeyRequireMppe40(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-40", value)
}
func setSettingVpnL2tpKeyRequireMppe128(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-128", value)
}
func setSettingVpnL2tpKeyMppeStateful(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "mppe-stateful", value)
}
func setSettingVpnL2tpKeyRefuseEap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-eap", value)
}
func setSettingVpnL2tpKeyRefusePap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-pap", value)
}
func setSettingVpnL2tpKeyRefuseChap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-chap", value)
}
func setSettingVpnL2tpKeyRefuseMschap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschap", value)
}
func setSettingVpnL2tpKeyRefuseMschapv2(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2", value)
}
func setSettingVpnL2tpKeyNobsdcomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "nobsdcomp", value)
}
func setSettingVpnL2tpKeyNodeflate(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "nodeflate", value)
}
func setSettingVpnL2tpKeyNoVjComp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "no-vj-comp", value)
}
func setSettingVpnL2tpKeyNoPcomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "nopcomp", value)
}
func setSettingVpnL2tpKeyNoAccomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "noaccomp", value)
}
func setSettingVpnL2tpKeyLcpEchoFailure(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure", value)
}
func setSettingVpnL2tpKeyLcpEchoInterval(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval", value)
}
func setSettingVpnL2tpKeyIpsecEnable(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled", value)
}
func setSettingVpnL2tpKeyIpsecGroupName(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name", value)
}
func setSettingVpnL2tpKeyIpsecGatewayId(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id", value)
}
func setSettingVpnL2tpKeyIpsecPsk(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-psk", value)
}
func setSettingVpnOpenconnectKeyGateway(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "gateway", value)
}
func setSettingVpnOpenconnectKeyCacert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "cacert", value)
}
func setSettingVpnOpenconnectKeyProxy(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "proxy", value)
}
func setSettingVpnOpenconnectKeyCsdEnable(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openconnect", "enable_csd_trojan", value)
}
func setSettingVpnOpenconnectKeyCsdWrapper(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "csd_wrapper", value)
}
func setSettingVpnOpenconnectKeyUsercert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "usercert", value)
}
func setSettingVpnOpenconnectKeyPrivkey(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "userkey", value)
}
func setSettingVpnOpenconnectKeyPemPassphraseFsid(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openconnect", "pem_passphrase_fsid", value)
}
func setSettingVpnOpenconnectKeyCookie(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "cookie", value)
}
func setSettingVpnOpenconnectKeyGwcert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "gwcert", value)
}
func setSettingVpnOpenconnectKeyAuthtype(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "authtype", value)
}
func setSettingVpnOpenconnectKeyMtu(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "mtu", value)
}
func setSettingVpnOpenconnectKeyStokenSource(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "stoken_source", value)
}
func setSettingVpnOpenconnectKeyStokenString(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openconnect", "stoken_string", value)
}
func setSettingVpnOpenvpnKeyRemote(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "remote", value)
}
func setSettingVpnOpenvpnKeyConnectionType(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "connection-type", value)
}
func setSettingVpnOpenvpnKeyUsername(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "username", value)
}
func setSettingVpnOpenvpnKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn", "password-flags", value)
}
func setSettingVpnOpenvpnKeyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "password", value)
}
func setSettingVpnOpenvpnKeyCa(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "ca", value)
}
func setSettingVpnOpenvpnKeyCert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "cert", value)
}
func setSettingVpnOpenvpnKeyKey(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "key", value)
}
func setSettingVpnOpenvpnKeyCertpassFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn", "cert-pass-flags", value)
}
func setSettingVpnOpenvpnKeyCertpass(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "cert-pass", value)
}
func setSettingVpnOpenvpnKeyStaticKey(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "static-key", value)
}
func setSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn", "static-key-direction", value)
}
func setSettingVpnOpenvpnKeyRemoteIp(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "remote-ip", value)
}
func setSettingVpnOpenvpnKeyLocalIp(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn", "local-ip", value)
}
func setSettingVpnOpenvpnKeyPort(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "port", value)
}
func setSettingVpnOpenvpnKeyRenegSeconds(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "reneg-seconds", value)
}
func setSettingVpnOpenvpnKeyCompLzo(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "comp-lzo", value)
}
func setSettingVpnOpenvpnKeyProtoTcp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "proto-tcp", value)
}
func setSettingVpnOpenvpnKeyTapDev(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "tap-dev", value)
}
func setSettingVpnOpenvpnKeyTunnelMtu(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "tunnel-mtu", value)
}
func setSettingVpnOpenvpnKeyFragmentSize(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "fragment-size", value)
}
func setSettingVpnOpenvpnKeyMssfix(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "mssfix", value)
}
func setSettingVpnOpenvpnKeyRemoteRandom(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-advanced", "remote-random", value)
}
func setSettingVpnOpenvpnKeyCipher(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-security", "cipher", value)
}
func setSettingVpnOpenvpnKeyAuth(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-security", "auth", value)
}
func setSettingVpnOpenvpnKeyTlsRemote(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-tlsauth", "tls-remote", value)
}
func setSettingVpnOpenvpnKeyRemoteCertTls(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls", value)
}
func setSettingVpnOpenvpnKeyTa(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta", value)
}
func setSettingVpnOpenvpnKeyTaDir(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta-dir", value)
}
func setSettingVpnOpenvpnKeyProxyType(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-type", value)
}
func setSettingVpnOpenvpnKeyProxyServer(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-server", value)
}
func setSettingVpnOpenvpnKeyProxyPort(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-port", value)
}
func setSettingVpnOpenvpnKeyProxyRetry(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-retry", value)
}
func setSettingVpnOpenvpnKeyHttpProxyUsername(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-username", value)
}
func setSettingVpnOpenvpnKeyHttpProxyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password", value)
}
func setSettingVpnOpenvpnKeyHttpProxyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags", value)
}
func setSettingVpnPptpKeyGateway(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-pptp", "gateway", value)
}
func setSettingVpnPptpKeyUser(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-pptp", "user", value)
}
func setSettingVpnPptpKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-pptp", "password-flags", value)
}
func setSettingVpnPptpKeyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-pptp", "password", value)
}
func setSettingVpnPptpKeyDomain(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-pptp", "domain", value)
}
func setSettingVpnPptpKeyRequireMppe(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe", value)
}
func setSettingVpnPptpKeyRequireMppe40(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-40", value)
}
func setSettingVpnPptpKeyRequireMppe128(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-128", value)
}
func setSettingVpnPptpKeyMppeStateful(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "mppe-stateful", value)
}
func setSettingVpnPptpKeyRefuseEap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-eap", value)
}
func setSettingVpnPptpKeyRefusePap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-pap", value)
}
func setSettingVpnPptpKeyRefuseChap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-chap", value)
}
func setSettingVpnPptpKeyRefuseMschap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschap", value)
}
func setSettingVpnPptpKeyRefuseMschapv2(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschapv2", value)
}
func setSettingVpnPptpKeyNobsdcomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "nobsdcomp", value)
}
func setSettingVpnPptpKeyNodeflate(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "nodeflate", value)
}
func setSettingVpnPptpKeyNoVjComp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "no-vj-comp", value)
}
func setSettingVpnPptpKeyLcpEchoFailure(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-failure", value)
}
func setSettingVpnPptpKeyLcpEchoInterval(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-interval", value)
}
func setSettingVpnStrongswanKeyAddress(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "address", value)
}
func setSettingVpnStrongswanKeyCertificate(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "certificate", value)
}
func setSettingVpnStrongswanKeyMethod(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "method", value)
}
func setSettingVpnStrongswanKeyUser(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "user", value)
}
func setSettingVpnStrongswanKeyUsercert(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "usercert", value)
}
func setSettingVpnStrongswanKeyUserkey(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "userkey", value)
}
func setSettingVpnStrongswanKeyPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-strongswan", "password", value)
}
func setSettingVpnStrongswanKeyPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-strongswan", "password-flags", value)
}
func setSettingVpnStrongswanKeyVirtual(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-strongswan", "virtual", value)
}
func setSettingVpnStrongswanKeyEncap(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-strongswan", "encap", value)
}
func setSettingVpnStrongswanKeyIpcomp(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-strongswan", "ipcomp", value)
}
func setSettingVpnVpncKeyGateway(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "IPSec gateway", value)
}
func setSettingVpnVpncKeyXauthUser(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "Xauth username", value)
}
func setSettingVpnVpncKeyXauthPasswordType(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "xauth-password-type", value)
}
func setSettingVpnVpncKeyXauthPasswordFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc", "Xauth password-flags", value)
}
func setSettingVpnVpncKeyXauthPassword(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "Xauth password", value)
}
func setSettingVpnVpncKeyId(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "IPSec ID", value)
}
func setSettingVpnVpncKeySecretType(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "ipsec-secret-type", value)
}
func setSettingVpnVpncKeySecretFlags(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc", "IPSec secret-flags", value)
}
func setSettingVpnVpncKeySecret(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "IPSec secret", value)
}
func setSettingVpnVpncKeyAuthmode(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "IKE Authmode", value)
}
func setSettingVpnVpncKeyCaFile(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc", "CA-File", value)
}
func setSettingVpnVpncKeyDomain(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Domain", value)
}
func setSettingVpnVpncKeyVendor(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Vendor", value)
}
func setSettingVpnVpncKeyAppVersion(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Application Version", value)
}
func setSettingVpnVpncKeySingleDes(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Enable Single DES", value)
}
func setSettingVpnVpncKeyNoEncryption(data connectionData, value bool) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Enable no encryption", value)
}
func setSettingVpnVpncKeyNatTraversalMode(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode", value)
}
func setSettingVpnVpncKeyDhgroup(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "IKE DH Group", value)
}
func setSettingVpnVpncKeyPerfectForward(data connectionData, value string) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy", value)
}
func setSettingVpnVpncKeyLocalPort(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Local Port", value)
}
func setSettingVpnVpncKeyDpdIdleTimeout(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)", value)
}
func setSettingVpnVpncKeyCiscoUdpEncapsPort(data connectionData, value uint32) {
	setSettingKey(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port", value)
}

// JSON Getter
func getSetting8021xAltsubjectMatchesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "altsubject-matches", ktypeArrayString)
	return
}
func getSetting8021xAnonymousIdentityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "anonymous-identity", ktypeString)
	return
}
func getSetting8021xCaCertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "ca-cert", ktypeWrapperString)
	return
}
func getSetting8021xCaPathJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "ca-path", ktypeString)
	return
}
func getSetting8021xClientCertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "client-cert", ktypeWrapperString)
	return
}
func getSetting8021xDomainSuffixMatchJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "domain-suffix-match", ktypeString)
	return
}
func getSetting8021xEapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "eap", ktypeArrayString)
	return
}
func getSetting8021xIdentityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "identity", ktypeString)
	return
}
func getSetting8021xPacFileJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "pac-file", ktypeString)
	return
}
func getSetting8021xPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "password", ktypeString)
	return
}
func getSetting8021xPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "password-flags", ktypeUint32)
	return
}
func getSetting8021xPasswordRawJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "password-raw", ktypeArrayByte)
	return
}
func getSetting8021xPasswordRawFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "password-raw-flags", ktypeUint32)
	return
}
func getSetting8021xPhase1FastProvisioningJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase1-fast-provisioning", ktypeString)
	return
}
func getSetting8021xPhase1PeaplabelJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase1-peaplabel", ktypeString)
	return
}
func getSetting8021xPhase1PeapverJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase1-peapver", ktypeString)
	return
}
func getSetting8021xPhase2AltsubjectMatchesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-altsubject-matches", ktypeArrayString)
	return
}
func getSetting8021xPhase2AuthJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-auth", ktypeString)
	return
}
func getSetting8021xPhase2AutheapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-autheap", ktypeString)
	return
}
func getSetting8021xPhase2CaCertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-ca-cert", ktypeWrapperString)
	return
}
func getSetting8021xPhase2CaPathJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-ca-path", ktypeString)
	return
}
func getSetting8021xPhase2ClientCertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-client-cert", ktypeWrapperString)
	return
}
func getSetting8021xPhase2DomainSuffixMatchJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-domain-suffix-match", ktypeString)
	return
}
func getSetting8021xPhase2PrivateKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-private-key", ktypeWrapperString)
	return
}
func getSetting8021xPhase2PrivateKeyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-private-key-password", ktypeString)
	return
}
func getSetting8021xPhase2PrivateKeyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-private-key-password-flags", ktypeUint32)
	return
}
func getSetting8021xPhase2SubjectMatchJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "phase2-subject-match", ktypeString)
	return
}
func getSetting8021xPinJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "pin", ktypeString)
	return
}
func getSetting8021xPinFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "pin-flags", ktypeUint32)
	return
}
func getSetting8021xPrivateKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "private-key", ktypeWrapperString)
	return
}
func getSetting8021xPrivateKeyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "private-key-password", ktypeString)
	return
}
func getSetting8021xPrivateKeyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "private-key-password-flags", ktypeUint32)
	return
}
func getSetting8021xSubjectMatchJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "subject-match", ktypeString)
	return
}
func getSetting8021xSystemCaCertsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-1x", "system-ca-certs", ktypeBoolean)
	return
}
func getSettingAdslEncapsulationJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "adsl", "encapsulation", ktypeString)
	return
}
func getSettingAdslPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "adsl", "password", ktypeString)
	return
}
func getSettingAdslPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "adsl", "password-flags", ktypeUint32)
	return
}
func getSettingAdslProtocolJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "adsl", "protocol", ktypeString)
	return
}
func getSettingAdslUsernameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "adsl", "username", ktypeString)
	return
}
func getSettingAdslVciJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "adsl", "vci", ktypeUint32)
	return
}
func getSettingAdslVpiJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "adsl", "vpi", ktypeUint32)
	return
}
func getSettingBluetoothBdaddrJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bluetooth", "bdaddr", ktypeArrayByte)
	return
}
func getSettingBluetoothTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bluetooth", "type", ktypeString)
	return
}
func getSettingBondOptionsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bond", "options", ktypeDictStringString)
	return
}
func getSettingBridgeAgeingTimeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge", "ageing-time", ktypeUint32)
	return
}
func getSettingBridgeForwardDelayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge", "forward-delay", ktypeUint32)
	return
}
func getSettingBridgeHelloTimeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge", "hello-time", ktypeUint32)
	return
}
func getSettingBridgeMacAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge", "mac-address", ktypeArrayByte)
	return
}
func getSettingBridgeMaxAgeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge", "max-age", ktypeUint32)
	return
}
func getSettingBridgeMulticastSnoopingJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge", "multicast-snooping", ktypeBoolean)
	return
}
func getSettingBridgePriorityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge", "priority", ktypeUint32)
	return
}
func getSettingBridgeStpJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge", "stp", ktypeBoolean)
	return
}
func getSettingBridgePortHairpinModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge-port", "hairpin-mode", ktypeBoolean)
	return
}
func getSettingBridgePortPathCostJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge-port", "path-cost", ktypeUint32)
	return
}
func getSettingBridgePortPriorityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "bridge-port", "priority", ktypeUint32)
	return
}
func getSettingCdmaNumberJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "cdma", "number", ktypeString)
	return
}
func getSettingCdmaPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "cdma", "password", ktypeString)
	return
}
func getSettingCdmaPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "cdma", "password-flags", ktypeUint32)
	return
}
func getSettingCdmaUsernameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "cdma", "username", ktypeString)
	return
}
func getSettingConnectionAutoconnectJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "autoconnect", ktypeBoolean)
	return
}
func getSettingConnectionAutoconnectPriorityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "autoconnect-priority", ktypeInt32)
	return
}
func getSettingConnectionAutoconnectSlavesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "autoconnect-slaves", ktypeInt32)
	return
}
func getSettingConnectionGatewayPingTimeoutJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "gateway-ping-timeout", ktypeUint32)
	return
}
func getSettingConnectionIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "id", ktypeString)
	return
}
func getSettingConnectionInterfaceNameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "interface-name", ktypeString)
	return
}
func getSettingConnectionLldpJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "lldp", ktypeInt32)
	return
}
func getSettingConnectionMasterJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "master", ktypeString)
	return
}
func getSettingConnectionMeteredJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "metered", ktypeInt32)
	return
}
func getSettingConnectionPermissionsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "permissions", ktypeArrayString)
	return
}
func getSettingConnectionReadOnlyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "read-only", ktypeBoolean)
	return
}
func getSettingConnectionSecondariesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "secondaries", ktypeArrayString)
	return
}
func getSettingConnectionSlaveTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "slave-type", ktypeString)
	return
}
func getSettingConnectionStableIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "stable-id", ktypeString)
	return
}
func getSettingConnectionTimestampJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "timestamp", ktypeUint64)
	return
}
func getSettingConnectionTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "type", ktypeString)
	return
}
func getSettingConnectionUuidJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "uuid", ktypeString)
	return
}
func getSettingConnectionZoneJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "connection", "zone", ktypeString)
	return
}
func getSettingDcbAppFcoeFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "app-fcoe-flags", ktypeUint32)
	return
}
func getSettingDcbAppFcoeModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "app-fcoe-mode", ktypeString)
	return
}
func getSettingDcbAppFcoePriorityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "app-fcoe-priority", ktypeInt32)
	return
}
func getSettingDcbAppFipFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "app-fip-flags", ktypeUint32)
	return
}
func getSettingDcbAppFipPriorityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "app-fip-priority", ktypeInt32)
	return
}
func getSettingDcbAppIscsiFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "app-iscsi-flags", ktypeUint32)
	return
}
func getSettingDcbAppIscsiPriorityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "app-iscsi-priority", ktypeInt32)
	return
}
func getSettingDcbPriorityBandwidthJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "priority-bandwidth", ktypeArrayUint32)
	return
}
func getSettingDcbPriorityFlowControlJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "priority-flow-control", ktypeArrayUint32)
	return
}
func getSettingDcbPriorityFlowControlFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "priority-flow-control-flags", ktypeUint32)
	return
}
func getSettingDcbPriorityGroupBandwidthJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "priority-group-bandwidth", ktypeArrayUint32)
	return
}
func getSettingDcbPriorityGroupFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "priority-group-flags", ktypeUint32)
	return
}
func getSettingDcbPriorityGroupIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "priority-group-id", ktypeArrayUint32)
	return
}
func getSettingDcbPriorityStrictBandwidthJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "priority-strict-bandwidth", ktypeArrayUint32)
	return
}
func getSettingDcbPriorityTrafficClassJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "dcb", "priority-traffic-class", ktypeArrayUint32)
	return
}
func getSettingGsmApnJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "apn", ktypeString)
	return
}
func getSettingGsmDeviceIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "device-id", ktypeString)
	return
}
func getSettingGsmHomeOnlyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "home-only", ktypeBoolean)
	return
}
func getSettingGsmNetworkIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "network-id", ktypeString)
	return
}
func getSettingGsmNumberJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "number", ktypeString)
	return
}
func getSettingGsmPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "password", ktypeString)
	return
}
func getSettingGsmPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "password-flags", ktypeUint32)
	return
}
func getSettingGsmPinJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "pin", ktypeString)
	return
}
func getSettingGsmPinFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "pin-flags", ktypeUint32)
	return
}
func getSettingGsmSimIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "sim-id", ktypeString)
	return
}
func getSettingGsmSimOperatorIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "sim-operator-id", ktypeString)
	return
}
func getSettingGsmUsernameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "gsm", "username", ktypeString)
	return
}
func getSettingInfinibandMacAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "infiniband", "mac-address", ktypeArrayByte)
	return
}
func getSettingInfinibandMtuJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "infiniband", "mtu", ktypeUint32)
	return
}
func getSettingInfinibandPKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "infiniband", "p-key", ktypeInt32)
	return
}
func getSettingInfinibandParentJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "infiniband", "parent", ktypeString)
	return
}
func getSettingInfinibandTransportModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "infiniband", "transport-mode", ktypeString)
	return
}
func getSettingIP4ConfigAddressesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "addresses", ktypeWrapperIpv4Addresses)
	return
}
func getSettingIP4ConfigDadTimeoutJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dad-timeout", ktypeInt32)
	return
}
func getSettingIP4ConfigDhcpClientIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dhcp-client-id", ktypeString)
	return
}
func getSettingIP4ConfigDhcpFqdnJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dhcp-fqdn", ktypeString)
	return
}
func getSettingIP4ConfigDhcpHostnameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dhcp-hostname", ktypeString)
	return
}
func getSettingIP4ConfigDhcpSendHostnameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dhcp-send-hostname", ktypeBoolean)
	return
}
func getSettingIP4ConfigDhcpTimeoutJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dhcp-timeout", ktypeInt32)
	return
}
func getSettingIP4ConfigDnsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dns", ktypeWrapperIpv4Dns)
	return
}
func getSettingIP4ConfigDnsOptionsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dns-options", ktypeArrayString)
	return
}
func getSettingIP4ConfigDnsPriorityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dns-priority", ktypeInt32)
	return
}
func getSettingIP4ConfigDnsSearchJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "dns-search", ktypeArrayString)
	return
}
func getSettingIP4ConfigGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "gateway", ktypeString)
	return
}
func getSettingIP4ConfigIgnoreAutoDnsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "ignore-auto-dns", ktypeBoolean)
	return
}
func getSettingIP4ConfigIgnoreAutoRoutesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "ignore-auto-routes", ktypeBoolean)
	return
}
func getSettingIP4ConfigMayFailJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "may-fail", ktypeBoolean)
	return
}
func getSettingIP4ConfigMethodJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "method", ktypeString)
	return
}
func getSettingIP4ConfigNeverDefaultJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "never-default", ktypeBoolean)
	return
}
func getSettingIP4ConfigRouteMetricJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "route-metric", ktypeInt64)
	return
}
func getSettingIP4ConfigRoutesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv4", "routes", ktypeWrapperIpv4Routes)
	return
}
func getSettingIP6ConfigAddrGenModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "addr-gen-mode", ktypeInt32)
	return
}
func getSettingIP6ConfigAddressesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "addresses", ktypeWrapperIpv6Addresses)
	return
}
func getSettingIP6ConfigDadTimeoutJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "dad-timeout", ktypeInt32)
	return
}
func getSettingIP6ConfigDhcpHostnameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "dhcp-hostname", ktypeString)
	return
}
func getSettingIP6ConfigDhcpSendHostnameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "dhcp-send-hostname", ktypeBoolean)
	return
}
func getSettingIP6ConfigDhcpTimeoutJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "dhcp-timeout", ktypeInt32)
	return
}
func getSettingIP6ConfigDnsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "dns", ktypeWrapperIpv6Dns)
	return
}
func getSettingIP6ConfigDnsOptionsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "dns-options", ktypeArrayString)
	return
}
func getSettingIP6ConfigDnsPriorityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "dns-priority", ktypeInt32)
	return
}
func getSettingIP6ConfigDnsSearchJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "dns-search", ktypeArrayString)
	return
}
func getSettingIP6ConfigGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "gateway", ktypeString)
	return
}
func getSettingIP6ConfigIgnoreAutoDnsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "ignore-auto-dns", ktypeBoolean)
	return
}
func getSettingIP6ConfigIgnoreAutoRoutesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "ignore-auto-routes", ktypeBoolean)
	return
}
func getSettingIP6ConfigIp6PrivacyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "ip6-privacy", ktypeInt32)
	return
}
func getSettingIP6ConfigMayFailJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "may-fail", ktypeBoolean)
	return
}
func getSettingIP6ConfigMethodJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "method", ktypeString)
	return
}
func getSettingIP6ConfigNeverDefaultJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "never-default", ktypeBoolean)
	return
}
func getSettingIP6ConfigRouteMetricJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "route-metric", ktypeInt64)
	return
}
func getSettingIP6ConfigRoutesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "routes", ktypeWrapperIpv6Routes)
	return
}
func getSettingIP6ConfigTokenJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ipv6", "token", ktypeString)
	return
}
func getSettingIPTunnelEncapsulationLimitJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "encapsulation-limit", ktypeUint32)
	return
}
func getSettingIPTunnelFlowLabelJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "flow-label", ktypeUint32)
	return
}
func getSettingIPTunnelInputKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "input-key", ktypeString)
	return
}
func getSettingIPTunnelLocalJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "local", ktypeString)
	return
}
func getSettingIPTunnelModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "mode", ktypeUint32)
	return
}
func getSettingIPTunnelMtuJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "mtu", ktypeUint32)
	return
}
func getSettingIPTunnelOutputKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "output-key", ktypeString)
	return
}
func getSettingIPTunnelParentJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "parent", ktypeString)
	return
}
func getSettingIPTunnelPathMtuDiscoveryJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "path-mtu-discovery", ktypeBoolean)
	return
}
func getSettingIPTunnelRemoteJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "remote", ktypeString)
	return
}
func getSettingIPTunnelTosJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "tos", ktypeUint32)
	return
}
func getSettingIPTunnelTtlJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ip-tunnel", "ttl", ktypeUint32)
	return
}
func getSettingMacvlanModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "macvlan", "mode", ktypeUint32)
	return
}
func getSettingMacvlanParentJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "macvlan", "parent", ktypeString)
	return
}
func getSettingMacvlanPromiscuousJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "macvlan", "promiscuous", ktypeBoolean)
	return
}
func getSettingMacvlanTapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "macvlan", "tap", ktypeBoolean)
	return
}
func getSettingOlpcMeshChannelJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-olpc-mesh", "channel", ktypeUint32)
	return
}
func getSettingOlpcMeshDhcpAnycastAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-olpc-mesh", "dhcp-anycast-address", ktypeArrayByte)
	return
}
func getSettingOlpcMeshSsidJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-olpc-mesh", "ssid", ktypeArrayByte)
	return
}
func getSettingPppBaudJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "baud", ktypeUint32)
	return
}
func getSettingPppCrtsctsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "crtscts", ktypeBoolean)
	return
}
func getSettingPppLcpEchoFailureJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "lcp-echo-failure", ktypeUint32)
	return
}
func getSettingPppLcpEchoIntervalJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "lcp-echo-interval", ktypeUint32)
	return
}
func getSettingPppMppeStatefulJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "mppe-stateful", ktypeBoolean)
	return
}
func getSettingPppMruJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "mru", ktypeUint32)
	return
}
func getSettingPppMtuJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "mtu", ktypeUint32)
	return
}
func getSettingPppNoVjCompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "no-vj-comp", ktypeBoolean)
	return
}
func getSettingPppNoauthJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "noauth", ktypeBoolean)
	return
}
func getSettingPppNobsdcompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "nobsdcomp", ktypeBoolean)
	return
}
func getSettingPppNodeflateJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "nodeflate", ktypeBoolean)
	return
}
func getSettingPppRefuseChapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "refuse-chap", ktypeBoolean)
	return
}
func getSettingPppRefuseEapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "refuse-eap", ktypeBoolean)
	return
}
func getSettingPppRefuseMschapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "refuse-mschap", ktypeBoolean)
	return
}
func getSettingPppRefuseMschapv2JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "refuse-mschapv2", ktypeBoolean)
	return
}
func getSettingPppRefusePapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "refuse-pap", ktypeBoolean)
	return
}
func getSettingPppRequireMppeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "require-mppe", ktypeBoolean)
	return
}
func getSettingPppRequireMppe128JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "ppp", "require-mppe-128", ktypeBoolean)
	return
}
func getSettingPppoePasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "pppoe", "password", ktypeString)
	return
}
func getSettingPppoePasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "pppoe", "password-flags", ktypeUint32)
	return
}
func getSettingPppoeServiceJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "pppoe", "service", ktypeString)
	return
}
func getSettingPppoeUsernameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "pppoe", "username", ktypeString)
	return
}
func getSettingSerialBaudJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "serial", "baud", ktypeUint32)
	return
}
func getSettingSerialBitsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "serial", "bits", ktypeUint32)
	return
}
func getSettingSerialParityJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "serial", "parity", ktypeByte)
	return
}
func getSettingSerialSendDelayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "serial", "send-delay", ktypeUint64)
	return
}
func getSettingSerialStopbitsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "serial", "stopbits", ktypeUint32)
	return
}
func getSettingTeamConfigJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "team", "config", ktypeString)
	return
}
func getSettingTeamPortConfigJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "team-port", "config", ktypeString)
	return
}
func getSettingTunGroupJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "tun", "group", ktypeString)
	return
}
func getSettingTunModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "tun", "mode", ktypeUint32)
	return
}
func getSettingTunMultiQueueJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "tun", "multi-queue", ktypeBoolean)
	return
}
func getSettingTunOwnerJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "tun", "owner", ktypeString)
	return
}
func getSettingTunPiJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "tun", "pi", ktypeBoolean)
	return
}
func getSettingTunVnetHdrJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "tun", "vnet-hdr", ktypeBoolean)
	return
}
func getSettingVlanEgressPriorityMapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vlan", "egress-priority-map", ktypeArrayString)
	return
}
func getSettingVlanFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vlan", "flags", ktypeUint32)
	return
}
func getSettingVlanIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vlan", "id", ktypeUint32)
	return
}
func getSettingVlanIngressPriorityMapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vlan", "ingress-priority-map", ktypeArrayString)
	return
}
func getSettingVlanParentJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vlan", "parent", ktypeString)
	return
}
func getSettingVpnDataJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vpn", "data", ktypeDictStringString)
	return
}
func getSettingVpnPersistentJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vpn", "persistent", ktypeBoolean)
	return
}
func getSettingVpnSecretsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vpn", "secrets", ktypeDictStringString)
	return
}
func getSettingVpnServiceTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vpn", "service-type", ktypeString)
	return
}
func getSettingVpnTimeoutJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vpn", "timeout", ktypeUint32)
	return
}
func getSettingVpnUserNameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vpn", "user-name", ktypeString)
	return
}
func getSettingVxlanAgeingJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "ageing", ktypeUint32)
	return
}
func getSettingVxlanDestinationPortJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "destination-port", ktypeUint32)
	return
}
func getSettingVxlanIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "id", ktypeUint32)
	return
}
func getSettingVxlanL2MissJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "l2-miss", ktypeBoolean)
	return
}
func getSettingVxlanL3MissJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "l3-miss", ktypeBoolean)
	return
}
func getSettingVxlanLearningJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "learning", ktypeBoolean)
	return
}
func getSettingVxlanLimitJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "limit", ktypeUint32)
	return
}
func getSettingVxlanLocalJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "local", ktypeString)
	return
}
func getSettingVxlanParentJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "parent", ktypeString)
	return
}
func getSettingVxlanProxyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "proxy", ktypeBoolean)
	return
}
func getSettingVxlanRemoteJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "remote", ktypeString)
	return
}
func getSettingVxlanRscJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "rsc", ktypeBoolean)
	return
}
func getSettingVxlanSourcePortMaxJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "source-port-max", ktypeUint32)
	return
}
func getSettingVxlanSourcePortMinJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "source-port-min", ktypeUint32)
	return
}
func getSettingVxlanTosJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "tos", ktypeUint32)
	return
}
func getSettingVxlanTtlJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "vxlan", "ttl", ktypeUint32)
	return
}
func getSettingWimaxMacAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "wimax", "mac-address", ktypeArrayByte)
	return
}
func getSettingWimaxNetworkNameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "wimax", "network-name", ktypeString)
	return
}
func getSettingWiredAutoNegotiateJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "auto-negotiate", ktypeBoolean)
	return
}
func getSettingWiredClonedMacAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "cloned-mac-address", ktypeWrapperMacAddress)
	return
}
func getSettingWiredDuplexJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "duplex", ktypeString)
	return
}
func getSettingWiredGenerateMacAddressMaskJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "generate-mac-address-mask", ktypeString)
	return
}
func getSettingWiredMacAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "mac-address", ktypeWrapperMacAddress)
	return
}
func getSettingWiredMacAddressBlacklistJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "mac-address-blacklist", ktypeArrayString)
	return
}
func getSettingWiredMtuJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "mtu", ktypeUint32)
	return
}
func getSettingWiredPortJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "port", ktypeString)
	return
}
func getSettingWiredS390NettypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "s390-nettype", ktypeString)
	return
}
func getSettingWiredS390OptionsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "s390-options", ktypeDictStringString)
	return
}
func getSettingWiredS390SubchannelsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "s390-subchannels", ktypeArrayString)
	return
}
func getSettingWiredSpeedJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "speed", ktypeUint32)
	return
}
func getSettingWiredWakeOnLanJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "wake-on-lan", ktypeUint32)
	return
}
func getSettingWiredWakeOnLanPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-3-ethernet", "wake-on-lan-password", ktypeString)
	return
}
func getSettingWirelessBandJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "band", ktypeString)
	return
}
func getSettingWirelessBssidJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "bssid", ktypeWrapperString)
	return
}
func getSettingWirelessChannelJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "channel", ktypeUint32)
	return
}
func getSettingWirelessClonedMacAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "cloned-mac-address", ktypeWrapperMacAddress)
	return
}
func getSettingWirelessGenerateMacAddressMaskJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "generate-mac-address-mask", ktypeString)
	return
}
func getSettingWirelessHiddenJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "hidden", ktypeBoolean)
	return
}
func getSettingWirelessMacAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "mac-address", ktypeWrapperMacAddress)
	return
}
func getSettingWirelessMacAddressBlacklistJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "mac-address-blacklist", ktypeArrayString)
	return
}
func getSettingWirelessMacAddressRandomizationJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "mac-address-randomization", ktypeUint32)
	return
}
func getSettingWirelessModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "mode", ktypeString)
	return
}
func getSettingWirelessMtuJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "mtu", ktypeUint32)
	return
}
func getSettingWirelessPowersaveJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "powersave", ktypeUint32)
	return
}
func getSettingWirelessRateJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "rate", ktypeUint32)
	return
}
func getSettingWirelessSeenBssidsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "seen-bssids", ktypeArrayString)
	return
}
func getSettingWirelessSsidJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "ssid", ktypeWrapperString)
	return
}
func getSettingWirelessTxPowerJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless", "tx-power", ktypeUint32)
	return
}
func getSettingWirelessSecurityAuthAlgJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "auth-alg", ktypeString)
	return
}
func getSettingWirelessSecurityGroupJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "group", ktypeArrayString)
	return
}
func getSettingWirelessSecurityKeyMgmtJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "key-mgmt", ktypeString)
	return
}
func getSettingWirelessSecurityLeapPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "leap-password", ktypeString)
	return
}
func getSettingWirelessSecurityLeapPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "leap-password-flags", ktypeUint32)
	return
}
func getSettingWirelessSecurityLeapUsernameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "leap-username", ktypeString)
	return
}
func getSettingWirelessSecurityPairwiseJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "pairwise", ktypeArrayString)
	return
}
func getSettingWirelessSecurityProtoJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "proto", ktypeArrayString)
	return
}
func getSettingWirelessSecurityPskJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "psk", ktypeString)
	return
}
func getSettingWirelessSecurityPskFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "psk-flags", ktypeUint32)
	return
}
func getSettingWirelessSecurityWepKeyFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "wep-key-flags", ktypeUint32)
	return
}
func getSettingWirelessSecurityWepKeyTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "wep-key-type", ktypeUint32)
	return
}
func getSettingWirelessSecurityWepKey0JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "wep-key0", ktypeString)
	return
}
func getSettingWirelessSecurityWepKey1JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "wep-key1", ktypeString)
	return
}
func getSettingWirelessSecurityWepKey2JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "wep-key2", ktypeString)
	return
}
func getSettingWirelessSecurityWepKey3JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "wep-key3", ktypeString)
	return
}
func getSettingWirelessSecurityWepTxKeyidxJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "802-11-wireless-security", "wep-tx-keyidx", ktypeUint32)
	return
}
func getSettingVpnL2tpKeyGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp", "gateway", ktypeString)
	return
}
func getSettingVpnL2tpKeyUserJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp", "user", ktypeString)
	return
}
func getSettingVpnL2tpKeyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp", "password-flags", ktypeUint32)
	return
}
func getSettingVpnL2tpKeyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp", "password", ktypeString)
	return
}
func getSettingVpnL2tpKeyDomainJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp", "domain", ktypeString)
	return
}
func getSettingVpnL2tpKeyRequireMppeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "require-mppe", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyRequireMppe40JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "require-mppe-40", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyRequireMppe128JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "require-mppe-128", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyMppeStatefulJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "mppe-stateful", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyRefuseEapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-eap", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyRefusePapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-pap", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyRefuseChapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-chap", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyRefuseMschapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-mschap", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyRefuseMschapv2JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyNobsdcompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "nobsdcomp", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyNodeflateJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "nodeflate", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyNoVjCompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "no-vj-comp", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyNoPcompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "nopcomp", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyNoAccompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "noaccomp", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyLcpEchoFailureJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure", ktypeUint32)
	return
}
func getSettingVpnL2tpKeyLcpEchoIntervalJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval", ktypeUint32)
	return
}
func getSettingVpnL2tpKeyIpsecEnableJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled", ktypeBoolean)
	return
}
func getSettingVpnL2tpKeyIpsecGroupNameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name", ktypeString)
	return
}
func getSettingVpnL2tpKeyIpsecGatewayIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id", ktypeString)
	return
}
func getSettingVpnL2tpKeyIpsecPskJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-l2tp-ipsec", "ipsec-psk", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "gateway", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyCacertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "cacert", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyProxyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "proxy", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyCsdEnableJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "enable_csd_trojan", ktypeBoolean)
	return
}
func getSettingVpnOpenconnectKeyCsdWrapperJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "csd_wrapper", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyUsercertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "usercert", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyPrivkeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "userkey", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyPemPassphraseFsidJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "pem_passphrase_fsid", ktypeBoolean)
	return
}
func getSettingVpnOpenconnectKeyCookieJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "cookie", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyGwcertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "gwcert", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyAuthtypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "authtype", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyMtuJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "mtu", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyStokenSourceJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "stoken_source", ktypeString)
	return
}
func getSettingVpnOpenconnectKeyStokenStringJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openconnect", "stoken_string", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyRemoteJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "remote", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyConnectionTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "connection-type", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyUsernameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "username", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "password-flags", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "password", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyCaJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "ca", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyCertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "cert", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "key", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyCertpassFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "cert-pass-flags", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyCertpassJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "cert-pass", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyStaticKeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "static-key", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyStaticKeyDirectionJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "static-key-direction", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyRemoteIpJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "remote-ip", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyLocalIpJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn", "local-ip", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyPortJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "port", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyRenegSecondsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "reneg-seconds", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyCompLzoJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "comp-lzo", ktypeBoolean)
	return
}
func getSettingVpnOpenvpnKeyProtoTcpJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "proto-tcp", ktypeBoolean)
	return
}
func getSettingVpnOpenvpnKeyTapDevJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "tap-dev", ktypeBoolean)
	return
}
func getSettingVpnOpenvpnKeyTunnelMtuJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "tunnel-mtu", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyFragmentSizeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "fragment-size", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyMssfixJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "mssfix", ktypeBoolean)
	return
}
func getSettingVpnOpenvpnKeyRemoteRandomJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "remote-random", ktypeBoolean)
	return
}
func getSettingVpnOpenvpnKeyCipherJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-security", "cipher", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyAuthJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-security", "auth", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyTlsRemoteJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-tlsauth", "tls-remote", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyRemoteCertTlsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyTaJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-tlsauth", "ta", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyTaDirJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-tlsauth", "ta-dir", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyProxyTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "proxy-type", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyProxyServerJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "proxy-server", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyProxyPortJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "proxy-port", ktypeUint32)
	return
}
func getSettingVpnOpenvpnKeyProxyRetryJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "proxy-retry", ktypeBoolean)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyUsernameJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "http-proxy-username", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "http-proxy-password", ktypeString)
	return
}
func getSettingVpnOpenvpnKeyHttpProxyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags", ktypeUint32)
	return
}
func getSettingVpnPptpKeyGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp", "gateway", ktypeString)
	return
}
func getSettingVpnPptpKeyUserJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp", "user", ktypeString)
	return
}
func getSettingVpnPptpKeyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp", "password-flags", ktypeUint32)
	return
}
func getSettingVpnPptpKeyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp", "password", ktypeString)
	return
}
func getSettingVpnPptpKeyDomainJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp", "domain", ktypeString)
	return
}
func getSettingVpnPptpKeyRequireMppeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "require-mppe", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyRequireMppe40JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "require-mppe-40", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyRequireMppe128JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "require-mppe-128", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyMppeStatefulJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "mppe-stateful", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyRefuseEapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-eap", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyRefusePapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-pap", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyRefuseChapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-chap", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyRefuseMschapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-mschap", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyRefuseMschapv2JSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-mschapv2", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyNobsdcompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "nobsdcomp", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyNodeflateJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "nodeflate", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyNoVjCompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "no-vj-comp", ktypeBoolean)
	return
}
func getSettingVpnPptpKeyLcpEchoFailureJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "lcp-echo-failure", ktypeUint32)
	return
}
func getSettingVpnPptpKeyLcpEchoIntervalJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-pptp-ppp", "lcp-echo-interval", ktypeUint32)
	return
}
func getSettingVpnStrongswanKeyAddressJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "address", ktypeString)
	return
}
func getSettingVpnStrongswanKeyCertificateJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "certificate", ktypeString)
	return
}
func getSettingVpnStrongswanKeyMethodJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "method", ktypeString)
	return
}
func getSettingVpnStrongswanKeyUserJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "user", ktypeString)
	return
}
func getSettingVpnStrongswanKeyUsercertJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "usercert", ktypeString)
	return
}
func getSettingVpnStrongswanKeyUserkeyJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "userkey", ktypeString)
	return
}
func getSettingVpnStrongswanKeyPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "password", ktypeString)
	return
}
func getSettingVpnStrongswanKeyPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "password-flags", ktypeUint32)
	return
}
func getSettingVpnStrongswanKeyVirtualJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "virtual", ktypeBoolean)
	return
}
func getSettingVpnStrongswanKeyEncapJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "encap", ktypeBoolean)
	return
}
func getSettingVpnStrongswanKeyIpcompJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-strongswan", "ipcomp", ktypeBoolean)
	return
}
func getSettingVpnVpncKeyGatewayJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "IPSec gateway", ktypeString)
	return
}
func getSettingVpnVpncKeyXauthUserJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "Xauth username", ktypeString)
	return
}
func getSettingVpnVpncKeyXauthPasswordTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "xauth-password-type", ktypeString)
	return
}
func getSettingVpnVpncKeyXauthPasswordFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "Xauth password-flags", ktypeUint32)
	return
}
func getSettingVpnVpncKeyXauthPasswordJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "Xauth password", ktypeString)
	return
}
func getSettingVpnVpncKeyIdJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "IPSec ID", ktypeString)
	return
}
func getSettingVpnVpncKeySecretTypeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "ipsec-secret-type", ktypeString)
	return
}
func getSettingVpnVpncKeySecretFlagsJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "IPSec secret-flags", ktypeUint32)
	return
}
func getSettingVpnVpncKeySecretJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "IPSec secret", ktypeString)
	return
}
func getSettingVpnVpncKeyAuthmodeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "IKE Authmode", ktypeString)
	return
}
func getSettingVpnVpncKeyCaFileJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc", "CA-File", ktypeString)
	return
}
func getSettingVpnVpncKeyDomainJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Domain", ktypeString)
	return
}
func getSettingVpnVpncKeyVendorJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Vendor", ktypeString)
	return
}
func getSettingVpnVpncKeyAppVersionJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Application Version", ktypeString)
	return
}
func getSettingVpnVpncKeySingleDesJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Enable Single DES", ktypeBoolean)
	return
}
func getSettingVpnVpncKeyNoEncryptionJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Enable no encryption", ktypeBoolean)
	return
}
func getSettingVpnVpncKeyNatTraversalModeJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode", ktypeString)
	return
}
func getSettingVpnVpncKeyDhgroupJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "IKE DH Group", ktypeString)
	return
}
func getSettingVpnVpncKeyPerfectForwardJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy", ktypeString)
	return
}
func getSettingVpnVpncKeyLocalPortJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Local Port", ktypeUint32)
	return
}
func getSettingVpnVpncKeyDpdIdleTimeoutJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)", ktypeUint32)
	return
}
func getSettingVpnVpncKeyCiscoUdpEncapsPortJSON(data connectionData) (valueJSON string) {
	valueJSON = getSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port", ktypeUint32)
	return
}

// JSON Setter
func setSetting8021xAltsubjectMatchesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "altsubject-matches", valueJSON, ktypeArrayString)
}
func setSetting8021xAnonymousIdentityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "anonymous-identity", valueJSON, ktypeString)
}
func setSetting8021xCaCertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "ca-cert", valueJSON, ktypeWrapperString)
}
func setSetting8021xCaPathJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "ca-path", valueJSON, ktypeString)
}
func setSetting8021xClientCertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "client-cert", valueJSON, ktypeWrapperString)
}
func setSetting8021xDomainSuffixMatchJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "domain-suffix-match", valueJSON, ktypeString)
}
func setSetting8021xEapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "eap", valueJSON, ktypeArrayString)
}
func setSetting8021xIdentityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "identity", valueJSON, ktypeString)
}
func setSetting8021xPacFileJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "pac-file", valueJSON, ktypeString)
}
func setSetting8021xPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "password", valueJSON, ktypeString)
}
func setSetting8021xPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "password-flags", valueJSON, ktypeUint32)
}
func setSetting8021xPasswordRawJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "password-raw", valueJSON, ktypeArrayByte)
}
func setSetting8021xPasswordRawFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "password-raw-flags", valueJSON, ktypeUint32)
}
func setSetting8021xPhase1FastProvisioningJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase1-fast-provisioning", valueJSON, ktypeString)
}
func setSetting8021xPhase1PeaplabelJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase1-peaplabel", valueJSON, ktypeString)
}
func setSetting8021xPhase1PeapverJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase1-peapver", valueJSON, ktypeString)
}
func setSetting8021xPhase2AltsubjectMatchesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-altsubject-matches", valueJSON, ktypeArrayString)
}
func setSetting8021xPhase2AuthJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-auth", valueJSON, ktypeString)
}
func setSetting8021xPhase2AutheapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-autheap", valueJSON, ktypeString)
}
func setSetting8021xPhase2CaCertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-ca-cert", valueJSON, ktypeWrapperString)
}
func setSetting8021xPhase2CaPathJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-ca-path", valueJSON, ktypeString)
}
func setSetting8021xPhase2ClientCertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-client-cert", valueJSON, ktypeWrapperString)
}
func setSetting8021xPhase2DomainSuffixMatchJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-domain-suffix-match", valueJSON, ktypeString)
}
func setSetting8021xPhase2PrivateKeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-private-key", valueJSON, ktypeWrapperString)
}
func setSetting8021xPhase2PrivateKeyPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-private-key-password", valueJSON, ktypeString)
}
func setSetting8021xPhase2PrivateKeyPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-private-key-password-flags", valueJSON, ktypeUint32)
}
func setSetting8021xPhase2SubjectMatchJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "phase2-subject-match", valueJSON, ktypeString)
}
func setSetting8021xPinJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "pin", valueJSON, ktypeString)
}
func setSetting8021xPinFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "pin-flags", valueJSON, ktypeUint32)
}
func setSetting8021xPrivateKeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "private-key", valueJSON, ktypeWrapperString)
}
func setSetting8021xPrivateKeyPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "private-key-password", valueJSON, ktypeString)
}
func setSetting8021xPrivateKeyPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "private-key-password-flags", valueJSON, ktypeUint32)
}
func setSetting8021xSubjectMatchJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "subject-match", valueJSON, ktypeString)
}
func setSetting8021xSystemCaCertsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-1x", "system-ca-certs", valueJSON, ktypeBoolean)
}
func setSettingAdslEncapsulationJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "adsl", "encapsulation", valueJSON, ktypeString)
}
func setSettingAdslPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "adsl", "password", valueJSON, ktypeString)
}
func setSettingAdslPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "adsl", "password-flags", valueJSON, ktypeUint32)
}
func setSettingAdslProtocolJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "adsl", "protocol", valueJSON, ktypeString)
}
func setSettingAdslUsernameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "adsl", "username", valueJSON, ktypeString)
}
func setSettingAdslVciJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "adsl", "vci", valueJSON, ktypeUint32)
}
func setSettingAdslVpiJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "adsl", "vpi", valueJSON, ktypeUint32)
}
func setSettingBluetoothBdaddrJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bluetooth", "bdaddr", valueJSON, ktypeArrayByte)
}
func setSettingBluetoothTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bluetooth", "type", valueJSON, ktypeString)
}
func setSettingBondOptionsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bond", "options", valueJSON, ktypeDictStringString)
}
func setSettingBridgeAgeingTimeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge", "ageing-time", valueJSON, ktypeUint32)
}
func setSettingBridgeForwardDelayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge", "forward-delay", valueJSON, ktypeUint32)
}
func setSettingBridgeHelloTimeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge", "hello-time", valueJSON, ktypeUint32)
}
func setSettingBridgeMacAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge", "mac-address", valueJSON, ktypeArrayByte)
}
func setSettingBridgeMaxAgeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge", "max-age", valueJSON, ktypeUint32)
}
func setSettingBridgeMulticastSnoopingJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge", "multicast-snooping", valueJSON, ktypeBoolean)
}
func setSettingBridgePriorityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge", "priority", valueJSON, ktypeUint32)
}
func setSettingBridgeStpJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge", "stp", valueJSON, ktypeBoolean)
}
func setSettingBridgePortHairpinModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge-port", "hairpin-mode", valueJSON, ktypeBoolean)
}
func setSettingBridgePortPathCostJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge-port", "path-cost", valueJSON, ktypeUint32)
}
func setSettingBridgePortPriorityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "bridge-port", "priority", valueJSON, ktypeUint32)
}
func setSettingCdmaNumberJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "cdma", "number", valueJSON, ktypeString)
}
func setSettingCdmaPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "cdma", "password", valueJSON, ktypeString)
}
func setSettingCdmaPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "cdma", "password-flags", valueJSON, ktypeUint32)
}
func setSettingCdmaUsernameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "cdma", "username", valueJSON, ktypeString)
}
func setSettingConnectionAutoconnectJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "autoconnect", valueJSON, ktypeBoolean)
}
func setSettingConnectionAutoconnectPriorityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "autoconnect-priority", valueJSON, ktypeInt32)
}
func setSettingConnectionAutoconnectSlavesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "autoconnect-slaves", valueJSON, ktypeInt32)
}
func setSettingConnectionGatewayPingTimeoutJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "gateway-ping-timeout", valueJSON, ktypeUint32)
}
func setSettingConnectionIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "id", valueJSON, ktypeString)
}
func setSettingConnectionInterfaceNameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "interface-name", valueJSON, ktypeString)
}
func setSettingConnectionLldpJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "lldp", valueJSON, ktypeInt32)
}
func setSettingConnectionMasterJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "master", valueJSON, ktypeString)
}
func setSettingConnectionMeteredJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "metered", valueJSON, ktypeInt32)
}
func setSettingConnectionPermissionsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "permissions", valueJSON, ktypeArrayString)
}
func setSettingConnectionReadOnlyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "read-only", valueJSON, ktypeBoolean)
}
func setSettingConnectionSecondariesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "secondaries", valueJSON, ktypeArrayString)
}
func setSettingConnectionSlaveTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "slave-type", valueJSON, ktypeString)
}
func setSettingConnectionStableIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "stable-id", valueJSON, ktypeString)
}
func setSettingConnectionTimestampJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "timestamp", valueJSON, ktypeUint64)
}
func setSettingConnectionTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "type", valueJSON, ktypeString)
}
func setSettingConnectionUuidJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "uuid", valueJSON, ktypeString)
}
func setSettingConnectionZoneJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "connection", "zone", valueJSON, ktypeString)
}
func setSettingDcbAppFcoeFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "app-fcoe-flags", valueJSON, ktypeUint32)
}
func setSettingDcbAppFcoeModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "app-fcoe-mode", valueJSON, ktypeString)
}
func setSettingDcbAppFcoePriorityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "app-fcoe-priority", valueJSON, ktypeInt32)
}
func setSettingDcbAppFipFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "app-fip-flags", valueJSON, ktypeUint32)
}
func setSettingDcbAppFipPriorityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "app-fip-priority", valueJSON, ktypeInt32)
}
func setSettingDcbAppIscsiFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "app-iscsi-flags", valueJSON, ktypeUint32)
}
func setSettingDcbAppIscsiPriorityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "app-iscsi-priority", valueJSON, ktypeInt32)
}
func setSettingDcbPriorityBandwidthJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "priority-bandwidth", valueJSON, ktypeArrayUint32)
}
func setSettingDcbPriorityFlowControlJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "priority-flow-control", valueJSON, ktypeArrayUint32)
}
func setSettingDcbPriorityFlowControlFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "priority-flow-control-flags", valueJSON, ktypeUint32)
}
func setSettingDcbPriorityGroupBandwidthJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "priority-group-bandwidth", valueJSON, ktypeArrayUint32)
}
func setSettingDcbPriorityGroupFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "priority-group-flags", valueJSON, ktypeUint32)
}
func setSettingDcbPriorityGroupIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "priority-group-id", valueJSON, ktypeArrayUint32)
}
func setSettingDcbPriorityStrictBandwidthJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "priority-strict-bandwidth", valueJSON, ktypeArrayUint32)
}
func setSettingDcbPriorityTrafficClassJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "dcb", "priority-traffic-class", valueJSON, ktypeArrayUint32)
}
func setSettingGsmApnJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "apn", valueJSON, ktypeString)
}
func setSettingGsmDeviceIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "device-id", valueJSON, ktypeString)
}
func setSettingGsmHomeOnlyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "home-only", valueJSON, ktypeBoolean)
}
func setSettingGsmNetworkIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "network-id", valueJSON, ktypeString)
}
func setSettingGsmNumberJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "number", valueJSON, ktypeString)
}
func setSettingGsmPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "password", valueJSON, ktypeString)
}
func setSettingGsmPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "password-flags", valueJSON, ktypeUint32)
}
func setSettingGsmPinJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "pin", valueJSON, ktypeString)
}
func setSettingGsmPinFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "pin-flags", valueJSON, ktypeUint32)
}
func setSettingGsmSimIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "sim-id", valueJSON, ktypeString)
}
func setSettingGsmSimOperatorIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "sim-operator-id", valueJSON, ktypeString)
}
func setSettingGsmUsernameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "gsm", "username", valueJSON, ktypeString)
}
func setSettingInfinibandMacAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "infiniband", "mac-address", valueJSON, ktypeArrayByte)
}
func setSettingInfinibandMtuJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "infiniband", "mtu", valueJSON, ktypeUint32)
}
func setSettingInfinibandPKeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "infiniband", "p-key", valueJSON, ktypeInt32)
}
func setSettingInfinibandParentJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "infiniband", "parent", valueJSON, ktypeString)
}
func setSettingInfinibandTransportModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "infiniband", "transport-mode", valueJSON, ktypeString)
}
func setSettingIP4ConfigAddressesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "addresses", valueJSON, ktypeWrapperIpv4Addresses)
}
func setSettingIP4ConfigDadTimeoutJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dad-timeout", valueJSON, ktypeInt32)
}
func setSettingIP4ConfigDhcpClientIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dhcp-client-id", valueJSON, ktypeString)
}
func setSettingIP4ConfigDhcpFqdnJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dhcp-fqdn", valueJSON, ktypeString)
}
func setSettingIP4ConfigDhcpHostnameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dhcp-hostname", valueJSON, ktypeString)
}
func setSettingIP4ConfigDhcpSendHostnameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dhcp-send-hostname", valueJSON, ktypeBoolean)
}
func setSettingIP4ConfigDhcpTimeoutJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dhcp-timeout", valueJSON, ktypeInt32)
}
func setSettingIP4ConfigDnsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dns", valueJSON, ktypeWrapperIpv4Dns)
}
func setSettingIP4ConfigDnsOptionsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dns-options", valueJSON, ktypeArrayString)
}
func setSettingIP4ConfigDnsPriorityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dns-priority", valueJSON, ktypeInt32)
}
func setSettingIP4ConfigDnsSearchJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "dns-search", valueJSON, ktypeArrayString)
}
func setSettingIP4ConfigGatewayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "gateway", valueJSON, ktypeString)
}
func setSettingIP4ConfigIgnoreAutoDnsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "ignore-auto-dns", valueJSON, ktypeBoolean)
}
func setSettingIP4ConfigIgnoreAutoRoutesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "ignore-auto-routes", valueJSON, ktypeBoolean)
}
func setSettingIP4ConfigMayFailJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "may-fail", valueJSON, ktypeBoolean)
}
func setSettingIP4ConfigMethodJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "method", valueJSON, ktypeString)
}
func setSettingIP4ConfigNeverDefaultJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "never-default", valueJSON, ktypeBoolean)
}
func setSettingIP4ConfigRouteMetricJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "route-metric", valueJSON, ktypeInt64)
}
func setSettingIP4ConfigRoutesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv4", "routes", valueJSON, ktypeWrapperIpv4Routes)
}
func setSettingIP6ConfigAddrGenModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "addr-gen-mode", valueJSON, ktypeInt32)
}
func setSettingIP6ConfigAddressesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "addresses", valueJSON, ktypeWrapperIpv6Addresses)
}
func setSettingIP6ConfigDadTimeoutJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "dad-timeout", valueJSON, ktypeInt32)
}
func setSettingIP6ConfigDhcpHostnameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "dhcp-hostname", valueJSON, ktypeString)
}
func setSettingIP6ConfigDhcpSendHostnameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "dhcp-send-hostname", valueJSON, ktypeBoolean)
}
func setSettingIP6ConfigDhcpTimeoutJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "dhcp-timeout", valueJSON, ktypeInt32)
}
func setSettingIP6ConfigDnsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "dns", valueJSON, ktypeWrapperIpv6Dns)
}
func setSettingIP6ConfigDnsOptionsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "dns-options", valueJSON, ktypeArrayString)
}
func setSettingIP6ConfigDnsPriorityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "dns-priority", valueJSON, ktypeInt32)
}
func setSettingIP6ConfigDnsSearchJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "dns-search", valueJSON, ktypeArrayString)
}
func setSettingIP6ConfigGatewayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "gateway", valueJSON, ktypeString)
}
func setSettingIP6ConfigIgnoreAutoDnsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "ignore-auto-dns", valueJSON, ktypeBoolean)
}
func setSettingIP6ConfigIgnoreAutoRoutesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "ignore-auto-routes", valueJSON, ktypeBoolean)
}
func setSettingIP6ConfigIp6PrivacyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "ip6-privacy", valueJSON, ktypeInt32)
}
func setSettingIP6ConfigMayFailJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "may-fail", valueJSON, ktypeBoolean)
}
func setSettingIP6ConfigMethodJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "method", valueJSON, ktypeString)
}
func setSettingIP6ConfigNeverDefaultJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "never-default", valueJSON, ktypeBoolean)
}
func setSettingIP6ConfigRouteMetricJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "route-metric", valueJSON, ktypeInt64)
}
func setSettingIP6ConfigRoutesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "routes", valueJSON, ktypeWrapperIpv6Routes)
}
func setSettingIP6ConfigTokenJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ipv6", "token", valueJSON, ktypeString)
}
func setSettingIPTunnelEncapsulationLimitJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "encapsulation-limit", valueJSON, ktypeUint32)
}
func setSettingIPTunnelFlowLabelJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "flow-label", valueJSON, ktypeUint32)
}
func setSettingIPTunnelInputKeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "input-key", valueJSON, ktypeString)
}
func setSettingIPTunnelLocalJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "local", valueJSON, ktypeString)
}
func setSettingIPTunnelModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "mode", valueJSON, ktypeUint32)
}
func setSettingIPTunnelMtuJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "mtu", valueJSON, ktypeUint32)
}
func setSettingIPTunnelOutputKeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "output-key", valueJSON, ktypeString)
}
func setSettingIPTunnelParentJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "parent", valueJSON, ktypeString)
}
func setSettingIPTunnelPathMtuDiscoveryJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "path-mtu-discovery", valueJSON, ktypeBoolean)
}
func setSettingIPTunnelRemoteJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "remote", valueJSON, ktypeString)
}
func setSettingIPTunnelTosJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "tos", valueJSON, ktypeUint32)
}
func setSettingIPTunnelTtlJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ip-tunnel", "ttl", valueJSON, ktypeUint32)
}
func setSettingMacvlanModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "macvlan", "mode", valueJSON, ktypeUint32)
}
func setSettingMacvlanParentJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "macvlan", "parent", valueJSON, ktypeString)
}
func setSettingMacvlanPromiscuousJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "macvlan", "promiscuous", valueJSON, ktypeBoolean)
}
func setSettingMacvlanTapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "macvlan", "tap", valueJSON, ktypeBoolean)
}
func setSettingOlpcMeshChannelJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-olpc-mesh", "channel", valueJSON, ktypeUint32)
}
func setSettingOlpcMeshDhcpAnycastAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-olpc-mesh", "dhcp-anycast-address", valueJSON, ktypeArrayByte)
}
func setSettingOlpcMeshSsidJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-olpc-mesh", "ssid", valueJSON, ktypeArrayByte)
}
func setSettingPppBaudJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "baud", valueJSON, ktypeUint32)
}
func setSettingPppCrtsctsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "crtscts", valueJSON, ktypeBoolean)
}
func setSettingPppLcpEchoFailureJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "lcp-echo-failure", valueJSON, ktypeUint32)
}
func setSettingPppLcpEchoIntervalJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "lcp-echo-interval", valueJSON, ktypeUint32)
}
func setSettingPppMppeStatefulJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "mppe-stateful", valueJSON, ktypeBoolean)
}
func setSettingPppMruJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "mru", valueJSON, ktypeUint32)
}
func setSettingPppMtuJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "mtu", valueJSON, ktypeUint32)
}
func setSettingPppNoVjCompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "no-vj-comp", valueJSON, ktypeBoolean)
}
func setSettingPppNoauthJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "noauth", valueJSON, ktypeBoolean)
}
func setSettingPppNobsdcompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "nobsdcomp", valueJSON, ktypeBoolean)
}
func setSettingPppNodeflateJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "nodeflate", valueJSON, ktypeBoolean)
}
func setSettingPppRefuseChapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "refuse-chap", valueJSON, ktypeBoolean)
}
func setSettingPppRefuseEapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "refuse-eap", valueJSON, ktypeBoolean)
}
func setSettingPppRefuseMschapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "refuse-mschap", valueJSON, ktypeBoolean)
}
func setSettingPppRefuseMschapv2JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "refuse-mschapv2", valueJSON, ktypeBoolean)
}
func setSettingPppRefusePapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "refuse-pap", valueJSON, ktypeBoolean)
}
func setSettingPppRequireMppeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "require-mppe", valueJSON, ktypeBoolean)
}
func setSettingPppRequireMppe128JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "ppp", "require-mppe-128", valueJSON, ktypeBoolean)
}
func setSettingPppoePasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "pppoe", "password", valueJSON, ktypeString)
}
func setSettingPppoePasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "pppoe", "password-flags", valueJSON, ktypeUint32)
}
func setSettingPppoeServiceJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "pppoe", "service", valueJSON, ktypeString)
}
func setSettingPppoeUsernameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "pppoe", "username", valueJSON, ktypeString)
}
func setSettingSerialBaudJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "serial", "baud", valueJSON, ktypeUint32)
}
func setSettingSerialBitsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "serial", "bits", valueJSON, ktypeUint32)
}
func setSettingSerialParityJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "serial", "parity", valueJSON, ktypeByte)
}
func setSettingSerialSendDelayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "serial", "send-delay", valueJSON, ktypeUint64)
}
func setSettingSerialStopbitsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "serial", "stopbits", valueJSON, ktypeUint32)
}
func setSettingTeamConfigJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "team", "config", valueJSON, ktypeString)
}
func setSettingTeamPortConfigJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "team-port", "config", valueJSON, ktypeString)
}
func setSettingTunGroupJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "tun", "group", valueJSON, ktypeString)
}
func setSettingTunModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "tun", "mode", valueJSON, ktypeUint32)
}
func setSettingTunMultiQueueJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "tun", "multi-queue", valueJSON, ktypeBoolean)
}
func setSettingTunOwnerJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "tun", "owner", valueJSON, ktypeString)
}
func setSettingTunPiJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "tun", "pi", valueJSON, ktypeBoolean)
}
func setSettingTunVnetHdrJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "tun", "vnet-hdr", valueJSON, ktypeBoolean)
}
func setSettingVlanEgressPriorityMapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vlan", "egress-priority-map", valueJSON, ktypeArrayString)
}
func setSettingVlanFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vlan", "flags", valueJSON, ktypeUint32)
}
func setSettingVlanIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vlan", "id", valueJSON, ktypeUint32)
}
func setSettingVlanIngressPriorityMapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vlan", "ingress-priority-map", valueJSON, ktypeArrayString)
}
func setSettingVlanParentJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vlan", "parent", valueJSON, ktypeString)
}
func setSettingVpnDataJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vpn", "data", valueJSON, ktypeDictStringString)
}
func setSettingVpnPersistentJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vpn", "persistent", valueJSON, ktypeBoolean)
}
func setSettingVpnSecretsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vpn", "secrets", valueJSON, ktypeDictStringString)
}
func setSettingVpnServiceTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vpn", "service-type", valueJSON, ktypeString)
}
func setSettingVpnTimeoutJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vpn", "timeout", valueJSON, ktypeUint32)
}
func setSettingVpnUserNameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vpn", "user-name", valueJSON, ktypeString)
}
func setSettingVxlanAgeingJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "ageing", valueJSON, ktypeUint32)
}
func setSettingVxlanDestinationPortJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "destination-port", valueJSON, ktypeUint32)
}
func setSettingVxlanIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "id", valueJSON, ktypeUint32)
}
func setSettingVxlanL2MissJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "l2-miss", valueJSON, ktypeBoolean)
}
func setSettingVxlanL3MissJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "l3-miss", valueJSON, ktypeBoolean)
}
func setSettingVxlanLearningJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "learning", valueJSON, ktypeBoolean)
}
func setSettingVxlanLimitJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "limit", valueJSON, ktypeUint32)
}
func setSettingVxlanLocalJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "local", valueJSON, ktypeString)
}
func setSettingVxlanParentJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "parent", valueJSON, ktypeString)
}
func setSettingVxlanProxyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "proxy", valueJSON, ktypeBoolean)
}
func setSettingVxlanRemoteJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "remote", valueJSON, ktypeString)
}
func setSettingVxlanRscJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "rsc", valueJSON, ktypeBoolean)
}
func setSettingVxlanSourcePortMaxJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "source-port-max", valueJSON, ktypeUint32)
}
func setSettingVxlanSourcePortMinJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "source-port-min", valueJSON, ktypeUint32)
}
func setSettingVxlanTosJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "tos", valueJSON, ktypeUint32)
}
func setSettingVxlanTtlJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "vxlan", "ttl", valueJSON, ktypeUint32)
}
func setSettingWimaxMacAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "wimax", "mac-address", valueJSON, ktypeArrayByte)
}
func setSettingWimaxNetworkNameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "wimax", "network-name", valueJSON, ktypeString)
}
func setSettingWiredAutoNegotiateJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "auto-negotiate", valueJSON, ktypeBoolean)
}
func setSettingWiredClonedMacAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "cloned-mac-address", valueJSON, ktypeWrapperMacAddress)
}
func setSettingWiredDuplexJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "duplex", valueJSON, ktypeString)
}
func setSettingWiredGenerateMacAddressMaskJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "generate-mac-address-mask", valueJSON, ktypeString)
}
func setSettingWiredMacAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "mac-address", valueJSON, ktypeWrapperMacAddress)
}
func setSettingWiredMacAddressBlacklistJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "mac-address-blacklist", valueJSON, ktypeArrayString)
}
func setSettingWiredMtuJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "mtu", valueJSON, ktypeUint32)
}
func setSettingWiredPortJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "port", valueJSON, ktypeString)
}
func setSettingWiredS390NettypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "s390-nettype", valueJSON, ktypeString)
}
func setSettingWiredS390OptionsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "s390-options", valueJSON, ktypeDictStringString)
}
func setSettingWiredS390SubchannelsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "s390-subchannels", valueJSON, ktypeArrayString)
}
func setSettingWiredSpeedJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "speed", valueJSON, ktypeUint32)
}
func setSettingWiredWakeOnLanJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "wake-on-lan", valueJSON, ktypeUint32)
}
func setSettingWiredWakeOnLanPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-3-ethernet", "wake-on-lan-password", valueJSON, ktypeString)
}
func setSettingWirelessBandJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "band", valueJSON, ktypeString)
}
func setSettingWirelessBssidJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "bssid", valueJSON, ktypeWrapperString)
}
func setSettingWirelessChannelJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "channel", valueJSON, ktypeUint32)
}
func setSettingWirelessClonedMacAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "cloned-mac-address", valueJSON, ktypeWrapperMacAddress)
}
func setSettingWirelessGenerateMacAddressMaskJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "generate-mac-address-mask", valueJSON, ktypeString)
}
func setSettingWirelessHiddenJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "hidden", valueJSON, ktypeBoolean)
}
func setSettingWirelessMacAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "mac-address", valueJSON, ktypeWrapperMacAddress)
}
func setSettingWirelessMacAddressBlacklistJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "mac-address-blacklist", valueJSON, ktypeArrayString)
}
func setSettingWirelessMacAddressRandomizationJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "mac-address-randomization", valueJSON, ktypeUint32)
}
func setSettingWirelessModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "mode", valueJSON, ktypeString)
}
func setSettingWirelessMtuJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "mtu", valueJSON, ktypeUint32)
}
func setSettingWirelessPowersaveJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "powersave", valueJSON, ktypeUint32)
}
func setSettingWirelessRateJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "rate", valueJSON, ktypeUint32)
}
func setSettingWirelessSeenBssidsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "seen-bssids", valueJSON, ktypeArrayString)
}
func setSettingWirelessSsidJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "ssid", valueJSON, ktypeWrapperString)
}
func setSettingWirelessTxPowerJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless", "tx-power", valueJSON, ktypeUint32)
}
func setSettingWirelessSecurityAuthAlgJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "auth-alg", valueJSON, ktypeString)
}
func setSettingWirelessSecurityGroupJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "group", valueJSON, ktypeArrayString)
}
func setSettingWirelessSecurityKeyMgmtJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "key-mgmt", valueJSON, ktypeString)
}
func setSettingWirelessSecurityLeapPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "leap-password", valueJSON, ktypeString)
}
func setSettingWirelessSecurityLeapPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "leap-password-flags", valueJSON, ktypeUint32)
}
func setSettingWirelessSecurityLeapUsernameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "leap-username", valueJSON, ktypeString)
}
func setSettingWirelessSecurityPairwiseJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "pairwise", valueJSON, ktypeArrayString)
}
func setSettingWirelessSecurityProtoJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "proto", valueJSON, ktypeArrayString)
}
func setSettingWirelessSecurityPskJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "psk", valueJSON, ktypeString)
}
func setSettingWirelessSecurityPskFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "psk-flags", valueJSON, ktypeUint32)
}
func setSettingWirelessSecurityWepKeyFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "wep-key-flags", valueJSON, ktypeUint32)
}
func setSettingWirelessSecurityWepKeyTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "wep-key-type", valueJSON, ktypeUint32)
}
func setSettingWirelessSecurityWepKey0JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "wep-key0", valueJSON, ktypeString)
}
func setSettingWirelessSecurityWepKey1JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "wep-key1", valueJSON, ktypeString)
}
func setSettingWirelessSecurityWepKey2JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "wep-key2", valueJSON, ktypeString)
}
func setSettingWirelessSecurityWepKey3JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "wep-key3", valueJSON, ktypeString)
}
func setSettingWirelessSecurityWepTxKeyidxJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "802-11-wireless-security", "wep-tx-keyidx", valueJSON, ktypeUint32)
}
func setSettingVpnL2tpKeyGatewayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp", "gateway", valueJSON, ktypeString)
}
func setSettingVpnL2tpKeyUserJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp", "user", valueJSON, ktypeString)
}
func setSettingVpnL2tpKeyPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp", "password-flags", valueJSON, ktypeUint32)
}
func setSettingVpnL2tpKeyPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp", "password", valueJSON, ktypeString)
}
func setSettingVpnL2tpKeyDomainJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp", "domain", valueJSON, ktypeString)
}
func setSettingVpnL2tpKeyRequireMppeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "require-mppe", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyRequireMppe40JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "require-mppe-40", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyRequireMppe128JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "require-mppe-128", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyMppeStatefulJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "mppe-stateful", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyRefuseEapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-eap", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyRefusePapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-pap", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyRefuseChapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-chap", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyRefuseMschapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-mschap", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyRefuseMschapv2JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyNobsdcompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "nobsdcomp", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyNodeflateJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "nodeflate", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyNoVjCompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "no-vj-comp", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyNoPcompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "nopcomp", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyNoAccompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "noaccomp", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyLcpEchoFailureJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure", valueJSON, ktypeUint32)
}
func setSettingVpnL2tpKeyLcpEchoIntervalJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval", valueJSON, ktypeUint32)
}
func setSettingVpnL2tpKeyIpsecEnableJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled", valueJSON, ktypeBoolean)
}
func setSettingVpnL2tpKeyIpsecGroupNameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name", valueJSON, ktypeString)
}
func setSettingVpnL2tpKeyIpsecGatewayIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id", valueJSON, ktypeString)
}
func setSettingVpnL2tpKeyIpsecPskJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-l2tp-ipsec", "ipsec-psk", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyGatewayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "gateway", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyCacertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "cacert", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyProxyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "proxy", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyCsdEnableJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "enable_csd_trojan", valueJSON, ktypeBoolean)
}
func setSettingVpnOpenconnectKeyCsdWrapperJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "csd_wrapper", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyUsercertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "usercert", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyPrivkeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "userkey", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyPemPassphraseFsidJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "pem_passphrase_fsid", valueJSON, ktypeBoolean)
}
func setSettingVpnOpenconnectKeyCookieJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "cookie", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyGwcertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "gwcert", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyAuthtypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "authtype", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyMtuJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "mtu", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyStokenSourceJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "stoken_source", valueJSON, ktypeString)
}
func setSettingVpnOpenconnectKeyStokenStringJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openconnect", "stoken_string", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyRemoteJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "remote", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyConnectionTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "connection-type", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyUsernameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "username", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "password-flags", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "password", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyCaJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "ca", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyCertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "cert", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyKeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "key", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyCertpassFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "cert-pass-flags", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyCertpassJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "cert-pass", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyStaticKeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "static-key", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyStaticKeyDirectionJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "static-key-direction", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyRemoteIpJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "remote-ip", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyLocalIpJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn", "local-ip", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyPortJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "port", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyRenegSecondsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "reneg-seconds", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyCompLzoJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "comp-lzo", valueJSON, ktypeBoolean)
}
func setSettingVpnOpenvpnKeyProtoTcpJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "proto-tcp", valueJSON, ktypeBoolean)
}
func setSettingVpnOpenvpnKeyTapDevJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "tap-dev", valueJSON, ktypeBoolean)
}
func setSettingVpnOpenvpnKeyTunnelMtuJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "tunnel-mtu", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyFragmentSizeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "fragment-size", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyMssfixJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "mssfix", valueJSON, ktypeBoolean)
}
func setSettingVpnOpenvpnKeyRemoteRandomJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-advanced", "remote-random", valueJSON, ktypeBoolean)
}
func setSettingVpnOpenvpnKeyCipherJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-security", "cipher", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyAuthJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-security", "auth", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyTlsRemoteJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-tlsauth", "tls-remote", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyRemoteCertTlsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyTaJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-tlsauth", "ta", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyTaDirJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-tlsauth", "ta-dir", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyProxyTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "proxy-type", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyProxyServerJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "proxy-server", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyProxyPortJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "proxy-port", valueJSON, ktypeUint32)
}
func setSettingVpnOpenvpnKeyProxyRetryJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "proxy-retry", valueJSON, ktypeBoolean)
}
func setSettingVpnOpenvpnKeyHttpProxyUsernameJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "http-proxy-username", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyHttpProxyPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "http-proxy-password", valueJSON, ktypeString)
}
func setSettingVpnOpenvpnKeyHttpProxyPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags", valueJSON, ktypeUint32)
}
func setSettingVpnPptpKeyGatewayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp", "gateway", valueJSON, ktypeString)
}
func setSettingVpnPptpKeyUserJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp", "user", valueJSON, ktypeString)
}
func setSettingVpnPptpKeyPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp", "password-flags", valueJSON, ktypeUint32)
}
func setSettingVpnPptpKeyPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp", "password", valueJSON, ktypeString)
}
func setSettingVpnPptpKeyDomainJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp", "domain", valueJSON, ktypeString)
}
func setSettingVpnPptpKeyRequireMppeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "require-mppe", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyRequireMppe40JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "require-mppe-40", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyRequireMppe128JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "require-mppe-128", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyMppeStatefulJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "mppe-stateful", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyRefuseEapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-eap", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyRefusePapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-pap", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyRefuseChapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-chap", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyRefuseMschapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-mschap", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyRefuseMschapv2JSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "refuse-mschapv2", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyNobsdcompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "nobsdcomp", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyNodeflateJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "nodeflate", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyNoVjCompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "no-vj-comp", valueJSON, ktypeBoolean)
}
func setSettingVpnPptpKeyLcpEchoFailureJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "lcp-echo-failure", valueJSON, ktypeUint32)
}
func setSettingVpnPptpKeyLcpEchoIntervalJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-pptp-ppp", "lcp-echo-interval", valueJSON, ktypeUint32)
}
func setSettingVpnStrongswanKeyAddressJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "address", valueJSON, ktypeString)
}
func setSettingVpnStrongswanKeyCertificateJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "certificate", valueJSON, ktypeString)
}
func setSettingVpnStrongswanKeyMethodJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "method", valueJSON, ktypeString)
}
func setSettingVpnStrongswanKeyUserJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "user", valueJSON, ktypeString)
}
func setSettingVpnStrongswanKeyUsercertJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "usercert", valueJSON, ktypeString)
}
func setSettingVpnStrongswanKeyUserkeyJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "userkey", valueJSON, ktypeString)
}
func setSettingVpnStrongswanKeyPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "password", valueJSON, ktypeString)
}
func setSettingVpnStrongswanKeyPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "password-flags", valueJSON, ktypeUint32)
}
func setSettingVpnStrongswanKeyVirtualJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "virtual", valueJSON, ktypeBoolean)
}
func setSettingVpnStrongswanKeyEncapJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "encap", valueJSON, ktypeBoolean)
}
func setSettingVpnStrongswanKeyIpcompJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-strongswan", "ipcomp", valueJSON, ktypeBoolean)
}
func setSettingVpnVpncKeyGatewayJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "IPSec gateway", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyXauthUserJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "Xauth username", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyXauthPasswordTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "xauth-password-type", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyXauthPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "Xauth password-flags", valueJSON, ktypeUint32)
}
func setSettingVpnVpncKeyXauthPasswordJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "Xauth password", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyIdJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "IPSec ID", valueJSON, ktypeString)
}
func setSettingVpnVpncKeySecretTypeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "ipsec-secret-type", valueJSON, ktypeString)
}
func setSettingVpnVpncKeySecretFlagsJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "IPSec secret-flags", valueJSON, ktypeUint32)
}
func setSettingVpnVpncKeySecretJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "IPSec secret", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyAuthmodeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "IKE Authmode", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyCaFileJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc", "CA-File", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyDomainJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Domain", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyVendorJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Vendor", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyAppVersionJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Application Version", valueJSON, ktypeString)
}
func setSettingVpnVpncKeySingleDesJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Enable Single DES", valueJSON, ktypeBoolean)
}
func setSettingVpnVpncKeyNoEncryptionJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Enable no encryption", valueJSON, ktypeBoolean)
}
func setSettingVpnVpncKeyNatTraversalModeJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyDhgroupJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "IKE DH Group", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyPerfectForwardJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy", valueJSON, ktypeString)
}
func setSettingVpnVpncKeyLocalPortJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Local Port", valueJSON, ktypeUint32)
}
func setSettingVpnVpncKeyDpdIdleTimeoutJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)", valueJSON, ktypeUint32)
}
func setSettingVpnVpncKeyCiscoUdpEncapsPortJSON(data connectionData, valueJSON string) (err error) {
	return setSettingKeyJSON(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port", valueJSON, ktypeUint32)
}

// JSON logical setter
func logicSetSetting8021xEapJSON(data connectionData, valueJSON string) (err error) {
	err = setSetting8021xEapJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSetting8021xEapExists(data) {
		value := getSetting8021xEap(data)
		err = logicSetSetting8021xEap(data, value)
	}
	return
}
func logicSetSettingIP4ConfigMethodJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingIP4ConfigMethodJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingIP4ConfigMethodExists(data) {
		value := getSettingIP4ConfigMethod(data)
		err = logicSetSettingIP4ConfigMethod(data, value)
	}
	return
}
func logicSetSettingIP6ConfigMethodJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingIP6ConfigMethodJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingIP6ConfigMethodExists(data) {
		value := getSettingIP6ConfigMethod(data)
		err = logicSetSettingIP6ConfigMethod(data, value)
	}
	return
}
func logicSetSettingPppRequireMppeJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingPppRequireMppeJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingPppRequireMppeExists(data) {
		value := getSettingPppRequireMppe(data)
		err = logicSetSettingPppRequireMppe(data, value)
	}
	return
}
func logicSetSettingWirelessBandJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingWirelessBandJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingWirelessBandExists(data) {
		value := getSettingWirelessBand(data)
		err = logicSetSettingWirelessBand(data, value)
	}
	return
}
func logicSetSettingWirelessModeJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingWirelessModeJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingWirelessModeExists(data) {
		value := getSettingWirelessMode(data)
		err = logicSetSettingWirelessMode(data, value)
	}
	return
}
func logicSetSettingVpnL2tpKeyIpsecEnableJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnL2tpKeyIpsecEnableJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnL2tpKeyIpsecEnableExists(data) {
		value := getSettingVpnL2tpKeyIpsecEnable(data)
		err = logicSetSettingVpnL2tpKeyIpsecEnable(data, value)
	}
	return
}
func logicSetSettingVpnOpenvpnKeyConnectionTypeJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnOpenvpnKeyConnectionTypeJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnOpenvpnKeyConnectionTypeExists(data) {
		value := getSettingVpnOpenvpnKeyConnectionType(data)
		err = logicSetSettingVpnOpenvpnKeyConnectionType(data, value)
	}
	return
}
func logicSetSettingVpnOpenvpnKeyCaJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnOpenvpnKeyCaJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnOpenvpnKeyCaExists(data) {
		value := getSettingVpnOpenvpnKeyCa(data)
		err = logicSetSettingVpnOpenvpnKeyCa(data, value)
	}
	return
}
func logicSetSettingVpnOpenvpnKeyCertJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnOpenvpnKeyCertJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnOpenvpnKeyCertExists(data) {
		value := getSettingVpnOpenvpnKeyCert(data)
		err = logicSetSettingVpnOpenvpnKeyCert(data, value)
	}
	return
}
func logicSetSettingVpnOpenvpnKeyKeyJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnOpenvpnKeyKeyJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnOpenvpnKeyKeyExists(data) {
		value := getSettingVpnOpenvpnKeyKey(data)
		err = logicSetSettingVpnOpenvpnKeyKey(data, value)
	}
	return
}
func logicSetSettingVpnOpenvpnKeyStaticKeyJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnOpenvpnKeyStaticKeyJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnOpenvpnKeyStaticKeyExists(data) {
		value := getSettingVpnOpenvpnKeyStaticKey(data)
		err = logicSetSettingVpnOpenvpnKeyStaticKey(data, value)
	}
	return
}
func logicSetSettingVpnOpenvpnKeyProxyTypeJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnOpenvpnKeyProxyTypeJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnOpenvpnKeyProxyTypeExists(data) {
		value := getSettingVpnOpenvpnKeyProxyType(data)
		err = logicSetSettingVpnOpenvpnKeyProxyType(data, value)
	}
	return
}
func logicSetSettingVpnStrongswanKeyCertificateJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnStrongswanKeyCertificateJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnStrongswanKeyCertificateExists(data) {
		value := getSettingVpnStrongswanKeyCertificate(data)
		err = logicSetSettingVpnStrongswanKeyCertificate(data, value)
	}
	return
}
func logicSetSettingVpnStrongswanKeyMethodJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnStrongswanKeyMethodJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnStrongswanKeyMethodExists(data) {
		value := getSettingVpnStrongswanKeyMethod(data)
		err = logicSetSettingVpnStrongswanKeyMethod(data, value)
	}
	return
}
func logicSetSettingVpnStrongswanKeyUsercertJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnStrongswanKeyUsercertJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnStrongswanKeyUsercertExists(data) {
		value := getSettingVpnStrongswanKeyUsercert(data)
		err = logicSetSettingVpnStrongswanKeyUsercert(data, value)
	}
	return
}
func logicSetSettingVpnStrongswanKeyUserkeyJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnStrongswanKeyUserkeyJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnStrongswanKeyUserkeyExists(data) {
		value := getSettingVpnStrongswanKeyUserkey(data)
		err = logicSetSettingVpnStrongswanKeyUserkey(data, value)
	}
	return
}
func logicSetSettingVpnVpncKeyXauthPasswordFlagsJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnVpncKeyXauthPasswordFlagsJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnVpncKeyXauthPasswordFlagsExists(data) {
		value := getSettingVpnVpncKeyXauthPasswordFlags(data)
		err = logicSetSettingVpnVpncKeyXauthPasswordFlags(data, value)
	}
	return
}
func logicSetSettingVpnVpncKeySecretFlagsJSON(data connectionData, valueJSON string) (err error) {
	err = setSettingVpnVpncKeySecretFlagsJSON(data, valueJSON)
	if err != nil {
		return
	}
	if isSettingVpnVpncKeySecretFlagsExists(data) {
		value := getSettingVpnVpncKeySecretFlags(data)
		err = logicSetSettingVpnVpncKeySecretFlags(data, value)
	}
	return
}

// Remover
func removeSetting8021xAltsubjectMatches(data connectionData) {
	removeSettingKey(data, "802-1x", "altsubject-matches")
}
func removeSetting8021xAnonymousIdentity(data connectionData) {
	removeSettingKey(data, "802-1x", "anonymous-identity")
}
func removeSetting8021xCaCert(data connectionData) {
	removeSettingKey(data, "802-1x", "ca-cert")
}
func removeSetting8021xCaPath(data connectionData) {
	removeSettingKey(data, "802-1x", "ca-path")
}
func removeSetting8021xClientCert(data connectionData) {
	removeSettingKey(data, "802-1x", "client-cert")
}
func removeSetting8021xDomainSuffixMatch(data connectionData) {
	removeSettingKey(data, "802-1x", "domain-suffix-match")
}
func removeSetting8021xEap(data connectionData) {
	removeSettingKey(data, "802-1x", "eap")
}
func removeSetting8021xIdentity(data connectionData) {
	removeSettingKey(data, "802-1x", "identity")
}
func removeSetting8021xPacFile(data connectionData) {
	removeSettingKey(data, "802-1x", "pac-file")
}
func removeSetting8021xPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "password")
}
func removeSetting8021xPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "password-flags")
}
func removeSetting8021xPasswordRaw(data connectionData) {
	removeSettingKey(data, "802-1x", "password-raw")
}
func removeSetting8021xPasswordRawFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "password-raw-flags")
}
func removeSetting8021xPhase1FastProvisioning(data connectionData) {
	removeSettingKey(data, "802-1x", "phase1-fast-provisioning")
}
func removeSetting8021xPhase1Peaplabel(data connectionData) {
	removeSettingKey(data, "802-1x", "phase1-peaplabel")
}
func removeSetting8021xPhase1Peapver(data connectionData) {
	removeSettingKey(data, "802-1x", "phase1-peapver")
}
func removeSetting8021xPhase2AltsubjectMatches(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-altsubject-matches")
}
func removeSetting8021xPhase2Auth(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-auth")
}
func removeSetting8021xPhase2Autheap(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-autheap")
}
func removeSetting8021xPhase2CaCert(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-ca-cert")
}
func removeSetting8021xPhase2CaPath(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-ca-path")
}
func removeSetting8021xPhase2ClientCert(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-client-cert")
}
func removeSetting8021xPhase2DomainSuffixMatch(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-domain-suffix-match")
}
func removeSetting8021xPhase2PrivateKey(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-private-key")
}
func removeSetting8021xPhase2PrivateKeyPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-private-key-password")
}
func removeSetting8021xPhase2PrivateKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-private-key-password-flags")
}
func removeSetting8021xPhase2SubjectMatch(data connectionData) {
	removeSettingKey(data, "802-1x", "phase2-subject-match")
}
func removeSetting8021xPin(data connectionData) {
	removeSettingKey(data, "802-1x", "pin")
}
func removeSetting8021xPinFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "pin-flags")
}
func removeSetting8021xPrivateKey(data connectionData) {
	removeSettingKey(data, "802-1x", "private-key")
}
func removeSetting8021xPrivateKeyPassword(data connectionData) {
	removeSettingKey(data, "802-1x", "private-key-password")
}
func removeSetting8021xPrivateKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-1x", "private-key-password-flags")
}
func removeSetting8021xSubjectMatch(data connectionData) {
	removeSettingKey(data, "802-1x", "subject-match")
}
func removeSetting8021xSystemCaCerts(data connectionData) {
	removeSettingKey(data, "802-1x", "system-ca-certs")
}
func removeSettingAdslEncapsulation(data connectionData) {
	removeSettingKey(data, "adsl", "encapsulation")
}
func removeSettingAdslPassword(data connectionData) {
	removeSettingKey(data, "adsl", "password")
}
func removeSettingAdslPasswordFlags(data connectionData) {
	removeSettingKey(data, "adsl", "password-flags")
}
func removeSettingAdslProtocol(data connectionData) {
	removeSettingKey(data, "adsl", "protocol")
}
func removeSettingAdslUsername(data connectionData) {
	removeSettingKey(data, "adsl", "username")
}
func removeSettingAdslVci(data connectionData) {
	removeSettingKey(data, "adsl", "vci")
}
func removeSettingAdslVpi(data connectionData) {
	removeSettingKey(data, "adsl", "vpi")
}
func removeSettingBluetoothBdaddr(data connectionData) {
	removeSettingKey(data, "bluetooth", "bdaddr")
}
func removeSettingBluetoothType(data connectionData) {
	removeSettingKey(data, "bluetooth", "type")
}
func removeSettingBondOptions(data connectionData) {
	removeSettingKey(data, "bond", "options")
}
func removeSettingBridgeAgeingTime(data connectionData) {
	removeSettingKey(data, "bridge", "ageing-time")
}
func removeSettingBridgeForwardDelay(data connectionData) {
	removeSettingKey(data, "bridge", "forward-delay")
}
func removeSettingBridgeHelloTime(data connectionData) {
	removeSettingKey(data, "bridge", "hello-time")
}
func removeSettingBridgeMacAddress(data connectionData) {
	removeSettingKey(data, "bridge", "mac-address")
}
func removeSettingBridgeMaxAge(data connectionData) {
	removeSettingKey(data, "bridge", "max-age")
}
func removeSettingBridgeMulticastSnooping(data connectionData) {
	removeSettingKey(data, "bridge", "multicast-snooping")
}
func removeSettingBridgePriority(data connectionData) {
	removeSettingKey(data, "bridge", "priority")
}
func removeSettingBridgeStp(data connectionData) {
	removeSettingKey(data, "bridge", "stp")
}
func removeSettingBridgePortHairpinMode(data connectionData) {
	removeSettingKey(data, "bridge-port", "hairpin-mode")
}
func removeSettingBridgePortPathCost(data connectionData) {
	removeSettingKey(data, "bridge-port", "path-cost")
}
func removeSettingBridgePortPriority(data connectionData) {
	removeSettingKey(data, "bridge-port", "priority")
}
func removeSettingCdmaNumber(data connectionData) {
	removeSettingKey(data, "cdma", "number")
}
func removeSettingCdmaPassword(data connectionData) {
	removeSettingKey(data, "cdma", "password")
}
func removeSettingCdmaPasswordFlags(data connectionData) {
	removeSettingKey(data, "cdma", "password-flags")
}
func removeSettingCdmaUsername(data connectionData) {
	removeSettingKey(data, "cdma", "username")
}
func removeSettingConnectionAutoconnect(data connectionData) {
	removeSettingKey(data, "connection", "autoconnect")
}
func removeSettingConnectionAutoconnectPriority(data connectionData) {
	removeSettingKey(data, "connection", "autoconnect-priority")
}
func removeSettingConnectionAutoconnectSlaves(data connectionData) {
	removeSettingKey(data, "connection", "autoconnect-slaves")
}
func removeSettingConnectionGatewayPingTimeout(data connectionData) {
	removeSettingKey(data, "connection", "gateway-ping-timeout")
}
func removeSettingConnectionId(data connectionData) {
	removeSettingKey(data, "connection", "id")
}
func removeSettingConnectionInterfaceName(data connectionData) {
	removeSettingKey(data, "connection", "interface-name")
}
func removeSettingConnectionLldp(data connectionData) {
	removeSettingKey(data, "connection", "lldp")
}
func removeSettingConnectionMaster(data connectionData) {
	removeSettingKey(data, "connection", "master")
}
func removeSettingConnectionMetered(data connectionData) {
	removeSettingKey(data, "connection", "metered")
}
func removeSettingConnectionPermissions(data connectionData) {
	removeSettingKey(data, "connection", "permissions")
}
func removeSettingConnectionReadOnly(data connectionData) {
	removeSettingKey(data, "connection", "read-only")
}
func removeSettingConnectionSecondaries(data connectionData) {
	removeSettingKey(data, "connection", "secondaries")
}
func removeSettingConnectionSlaveType(data connectionData) {
	removeSettingKey(data, "connection", "slave-type")
}
func removeSettingConnectionStableId(data connectionData) {
	removeSettingKey(data, "connection", "stable-id")
}
func removeSettingConnectionTimestamp(data connectionData) {
	removeSettingKey(data, "connection", "timestamp")
}
func removeSettingConnectionType(data connectionData) {
	removeSettingKey(data, "connection", "type")
}
func removeSettingConnectionUuid(data connectionData) {
	removeSettingKey(data, "connection", "uuid")
}
func removeSettingConnectionZone(data connectionData) {
	removeSettingKey(data, "connection", "zone")
}
func removeSettingDcbAppFcoeFlags(data connectionData) {
	removeSettingKey(data, "dcb", "app-fcoe-flags")
}
func removeSettingDcbAppFcoeMode(data connectionData) {
	removeSettingKey(data, "dcb", "app-fcoe-mode")
}
func removeSettingDcbAppFcoePriority(data connectionData) {
	removeSettingKey(data, "dcb", "app-fcoe-priority")
}
func removeSettingDcbAppFipFlags(data connectionData) {
	removeSettingKey(data, "dcb", "app-fip-flags")
}
func removeSettingDcbAppFipPriority(data connectionData) {
	removeSettingKey(data, "dcb", "app-fip-priority")
}
func removeSettingDcbAppIscsiFlags(data connectionData) {
	removeSettingKey(data, "dcb", "app-iscsi-flags")
}
func removeSettingDcbAppIscsiPriority(data connectionData) {
	removeSettingKey(data, "dcb", "app-iscsi-priority")
}
func removeSettingDcbPriorityBandwidth(data connectionData) {
	removeSettingKey(data, "dcb", "priority-bandwidth")
}
func removeSettingDcbPriorityFlowControl(data connectionData) {
	removeSettingKey(data, "dcb", "priority-flow-control")
}
func removeSettingDcbPriorityFlowControlFlags(data connectionData) {
	removeSettingKey(data, "dcb", "priority-flow-control-flags")
}
func removeSettingDcbPriorityGroupBandwidth(data connectionData) {
	removeSettingKey(data, "dcb", "priority-group-bandwidth")
}
func removeSettingDcbPriorityGroupFlags(data connectionData) {
	removeSettingKey(data, "dcb", "priority-group-flags")
}
func removeSettingDcbPriorityGroupId(data connectionData) {
	removeSettingKey(data, "dcb", "priority-group-id")
}
func removeSettingDcbPriorityStrictBandwidth(data connectionData) {
	removeSettingKey(data, "dcb", "priority-strict-bandwidth")
}
func removeSettingDcbPriorityTrafficClass(data connectionData) {
	removeSettingKey(data, "dcb", "priority-traffic-class")
}
func removeSettingGsmApn(data connectionData) {
	removeSettingKey(data, "gsm", "apn")
}
func removeSettingGsmDeviceId(data connectionData) {
	removeSettingKey(data, "gsm", "device-id")
}
func removeSettingGsmHomeOnly(data connectionData) {
	removeSettingKey(data, "gsm", "home-only")
}
func removeSettingGsmNetworkId(data connectionData) {
	removeSettingKey(data, "gsm", "network-id")
}
func removeSettingGsmNumber(data connectionData) {
	removeSettingKey(data, "gsm", "number")
}
func removeSettingGsmPassword(data connectionData) {
	removeSettingKey(data, "gsm", "password")
}
func removeSettingGsmPasswordFlags(data connectionData) {
	removeSettingKey(data, "gsm", "password-flags")
}
func removeSettingGsmPin(data connectionData) {
	removeSettingKey(data, "gsm", "pin")
}
func removeSettingGsmPinFlags(data connectionData) {
	removeSettingKey(data, "gsm", "pin-flags")
}
func removeSettingGsmSimId(data connectionData) {
	removeSettingKey(data, "gsm", "sim-id")
}
func removeSettingGsmSimOperatorId(data connectionData) {
	removeSettingKey(data, "gsm", "sim-operator-id")
}
func removeSettingGsmUsername(data connectionData) {
	removeSettingKey(data, "gsm", "username")
}
func removeSettingInfinibandMacAddress(data connectionData) {
	removeSettingKey(data, "infiniband", "mac-address")
}
func removeSettingInfinibandMtu(data connectionData) {
	removeSettingKey(data, "infiniband", "mtu")
}
func removeSettingInfinibandPKey(data connectionData) {
	removeSettingKey(data, "infiniband", "p-key")
}
func removeSettingInfinibandParent(data connectionData) {
	removeSettingKey(data, "infiniband", "parent")
}
func removeSettingInfinibandTransportMode(data connectionData) {
	removeSettingKey(data, "infiniband", "transport-mode")
}
func removeSettingIP4ConfigAddresses(data connectionData) {
	removeSettingKey(data, "ipv4", "addresses")
}
func removeSettingIP4ConfigDadTimeout(data connectionData) {
	removeSettingKey(data, "ipv4", "dad-timeout")
}
func removeSettingIP4ConfigDhcpClientId(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-client-id")
}
func removeSettingIP4ConfigDhcpFqdn(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-fqdn")
}
func removeSettingIP4ConfigDhcpHostname(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-hostname")
}
func removeSettingIP4ConfigDhcpSendHostname(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-send-hostname")
}
func removeSettingIP4ConfigDhcpTimeout(data connectionData) {
	removeSettingKey(data, "ipv4", "dhcp-timeout")
}
func removeSettingIP4ConfigDns(data connectionData) {
	removeSettingKey(data, "ipv4", "dns")
}
func removeSettingIP4ConfigDnsOptions(data connectionData) {
	removeSettingKey(data, "ipv4", "dns-options")
}
func removeSettingIP4ConfigDnsPriority(data connectionData) {
	removeSettingKey(data, "ipv4", "dns-priority")
}
func removeSettingIP4ConfigDnsSearch(data connectionData) {
	removeSettingKey(data, "ipv4", "dns-search")
}
func removeSettingIP4ConfigGateway(data connectionData) {
	removeSettingKey(data, "ipv4", "gateway")
}
func removeSettingIP4ConfigIgnoreAutoDns(data connectionData) {
	removeSettingKey(data, "ipv4", "ignore-auto-dns")
}
func removeSettingIP4ConfigIgnoreAutoRoutes(data connectionData) {
	removeSettingKey(data, "ipv4", "ignore-auto-routes")
}
func removeSettingIP4ConfigMayFail(data connectionData) {
	removeSettingKey(data, "ipv4", "may-fail")
}
func removeSettingIP4ConfigMethod(data connectionData) {
	removeSettingKey(data, "ipv4", "method")
}
func removeSettingIP4ConfigNeverDefault(data connectionData) {
	removeSettingKey(data, "ipv4", "never-default")
}
func removeSettingIP4ConfigRouteMetric(data connectionData) {
	removeSettingKey(data, "ipv4", "route-metric")
}
func removeSettingIP4ConfigRoutes(data connectionData) {
	removeSettingKey(data, "ipv4", "routes")
}
func removeSettingIP6ConfigAddrGenMode(data connectionData) {
	removeSettingKey(data, "ipv6", "addr-gen-mode")
}
func removeSettingIP6ConfigAddresses(data connectionData) {
	removeSettingKey(data, "ipv6", "addresses")
}
func removeSettingIP6ConfigDadTimeout(data connectionData) {
	removeSettingKey(data, "ipv6", "dad-timeout")
}
func removeSettingIP6ConfigDhcpHostname(data connectionData) {
	removeSettingKey(data, "ipv6", "dhcp-hostname")
}
func removeSettingIP6ConfigDhcpSendHostname(data connectionData) {
	removeSettingKey(data, "ipv6", "dhcp-send-hostname")
}
func removeSettingIP6ConfigDhcpTimeout(data connectionData) {
	removeSettingKey(data, "ipv6", "dhcp-timeout")
}
func removeSettingIP6ConfigDns(data connectionData) {
	removeSettingKey(data, "ipv6", "dns")
}
func removeSettingIP6ConfigDnsOptions(data connectionData) {
	removeSettingKey(data, "ipv6", "dns-options")
}
func removeSettingIP6ConfigDnsPriority(data connectionData) {
	removeSettingKey(data, "ipv6", "dns-priority")
}
func removeSettingIP6ConfigDnsSearch(data connectionData) {
	removeSettingKey(data, "ipv6", "dns-search")
}
func removeSettingIP6ConfigGateway(data connectionData) {
	removeSettingKey(data, "ipv6", "gateway")
}
func removeSettingIP6ConfigIgnoreAutoDns(data connectionData) {
	removeSettingKey(data, "ipv6", "ignore-auto-dns")
}
func removeSettingIP6ConfigIgnoreAutoRoutes(data connectionData) {
	removeSettingKey(data, "ipv6", "ignore-auto-routes")
}
func removeSettingIP6ConfigIp6Privacy(data connectionData) {
	removeSettingKey(data, "ipv6", "ip6-privacy")
}
func removeSettingIP6ConfigMayFail(data connectionData) {
	removeSettingKey(data, "ipv6", "may-fail")
}
func removeSettingIP6ConfigMethod(data connectionData) {
	removeSettingKey(data, "ipv6", "method")
}
func removeSettingIP6ConfigNeverDefault(data connectionData) {
	removeSettingKey(data, "ipv6", "never-default")
}
func removeSettingIP6ConfigRouteMetric(data connectionData) {
	removeSettingKey(data, "ipv6", "route-metric")
}
func removeSettingIP6ConfigRoutes(data connectionData) {
	removeSettingKey(data, "ipv6", "routes")
}
func removeSettingIP6ConfigToken(data connectionData) {
	removeSettingKey(data, "ipv6", "token")
}
func removeSettingIPTunnelEncapsulationLimit(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "encapsulation-limit")
}
func removeSettingIPTunnelFlowLabel(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "flow-label")
}
func removeSettingIPTunnelInputKey(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "input-key")
}
func removeSettingIPTunnelLocal(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "local")
}
func removeSettingIPTunnelMode(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "mode")
}
func removeSettingIPTunnelMtu(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "mtu")
}
func removeSettingIPTunnelOutputKey(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "output-key")
}
func removeSettingIPTunnelParent(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "parent")
}
func removeSettingIPTunnelPathMtuDiscovery(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "path-mtu-discovery")
}
func removeSettingIPTunnelRemote(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "remote")
}
func removeSettingIPTunnelTos(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "tos")
}
func removeSettingIPTunnelTtl(data connectionData) {
	removeSettingKey(data, "ip-tunnel", "ttl")
}
func removeSettingMacvlanMode(data connectionData) {
	removeSettingKey(data, "macvlan", "mode")
}
func removeSettingMacvlanParent(data connectionData) {
	removeSettingKey(data, "macvlan", "parent")
}
func removeSettingMacvlanPromiscuous(data connectionData) {
	removeSettingKey(data, "macvlan", "promiscuous")
}
func removeSettingMacvlanTap(data connectionData) {
	removeSettingKey(data, "macvlan", "tap")
}
func removeSettingOlpcMeshChannel(data connectionData) {
	removeSettingKey(data, "802-11-olpc-mesh", "channel")
}
func removeSettingOlpcMeshDhcpAnycastAddress(data connectionData) {
	removeSettingKey(data, "802-11-olpc-mesh", "dhcp-anycast-address")
}
func removeSettingOlpcMeshSsid(data connectionData) {
	removeSettingKey(data, "802-11-olpc-mesh", "ssid")
}
func removeSettingPppBaud(data connectionData) {
	removeSettingKey(data, "ppp", "baud")
}
func removeSettingPppCrtscts(data connectionData) {
	removeSettingKey(data, "ppp", "crtscts")
}
func removeSettingPppLcpEchoFailure(data connectionData) {
	removeSettingKey(data, "ppp", "lcp-echo-failure")
}
func removeSettingPppLcpEchoInterval(data connectionData) {
	removeSettingKey(data, "ppp", "lcp-echo-interval")
}
func removeSettingPppMppeStateful(data connectionData) {
	removeSettingKey(data, "ppp", "mppe-stateful")
}
func removeSettingPppMru(data connectionData) {
	removeSettingKey(data, "ppp", "mru")
}
func removeSettingPppMtu(data connectionData) {
	removeSettingKey(data, "ppp", "mtu")
}
func removeSettingPppNoVjComp(data connectionData) {
	removeSettingKey(data, "ppp", "no-vj-comp")
}
func removeSettingPppNoauth(data connectionData) {
	removeSettingKey(data, "ppp", "noauth")
}
func removeSettingPppNobsdcomp(data connectionData) {
	removeSettingKey(data, "ppp", "nobsdcomp")
}
func removeSettingPppNodeflate(data connectionData) {
	removeSettingKey(data, "ppp", "nodeflate")
}
func removeSettingPppRefuseChap(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-chap")
}
func removeSettingPppRefuseEap(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-eap")
}
func removeSettingPppRefuseMschap(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-mschap")
}
func removeSettingPppRefuseMschapv2(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-mschapv2")
}
func removeSettingPppRefusePap(data connectionData) {
	removeSettingKey(data, "ppp", "refuse-pap")
}
func removeSettingPppRequireMppe(data connectionData) {
	removeSettingKey(data, "ppp", "require-mppe")
}
func removeSettingPppRequireMppe128(data connectionData) {
	removeSettingKey(data, "ppp", "require-mppe-128")
}
func removeSettingPppoePassword(data connectionData) {
	removeSettingKey(data, "pppoe", "password")
}
func removeSettingPppoePasswordFlags(data connectionData) {
	removeSettingKey(data, "pppoe", "password-flags")
}
func removeSettingPppoeService(data connectionData) {
	removeSettingKey(data, "pppoe", "service")
}
func removeSettingPppoeUsername(data connectionData) {
	removeSettingKey(data, "pppoe", "username")
}
func removeSettingSerialBaud(data connectionData) {
	removeSettingKey(data, "serial", "baud")
}
func removeSettingSerialBits(data connectionData) {
	removeSettingKey(data, "serial", "bits")
}
func removeSettingSerialParity(data connectionData) {
	removeSettingKey(data, "serial", "parity")
}
func removeSettingSerialSendDelay(data connectionData) {
	removeSettingKey(data, "serial", "send-delay")
}
func removeSettingSerialStopbits(data connectionData) {
	removeSettingKey(data, "serial", "stopbits")
}
func removeSettingTeamConfig(data connectionData) {
	removeSettingKey(data, "team", "config")
}
func removeSettingTeamPortConfig(data connectionData) {
	removeSettingKey(data, "team-port", "config")
}
func removeSettingTunGroup(data connectionData) {
	removeSettingKey(data, "tun", "group")
}
func removeSettingTunMode(data connectionData) {
	removeSettingKey(data, "tun", "mode")
}
func removeSettingTunMultiQueue(data connectionData) {
	removeSettingKey(data, "tun", "multi-queue")
}
func removeSettingTunOwner(data connectionData) {
	removeSettingKey(data, "tun", "owner")
}
func removeSettingTunPi(data connectionData) {
	removeSettingKey(data, "tun", "pi")
}
func removeSettingTunVnetHdr(data connectionData) {
	removeSettingKey(data, "tun", "vnet-hdr")
}
func removeSettingVlanEgressPriorityMap(data connectionData) {
	removeSettingKey(data, "vlan", "egress-priority-map")
}
func removeSettingVlanFlags(data connectionData) {
	removeSettingKey(data, "vlan", "flags")
}
func removeSettingVlanId(data connectionData) {
	removeSettingKey(data, "vlan", "id")
}
func removeSettingVlanIngressPriorityMap(data connectionData) {
	removeSettingKey(data, "vlan", "ingress-priority-map")
}
func removeSettingVlanParent(data connectionData) {
	removeSettingKey(data, "vlan", "parent")
}
func removeSettingVpnData(data connectionData) {
	removeSettingKey(data, "vpn", "data")
}
func removeSettingVpnPersistent(data connectionData) {
	removeSettingKey(data, "vpn", "persistent")
}
func removeSettingVpnSecrets(data connectionData) {
	removeSettingKey(data, "vpn", "secrets")
}
func removeSettingVpnServiceType(data connectionData) {
	removeSettingKey(data, "vpn", "service-type")
}
func removeSettingVpnTimeout(data connectionData) {
	removeSettingKey(data, "vpn", "timeout")
}
func removeSettingVpnUserName(data connectionData) {
	removeSettingKey(data, "vpn", "user-name")
}
func removeSettingVxlanAgeing(data connectionData) {
	removeSettingKey(data, "vxlan", "ageing")
}
func removeSettingVxlanDestinationPort(data connectionData) {
	removeSettingKey(data, "vxlan", "destination-port")
}
func removeSettingVxlanId(data connectionData) {
	removeSettingKey(data, "vxlan", "id")
}
func removeSettingVxlanL2Miss(data connectionData) {
	removeSettingKey(data, "vxlan", "l2-miss")
}
func removeSettingVxlanL3Miss(data connectionData) {
	removeSettingKey(data, "vxlan", "l3-miss")
}
func removeSettingVxlanLearning(data connectionData) {
	removeSettingKey(data, "vxlan", "learning")
}
func removeSettingVxlanLimit(data connectionData) {
	removeSettingKey(data, "vxlan", "limit")
}
func removeSettingVxlanLocal(data connectionData) {
	removeSettingKey(data, "vxlan", "local")
}
func removeSettingVxlanParent(data connectionData) {
	removeSettingKey(data, "vxlan", "parent")
}
func removeSettingVxlanProxy(data connectionData) {
	removeSettingKey(data, "vxlan", "proxy")
}
func removeSettingVxlanRemote(data connectionData) {
	removeSettingKey(data, "vxlan", "remote")
}
func removeSettingVxlanRsc(data connectionData) {
	removeSettingKey(data, "vxlan", "rsc")
}
func removeSettingVxlanSourcePortMax(data connectionData) {
	removeSettingKey(data, "vxlan", "source-port-max")
}
func removeSettingVxlanSourcePortMin(data connectionData) {
	removeSettingKey(data, "vxlan", "source-port-min")
}
func removeSettingVxlanTos(data connectionData) {
	removeSettingKey(data, "vxlan", "tos")
}
func removeSettingVxlanTtl(data connectionData) {
	removeSettingKey(data, "vxlan", "ttl")
}
func removeSettingWimaxMacAddress(data connectionData) {
	removeSettingKey(data, "wimax", "mac-address")
}
func removeSettingWimaxNetworkName(data connectionData) {
	removeSettingKey(data, "wimax", "network-name")
}
func removeSettingWiredAutoNegotiate(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "auto-negotiate")
}
func removeSettingWiredClonedMacAddress(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "cloned-mac-address")
}
func removeSettingWiredDuplex(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "duplex")
}
func removeSettingWiredGenerateMacAddressMask(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "generate-mac-address-mask")
}
func removeSettingWiredMacAddress(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "mac-address")
}
func removeSettingWiredMacAddressBlacklist(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "mac-address-blacklist")
}
func removeSettingWiredMtu(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "mtu")
}
func removeSettingWiredPort(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "port")
}
func removeSettingWiredS390Nettype(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "s390-nettype")
}
func removeSettingWiredS390Options(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "s390-options")
}
func removeSettingWiredS390Subchannels(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "s390-subchannels")
}
func removeSettingWiredSpeed(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "speed")
}
func removeSettingWiredWakeOnLan(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "wake-on-lan")
}
func removeSettingWiredWakeOnLanPassword(data connectionData) {
	removeSettingKey(data, "802-3-ethernet", "wake-on-lan-password")
}
func removeSettingWirelessBand(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "band")
}
func removeSettingWirelessBssid(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "bssid")
}
func removeSettingWirelessChannel(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "channel")
}
func removeSettingWirelessClonedMacAddress(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "cloned-mac-address")
}
func removeSettingWirelessGenerateMacAddressMask(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "generate-mac-address-mask")
}
func removeSettingWirelessHidden(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "hidden")
}
func removeSettingWirelessMacAddress(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mac-address")
}
func removeSettingWirelessMacAddressBlacklist(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mac-address-blacklist")
}
func removeSettingWirelessMacAddressRandomization(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mac-address-randomization")
}
func removeSettingWirelessMode(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mode")
}
func removeSettingWirelessMtu(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "mtu")
}
func removeSettingWirelessPowersave(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "powersave")
}
func removeSettingWirelessRate(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "rate")
}
func removeSettingWirelessSeenBssids(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "seen-bssids")
}
func removeSettingWirelessSsid(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "ssid")
}
func removeSettingWirelessTxPower(data connectionData) {
	removeSettingKey(data, "802-11-wireless", "tx-power")
}
func removeSettingWirelessSecurityAuthAlg(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "auth-alg")
}
func removeSettingWirelessSecurityGroup(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "group")
}
func removeSettingWirelessSecurityKeyMgmt(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "key-mgmt")
}
func removeSettingWirelessSecurityLeapPassword(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "leap-password")
}
func removeSettingWirelessSecurityLeapPasswordFlags(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "leap-password-flags")
}
func removeSettingWirelessSecurityLeapUsername(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "leap-username")
}
func removeSettingWirelessSecurityPairwise(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "pairwise")
}
func removeSettingWirelessSecurityProto(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "proto")
}
func removeSettingWirelessSecurityPsk(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "psk")
}
func removeSettingWirelessSecurityPskFlags(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "psk-flags")
}
func removeSettingWirelessSecurityWepKeyFlags(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key-flags")
}
func removeSettingWirelessSecurityWepKeyType(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key-type")
}
func removeSettingWirelessSecurityWepKey0(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key0")
}
func removeSettingWirelessSecurityWepKey1(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key1")
}
func removeSettingWirelessSecurityWepKey2(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key2")
}
func removeSettingWirelessSecurityWepKey3(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-key3")
}
func removeSettingWirelessSecurityWepTxKeyidx(data connectionData) {
	removeSettingKey(data, "802-11-wireless-security", "wep-tx-keyidx")
}
func removeSettingVpnL2tpKeyGateway(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "gateway")
}
func removeSettingVpnL2tpKeyUser(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "user")
}
func removeSettingVpnL2tpKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "password-flags")
}
func removeSettingVpnL2tpKeyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "password")
}
func removeSettingVpnL2tpKeyDomain(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp", "domain")
}
func removeSettingVpnL2tpKeyRequireMppe(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe")
}
func removeSettingVpnL2tpKeyRequireMppe40(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-40")
}
func removeSettingVpnL2tpKeyRequireMppe128(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "require-mppe-128")
}
func removeSettingVpnL2tpKeyMppeStateful(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "mppe-stateful")
}
func removeSettingVpnL2tpKeyRefuseEap(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-eap")
}
func removeSettingVpnL2tpKeyRefusePap(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-pap")
}
func removeSettingVpnL2tpKeyRefuseChap(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-chap")
}
func removeSettingVpnL2tpKeyRefuseMschap(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschap")
}
func removeSettingVpnL2tpKeyRefuseMschapv2(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "refuse-mschapv2")
}
func removeSettingVpnL2tpKeyNobsdcomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "nobsdcomp")
}
func removeSettingVpnL2tpKeyNodeflate(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "nodeflate")
}
func removeSettingVpnL2tpKeyNoVjComp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "no-vj-comp")
}
func removeSettingVpnL2tpKeyNoPcomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "nopcomp")
}
func removeSettingVpnL2tpKeyNoAccomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "noaccomp")
}
func removeSettingVpnL2tpKeyLcpEchoFailure(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-failure")
}
func removeSettingVpnL2tpKeyLcpEchoInterval(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ppp", "lcp-echo-interval")
}
func removeSettingVpnL2tpKeyIpsecEnable(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-enabled")
}
func removeSettingVpnL2tpKeyIpsecGroupName(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-group-name")
}
func removeSettingVpnL2tpKeyIpsecGatewayId(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-gateway-id")
}
func removeSettingVpnL2tpKeyIpsecPsk(data connectionData) {
	removeSettingKey(data, "alias-vpn-l2tp-ipsec", "ipsec-psk")
}
func removeSettingVpnOpenconnectKeyGateway(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "gateway")
}
func removeSettingVpnOpenconnectKeyCacert(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "cacert")
}
func removeSettingVpnOpenconnectKeyProxy(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "proxy")
}
func removeSettingVpnOpenconnectKeyCsdEnable(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "enable_csd_trojan")
}
func removeSettingVpnOpenconnectKeyCsdWrapper(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "csd_wrapper")
}
func removeSettingVpnOpenconnectKeyUsercert(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "usercert")
}
func removeSettingVpnOpenconnectKeyPrivkey(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "userkey")
}
func removeSettingVpnOpenconnectKeyPemPassphraseFsid(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "pem_passphrase_fsid")
}
func removeSettingVpnOpenconnectKeyCookie(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "cookie")
}
func removeSettingVpnOpenconnectKeyGwcert(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "gwcert")
}
func removeSettingVpnOpenconnectKeyAuthtype(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "authtype")
}
func removeSettingVpnOpenconnectKeyMtu(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "mtu")
}
func removeSettingVpnOpenconnectKeyStokenSource(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "stoken_source")
}
func removeSettingVpnOpenconnectKeyStokenString(data connectionData) {
	removeSettingKey(data, "alias-vpn-openconnect", "stoken_string")
}
func removeSettingVpnOpenvpnKeyRemote(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "remote")
}
func removeSettingVpnOpenvpnKeyConnectionType(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "connection-type")
}
func removeSettingVpnOpenvpnKeyUsername(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "username")
}
func removeSettingVpnOpenvpnKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "password-flags")
}
func removeSettingVpnOpenvpnKeyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "password")
}
func removeSettingVpnOpenvpnKeyCa(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "ca")
}
func removeSettingVpnOpenvpnKeyCert(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "cert")
}
func removeSettingVpnOpenvpnKeyKey(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "key")
}
func removeSettingVpnOpenvpnKeyCertpassFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "cert-pass-flags")
}
func removeSettingVpnOpenvpnKeyCertpass(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "cert-pass")
}
func removeSettingVpnOpenvpnKeyStaticKey(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "static-key")
}
func removeSettingVpnOpenvpnKeyStaticKeyDirection(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "static-key-direction")
}
func removeSettingVpnOpenvpnKeyRemoteIp(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "remote-ip")
}
func removeSettingVpnOpenvpnKeyLocalIp(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn", "local-ip")
}
func removeSettingVpnOpenvpnKeyPort(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "port")
}
func removeSettingVpnOpenvpnKeyRenegSeconds(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "reneg-seconds")
}
func removeSettingVpnOpenvpnKeyCompLzo(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "comp-lzo")
}
func removeSettingVpnOpenvpnKeyProtoTcp(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "proto-tcp")
}
func removeSettingVpnOpenvpnKeyTapDev(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "tap-dev")
}
func removeSettingVpnOpenvpnKeyTunnelMtu(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "tunnel-mtu")
}
func removeSettingVpnOpenvpnKeyFragmentSize(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "fragment-size")
}
func removeSettingVpnOpenvpnKeyMssfix(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "mssfix")
}
func removeSettingVpnOpenvpnKeyRemoteRandom(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-advanced", "remote-random")
}
func removeSettingVpnOpenvpnKeyCipher(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-security", "cipher")
}
func removeSettingVpnOpenvpnKeyAuth(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-security", "auth")
}
func removeSettingVpnOpenvpnKeyTlsRemote(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-tlsauth", "tls-remote")
}
func removeSettingVpnOpenvpnKeyRemoteCertTls(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-tlsauth", "remote-cert-tls")
}
func removeSettingVpnOpenvpnKeyTa(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta")
}
func removeSettingVpnOpenvpnKeyTaDir(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-tlsauth", "ta-dir")
}
func removeSettingVpnOpenvpnKeyProxyType(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-type")
}
func removeSettingVpnOpenvpnKeyProxyServer(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-server")
}
func removeSettingVpnOpenvpnKeyProxyPort(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-port")
}
func removeSettingVpnOpenvpnKeyProxyRetry(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "proxy-retry")
}
func removeSettingVpnOpenvpnKeyHttpProxyUsername(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-username")
}
func removeSettingVpnOpenvpnKeyHttpProxyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password")
}
func removeSettingVpnOpenvpnKeyHttpProxyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-openvpn-proxies", "http-proxy-password-flags")
}
func removeSettingVpnPptpKeyGateway(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "gateway")
}
func removeSettingVpnPptpKeyUser(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "user")
}
func removeSettingVpnPptpKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "password-flags")
}
func removeSettingVpnPptpKeyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "password")
}
func removeSettingVpnPptpKeyDomain(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp", "domain")
}
func removeSettingVpnPptpKeyRequireMppe(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe")
}
func removeSettingVpnPptpKeyRequireMppe40(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-40")
}
func removeSettingVpnPptpKeyRequireMppe128(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "require-mppe-128")
}
func removeSettingVpnPptpKeyMppeStateful(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "mppe-stateful")
}
func removeSettingVpnPptpKeyRefuseEap(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-eap")
}
func removeSettingVpnPptpKeyRefusePap(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-pap")
}
func removeSettingVpnPptpKeyRefuseChap(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-chap")
}
func removeSettingVpnPptpKeyRefuseMschap(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschap")
}
func removeSettingVpnPptpKeyRefuseMschapv2(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "refuse-mschapv2")
}
func removeSettingVpnPptpKeyNobsdcomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "nobsdcomp")
}
func removeSettingVpnPptpKeyNodeflate(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "nodeflate")
}
func removeSettingVpnPptpKeyNoVjComp(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "no-vj-comp")
}
func removeSettingVpnPptpKeyLcpEchoFailure(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-failure")
}
func removeSettingVpnPptpKeyLcpEchoInterval(data connectionData) {
	removeSettingKey(data, "alias-vpn-pptp-ppp", "lcp-echo-interval")
}
func removeSettingVpnStrongswanKeyAddress(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "address")
}
func removeSettingVpnStrongswanKeyCertificate(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "certificate")
}
func removeSettingVpnStrongswanKeyMethod(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "method")
}
func removeSettingVpnStrongswanKeyUser(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "user")
}
func removeSettingVpnStrongswanKeyUsercert(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "usercert")
}
func removeSettingVpnStrongswanKeyUserkey(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "userkey")
}
func removeSettingVpnStrongswanKeyPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "password")
}
func removeSettingVpnStrongswanKeyPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "password-flags")
}
func removeSettingVpnStrongswanKeyVirtual(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "virtual")
}
func removeSettingVpnStrongswanKeyEncap(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "encap")
}
func removeSettingVpnStrongswanKeyIpcomp(data connectionData) {
	removeSettingKey(data, "alias-vpn-strongswan", "ipcomp")
}
func removeSettingVpnVpncKeyGateway(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IPSec gateway")
}
func removeSettingVpnVpncKeyXauthUser(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "Xauth username")
}
func removeSettingVpnVpncKeyXauthPasswordType(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "xauth-password-type")
}
func removeSettingVpnVpncKeyXauthPasswordFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "Xauth password-flags")
}
func removeSettingVpnVpncKeyXauthPassword(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "Xauth password")
}
func removeSettingVpnVpncKeyId(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IPSec ID")
}
func removeSettingVpnVpncKeySecretType(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "ipsec-secret-type")
}
func removeSettingVpnVpncKeySecretFlags(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IPSec secret-flags")
}
func removeSettingVpnVpncKeySecret(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IPSec secret")
}
func removeSettingVpnVpncKeyAuthmode(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "IKE Authmode")
}
func removeSettingVpnVpncKeyCaFile(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc", "CA-File")
}
func removeSettingVpnVpncKeyDomain(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Domain")
}
func removeSettingVpnVpncKeyVendor(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Vendor")
}
func removeSettingVpnVpncKeyAppVersion(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Application Version")
}
func removeSettingVpnVpncKeySingleDes(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Enable Single DES")
}
func removeSettingVpnVpncKeyNoEncryption(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Enable no encryption")
}
func removeSettingVpnVpncKeyNatTraversalMode(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "NAT Traversal Mode")
}
func removeSettingVpnVpncKeyDhgroup(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "IKE DH Group")
}
func removeSettingVpnVpncKeyPerfectForward(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Perfect Forward Secrecy")
}
func removeSettingVpnVpncKeyLocalPort(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Local Port")
}
func removeSettingVpnVpncKeyDpdIdleTimeout(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "DPD idle timeout (our side)")
}
func removeSettingVpnVpncKeyCiscoUdpEncapsPort(data connectionData) {
	removeSettingKey(data, "alias-vpn-vpnc-advanced", "Cisco UDP Encapsulation Port")
}
